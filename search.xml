<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对接Amazon平台API.md</title>
      <link href="/2023/12/15/%E5%AF%B9%E6%8E%A5Amazon%E5%B9%B3%E5%8F%B0API-md/"/>
      <url>/2023/12/15/%E5%AF%B9%E6%8E%A5Amazon%E5%B9%B3%E5%8F%B0API-md/</url>
      
        <content type="html"><![CDATA[<h1 id="对接Amazon平台API"><a href="#对接Amazon平台API" class="headerlink" title="对接Amazon平台API"></a><strong>对接Amazon平台API</strong></h1><p>官网文档<a href="https://developer-docs.amazon.com/sp-api">Selling Partner API (amazon.com)</a></p><p>创建账号，获取accessKeyId、secretKey、Arn</p><p>获取clientId、clientSecret、refreshToken</p><p><a href="https://www.jianshu.com/p/7032c7b40b21">手把手教你从零开始搭建Amazon SP-API开发环境（原MWS API） - 简书 (jianshu.com)</a></p><p>获取到sdk，并且通过以上的信息，进行测试调用</p><p><a href="https://blog.csdn.net/weixin_42567205/article/details/128955709">Amazon平台SP-API的SDK包生成和使用详解-CSDN博客</a></p><p>[亚马逊官方api（SellingPartner - API）帮助文档_亚马逊接口文档-CSDN博客](<a href="https://blog.csdn.net/mollen/article/details/132697933#:~:text=%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%AE%98%E6%96%B9api%EF%BC%88SellingPartner">https://blog.csdn.net/mollen/article/details/132697933#:~:text=亚马逊官方api（SellingPartner</a> - API）帮助文档 1 1、什么是销售伙伴 API？ 销售合作伙伴 API,5 5、查看您的开发者信息 … 6 6、授权销售伙伴 API 应用程序 )</p><p><a href="https://www.jianshu.com/p/59affdb25d53">Amazon使用javaSDK调用SP-API获取卖家分析数据（二）ordersV0Api - 简书 (jianshu.com)</a></p><p>参考</p><p><a href="https://juejin.cn/post/7099406571502829604#heading-3">对接amazon sp-api-开发者权限配置（一） - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7097609867472404517">对接amazon sp-spi-接口对接（二） - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7255564259772727353">AWS 之 IAM - 掘金 (juejin.cn)</a></p><table><thead><tr><th>中文解释</th><th>英文名称</th><th>英文说明</th><th>来源</th></tr></thead><tbody><tr><td>AWS访问密钥编码</td><td>accessKeyId</td><td>AWS access key Id</td><td>创建新的IAM用户之后</td></tr><tr><td>AWS访问密钥</td><td>secretKey</td><td>AWS secret access key</td><td>创建新的IAM用户之后</td></tr><tr><td>IAM职权ARN</td><td>roleArn</td><td>ARN of the IAM role</td><td>创建IAM role的时候生成</td></tr><tr><td>LWA客户端编码</td><td>clientId</td><td>LWA client identifier</td><td>在注册应用程序时生成</td></tr><tr><td>LWA客户端秘钥</td><td>clientSecret</td><td>LWA client secret</td><td>在注册应用程序时生成</td></tr><tr><td>LWA客户端令牌</td><td>refreshToken</td><td>LWA refresh token</td><td>在给应用程序授权时生成</td></tr></tbody></table><h2 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码:"></a>实战代码:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xinghuo.service.api.amazon;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCredentials;</span><br><span class="line">import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCredentialsProvider;</span><br><span class="line">import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;</span><br><span class="line">import com.amazon.SellingPartnerAPIAA.ScopeConstants;</span><br><span class="line">import com.xinghuo.framework.core.util.ResultData;</span><br><span class="line">import io.swagger.client.sellerorders.ApiException;</span><br><span class="line">import io.swagger.client.sellerorders.api.OrdersV0Api;</span><br><span class="line">import io.swagger.client.sellerorders.model.GetOrdersResponse;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">import static com.amazon.SellingPartnerAPIAA.ScopeConstants.SCOPE_MIGRATION_API;</span><br><span class="line">import static com.amazon.SellingPartnerAPIAA.ScopeConstants.SCOPE_NOTIFICATIONS_API;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/amazon&quot;)</span><br><span class="line">public class AmazonApi &#123;</span><br><span class="line">    @Value(&quot;$&#123;amazon.clientId&#125;&quot;)</span><br><span class="line">    private String clientId;</span><br><span class="line">    @Value(&quot;$&#123;amazon.clientSecret&#125;&quot;)</span><br><span class="line">    private String clientSecret;</span><br><span class="line">    @Value(&quot;$&#123;amazon.refreshToken&#125;&quot;)</span><br><span class="line">    private String refreshToken;</span><br><span class="line">    @Value(&quot;$&#123;amazon.accessKeyId&#125;&quot;)</span><br><span class="line">    private String accessKeyId;</span><br><span class="line">    @Value(&quot;$&#123;amazon.secretKey&#125;&quot;)</span><br><span class="line">    private String secretKey;</span><br><span class="line">    @Value(&quot;$&#123;amazon.roleArn&#125;&quot;)</span><br><span class="line">    private String roleArn;</span><br><span class="line">    @Value(&quot;$&#123;amazon.sandBoxEndpoint&#125;&quot;)</span><br><span class="line">    private String sandBoxEndpoint;</span><br><span class="line">    @Value(&quot;$&#123;amazon.endpoint&#125;&quot;)</span><br><span class="line">    private String endpoint;</span><br><span class="line">    @Value(&quot;$&#123;amazon.tokenUrl&#125;&quot;)</span><br><span class="line">    private String tokenUrl;</span><br><span class="line">    @Value(&quot;$&#123;amazon.region&#125;&quot;)</span><br><span class="line">    private String region;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 1连接到spApi</span><br><span class="line">     * 配置自己的AWS凭证</span><br><span class="line">     */</span><br><span class="line">    //注意这个地方的region分北美，欧洲，远东三个AWS区域</span><br><span class="line">    public static AWSAuthenticationCredentials getAWSAuthenticationCredentials(String accessKeyId, String secretKey, String region) &#123;</span><br><span class="line">        AWSAuthenticationCredentials awsAuthenticationCredentials = AWSAuthenticationCredentials.builder()</span><br><span class="line">                //注册成为开发者时生成的AWS访问密钥ID</span><br><span class="line">                .accessKeyId(accessKeyId)</span><br><span class="line">                //注册成为开发者时生成的AWS访问密钥</span><br><span class="line">                .secretKey(secretKey)</span><br><span class="line">                //注意，这里的region分北美(us-east-1)，欧洲(eu-west-1)，远东(us-west-2)</span><br><span class="line">                .region(region)</span><br><span class="line">                .build();</span><br><span class="line">        return awsAuthenticationCredentials;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 2配置您的AWS凭证提供商</span><br><span class="line">     */</span><br><span class="line">    public static AWSAuthenticationCredentialsProvider getAWSAuthenticationCredentialsProvider(String roleArn) &#123;</span><br><span class="line">        AWSAuthenticationCredentialsProvider awsAuthenticationCredentialsProvider = AWSAuthenticationCredentialsProvider.builder()</span><br><span class="line">                //创建IAM职权的时候会生成这个ARN</span><br><span class="line">                .roleArn(roleArn)</span><br><span class="line">                //唯一值，可以使用UUID</span><br><span class="line">                .roleSessionName(UUID.randomUUID().toString())</span><br><span class="line">                .build();</span><br><span class="line">        return awsAuthenticationCredentialsProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 3配置LWA凭证</span><br><span class="line">     */</span><br><span class="line">    public static LWAAuthorizationCredentials getLWAAuthorizationCredentials(String clientId, String clientSecret, String refreshToken, String tokenUrl) &#123;</span><br><span class="line">        LWAAuthorizationCredentials lwaAuthorizationCredentials = LWAAuthorizationCredentials.builder()</span><br><span class="line">                //查看开发者信息的时候可看到LWA的客户端编码</span><br><span class="line">                .clientId(clientId)</span><br><span class="line">                //查看开发者信息的时候可看到LWA的客户端秘钥</span><br><span class="line">                .clientSecret(clientSecret)</span><br><span class="line">                //根据上面的客户端编码和客户端秘钥请求客户端令牌</span><br><span class="line">                //  .withScopes(ScopeConstants.SCOPE_NOTIFICATIONS_API, ScopeConstants.SCOPE_MIGRATION_API)</span><br><span class="line">                .refreshToken(refreshToken)</span><br><span class="line">                //&quot;https://api.amazon.com/auth/o2/token&quot;</span><br><span class="line">                .endpoint(tokenUrl)</span><br><span class="line">                .build();</span><br><span class="line">        return lwaAuthorizationCredentials;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取新增的订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getOrders&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData getOrders() &#123;</span><br><span class="line">        OrdersV0Api ordersV0Api = new OrdersV0Api.Builder().awsAuthenticationCredentials(getAWSAuthenticationCredentials(accessKeyId, secretKey, region))</span><br><span class="line">                .awsAuthenticationCredentialsProvider(getAWSAuthenticationCredentialsProvider(roleArn))</span><br><span class="line">                .lwaAuthorizationCredentials(getLWAAuthorizationCredentials(clientId, clientSecret, refreshToken, tokenUrl))</span><br><span class="line">                //本次试验为测试环境</span><br><span class="line">                //注意，这里的endpoint分北美，欧洲，远东三个地域，每个区域的链接是不一样的</span><br><span class="line">                //北美，https://sellingpartnerapi-na.amazon.com</span><br><span class="line">                //欧洲，https://sellingpartnerapi-eu.amazon.com</span><br><span class="line">                //远东，https://sellingpartnerapi-fe.amazon.com</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; marketplaceIds = Arrays.asList(&quot;ATVPDKIKX0DER&quot;);</span><br><span class="line">        GetOrdersResponse orders = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            orders = ordersV0Api.getOrders(marketplaceIds, &quot;TEST_CASE_200&quot;, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);</span><br><span class="line">        &#125; catch (ApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return ResultData.fail(e.getMessage());</span><br><span class="line">            // System.out.println(&quot;orders.getErrors().toString() = &quot; + orders.getErrors().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;orders.getPayload().getOrders() = &quot; + orders.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ApiException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对接Wayfair平台API.md</title>
      <link href="/2023/12/10/%E5%AF%B9%E6%8E%A5Wayfair%E5%B9%B3%E5%8F%B0API-md/"/>
      <url>/2023/12/10/%E5%AF%B9%E6%8E%A5Wayfair%E5%B9%B3%E5%8F%B0API-md/</url>
      
        <content type="html"><![CDATA[<h1 id="对接Wayfair平台API"><a href="#对接Wayfair平台API" class="headerlink" title="对接Wayfair平台API"></a>对接Wayfair平台API</h1><p>参考</p><p><a href="https://school.eccang.com/pages/viewpage.action?pageId=18645152">wayfair授权指引说明 - ERP在线帮助 - 易仓大学 (eccang.com)</a></p><p><strong>Wayfair API Documentation 说明文档</strong> <a href="https://developer.wayfair.com/docs/cn/">https://developer.wayfair.com/docs/cn/</a></p><p><a href="https://blog.csdn.net/chenpei_pei/article/details/119420246">对接wayfair API-CSDN博客</a></p><h2 id="实战代码："><a href="#实战代码：" class="headerlink" title="实战代码："></a>实战代码：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xinghuo.service.api.wayfair;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.xinghuo.framework.auth.util.UserUtils;</span><br><span class="line">import com.xinghuo.framework.core.util.HttpUtil;</span><br><span class="line">import com.xinghuo.framework.core.util.ResultData;</span><br><span class="line">import com.xinghuo.service.api.eagle.EagleApi;</span><br><span class="line">import com.xinghuo.service.basic.entity.*;</span><br><span class="line">import com.xinghuo.service.basic.server.mapper.*;</span><br><span class="line">import com.xinghuo.service.basic.server.service.BasOrderGenerationRuleService;</span><br><span class="line">import com.xinghuo.service.common.util.HttpRequestMethedEnum;</span><br><span class="line">import okhttp3.*;</span><br><span class="line">import org.apache.commons.compress.utils.IOUtils;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.apache.http.HttpResponse;</span><br><span class="line">import org.apache.http.client.HttpClient;</span><br><span class="line">import org.apache.http.client.methods.HttpGet;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import org.springframework.transaction.interceptor.TransactionAspectSupport;</span><br><span class="line">import org.springframework.util.CollectionUtils;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.URISyntaxException;</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/wayfair&quot;)</span><br><span class="line">public class WayfairApi &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wayfair.clientId&#125;&quot;)</span><br><span class="line">    private String clientId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wayfair.clientSecret&#125;&quot;)</span><br><span class="line">    private String clientSecret;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wayfair.apiUrl&#125;&quot;)</span><br><span class="line">    private String apiUrl;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wayfair.authUrl&#125;&quot;)</span><br><span class="line">    private String authUrl;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wayfair.sandboxClientId&#125;&quot;)</span><br><span class="line">    private String sandboxClientId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wayfair.sandboxClientSecret&#125;&quot;)</span><br><span class="line">    private String sandboxClientSecret;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wayfair.sandboxApiUrl&#125;&quot;)</span><br><span class="line">    private String sandboxApiUrl;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderApiMapper orderApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderDetailApiMapper orderDetailApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ReturnApiMapper returnApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ReturnDetailApiMapper returnDetailApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CommonMapper commonMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private BasOrderGenerationRuleService basOrderGenerationRuleService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OutboundMasterMapper outboundMasterMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OutboundDetailMapper outboundDetailMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EagleApi eagleApi;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过okhttp3 Java库发送HTTP请求的Helper函数。</span><br><span class="line">     *</span><br><span class="line">     * @param method:  HTTP请求方法(POST, GET, PUT, DELETE等)</span><br><span class="line">     * @param url:     请求的url</span><br><span class="line">     * @param body:    请求的有效负载(如果适用)</span><br><span class="line">     * @param headers: 请求的报头(授权、内容类型、缓存控制等)</span><br><span class="line">     * @return 响应</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    private static String sendRequest(String method, String url, String body, Map&lt;String, String&gt; headers) throws Exception &#123;</span><br><span class="line">        Response response = null;</span><br><span class="line">        OkHttpClient client = new OkHttpClient();</span><br><span class="line">        RequestBody requestBody = RequestBody.create(contentType, body);</span><br><span class="line">        Headers.Builder headerBuilder = new Headers.Builder();</span><br><span class="line">        for (String key : headers.keySet()) &#123;</span><br><span class="line">            headerBuilder.add(key, headers.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        Request.Builder requestBuilder = new Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .headers(headerBuilder.build());</span><br><span class="line">        if (method.equals(&quot;POST&quot;))</span><br><span class="line">            requestBuilder.post(requestBody);</span><br><span class="line">        Request request = requestBuilder.build();</span><br><span class="line">        try &#123;</span><br><span class="line">            response = client.newCall(request).execute();</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            throw new Exception(&quot;Request failed with response &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return response.body().string();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 基于Content-Type的静态媒体类型</span><br><span class="line">     * 注意:如果请求的Content-Type与JSON不同，这将会改变。</span><br><span class="line">     */</span><br><span class="line">    private static final MediaType contentType</span><br><span class="line">            = MediaType.parse(&quot;application/json; charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 函数用于根据客户端的id和secret获取身份验证令牌。令牌稍后会</span><br><span class="line">     * 以“承载&#123;TOKEN&#125;”的格式传递到HTTP请求的认证头中。如果</span><br><span class="line">     * 请求抛出异常或用户无法通过身份验证，则该函数将返回None，并将错误打印到控制台。</span><br><span class="line">     *</span><br><span class="line">     * @param clientID     : 客户端ID</span><br><span class="line">     * @param clientSecret :客户的秘密</span><br><span class="line">     * @return response</span><br><span class="line">     */</span><br><span class="line">    private static String fetchToken(String clientID, String clientSecret, String authUrl) &#123;</span><br><span class="line">        Map map = null;</span><br><span class="line">        String payload = &quot;&#123;\&quot;grant_type\&quot;:\&quot;client_credentials\&quot;,\&quot;client_id\&quot;:\&quot;&quot; + clientID + &quot;\&quot;,\&quot;client_secret\&quot;: \&quot;&quot; + clientSecret + &quot;\&quot;, \&quot;audience\&quot;: \&quot;https://api.wayfair.com/\&quot;&#125;&quot;;</span><br><span class="line">        String method = &quot;POST&quot;;</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;content-type&quot;, &quot;application/json&quot;);</span><br><span class="line">        headers.put(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            String jsonResult = sendRequest(method, authUrl, payload, headers);</span><br><span class="line">            if (null == jsonResult) &#123;</span><br><span class="line">                System.out.println(&quot;find Token failed&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            map = JSONObject.parseObject(jsonResult, Map.class);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            System.out.println(&quot;Could not retrieve a token for the request: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return map.get(&quot;access_token&quot;).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取半年前的销售订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getOrders&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData getOrders() &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String token = fetchToken(clientId, clientSecret, authUrl);</span><br><span class="line">        if (token == null) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Token Request failed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        OrderApi orderApi1 = new OrderApi();</span><br><span class="line">        orderApi1.setPlatform(&quot;Wayfair&quot;);</span><br><span class="line">        List&lt;OrderApi&gt; orders = orderApiMapper.query(orderApi1);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        Date now = new Date();</span><br><span class="line">        //半年前</span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.setTime(new Date());</span><br><span class="line">        instance.add(Calendar.MONTH, -6);</span><br><span class="line">        Date time = instance.getTime();</span><br><span class="line">        String fromDate = simpleDateFormat.format(time);</span><br><span class="line">        String response = &quot;&quot;;</span><br><span class="line">        String method = &quot;POST&quot;;</span><br><span class="line">        String graphqlQuery = &quot;&quot;;</span><br><span class="line">        String query = &quot;query getDropshipPurchaseOrders &#123;getDropshipPurchaseOrders (limit: 2000,hasResponse: false,fromDate: \\\&quot;&quot; + fromDate + &quot;\\\&quot;,sortOrder: DESC) &#123;poNumber,poDate,estimatedShipDate,customerName,customerAddress1,customerAddress2,customerCity,customerState,customerPostalCode,orderType,shippingInfo &#123;shipSpeed,carrierCode&#125;,packingSlipUrl,warehouse &#123;id,name,address &#123;name,address1,address2,address3,city,state,country,postalCode&#125;&#125;,products &#123;partNumber,quantity,price,event &#123;id,type,name,startDate,endDate&#125;&#125;,shipTo &#123;name,address1,address2,address3,city,state,country,postalCode,phoneNumber&#125;&#125;&#125;&quot;;</span><br><span class="line">        String variables = &quot;&#123;&#125;&quot;;</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;content-type&quot;, &quot;application/json&quot;);</span><br><span class="line">        headers.put(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">        headers.put(&quot;authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">        JSONObject variablesObj = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (variables != null) &#123;</span><br><span class="line">                variablesObj = new JSONObject(Boolean.parseBoolean(variables));</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variablesObj.toString() + &quot;&#125;&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variables + &quot;&#125;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Graph QL variable JSON parsing failed with response: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = sendRequest(method, apiUrl, graphqlQuery, headers);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Problem executing the GraphQL Request: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        Map data = (Map) resultObject.get(&quot;data&quot;);</span><br><span class="line">        if (null == data) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请求异常&quot; + response);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; getDropshipPurchaseOrders = (List&lt;Map&lt;String, Object&gt;&gt;) data.get(&quot;getDropshipPurchaseOrders&quot;);</span><br><span class="line">        List&lt;OrderApi&gt; orderApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;OrderDetailApi&gt; orderDetailApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        if (!CollectionUtils.isEmpty(getDropshipPurchaseOrders)) &#123;</span><br><span class="line">            Date date = new Date();</span><br><span class="line">            String userCode = UserUtils.getUserCode();</span><br><span class="line">            for (Map&lt;String, Object&gt; order : getDropshipPurchaseOrders) &#123;</span><br><span class="line">                OrderApi orderApi = new OrderApi();</span><br><span class="line">                //订单信息</span><br><span class="line">                String poNumber = (String) order.get(&quot;poNumber&quot;);</span><br><span class="line">                Optional&lt;OrderApi&gt; first = orders.stream().filter(he -&gt; he.getPo().equals(poNumber)).findFirst();</span><br><span class="line">                if (first.isPresent()) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                String poDateStr = (String) order.get(&quot;poDate&quot;);</span><br><span class="line">                poDateStr = poDateStr.substring(0, 19);</span><br><span class="line">                Date poDate = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    poDate = simpleDateFormat.parse(poDateStr);</span><br><span class="line">                &#125; catch (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ResultData.fail(&quot;时间转化异常&quot; + poDateStr);</span><br><span class="line">                &#125;</span><br><span class="line">                String estimatedShipDateStr = (String) order.get(&quot;estimatedShipDate&quot;);</span><br><span class="line">                estimatedShipDateStr = estimatedShipDateStr.substring(0, 19);</span><br><span class="line">                Date estimatedShipDate = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    estimatedShipDate = simpleDateFormat.parse(estimatedShipDateStr);</span><br><span class="line">                &#125; catch (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ResultData.fail(&quot;时间转化异常&quot; + estimatedShipDateStr);</span><br><span class="line">                &#125;</span><br><span class="line">                //客户信息</span><br><span class="line">                String customerName = (String) order.get(&quot;customerName&quot;);</span><br><span class="line">                String customerAddress1 = (String) order.get(&quot;customerAddress1&quot;);</span><br><span class="line">                String customerAddress2 = (String) order.get(&quot;customerAddress2&quot;);</span><br><span class="line">                String customerCity = (String) order.get(&quot;customerCity&quot;);</span><br><span class="line">                String customerState = (String) order.get(&quot;customerState&quot;);</span><br><span class="line">                String customerEmail = (String) order.get(&quot;customerEmail&quot;);</span><br><span class="line">                //运输</span><br><span class="line">                Map shippingInfo = (Map) order.get(&quot;shippingInfo&quot;);</span><br><span class="line">                String shipSpeed = (String) shippingInfo.get(&quot;shipSpeed&quot;);</span><br><span class="line">                String carrierCode = (String) shippingInfo.get(&quot;carrierCode&quot;);</span><br><span class="line">                //仓库</span><br><span class="line">                Map warehouse = (Map) order.get(&quot;warehouse&quot;);</span><br><span class="line">                String name = (String) warehouse.get(&quot;name&quot;);</span><br><span class="line">                Map address = (Map) warehouse.get(&quot;address&quot;);</span><br><span class="line">                String address1 = (String) address.get(&quot;address1&quot;);</span><br><span class="line">                Map shipTo = (Map) order.get(&quot;shipTo&quot;);</span><br><span class="line">                String country = (String) address.get(&quot;country&quot;);</span><br><span class="line">                String phoneNumber = (String) address.get(&quot;phoneNumber&quot;);</span><br><span class="line">                orderApi.setPo(poNumber);</span><br><span class="line">                orderApi.setPlatform(&quot;Wayfair&quot;);</span><br><span class="line">                orderApi.setPoDate(poDate);</span><br><span class="line">                orderApi.setMustShipBy(estimatedShipDate);</span><br><span class="line">                orderApi.setShipToPhone(phoneNumber);</span><br><span class="line">                orderApi.setShipMethod(&quot;&quot;);</span><br><span class="line">                orderApi.setShipToName(customerName);</span><br><span class="line">                orderApi.setShipToAddressOne(customerAddress1);</span><br><span class="line">                orderApi.setShipToAddressTwo(customerAddress2);</span><br><span class="line">                orderApi.setShipToCity(customerCity);</span><br><span class="line">                orderApi.setShipToState(customerState);</span><br><span class="line">                orderApi.setShipToCountry(country);</span><br><span class="line">                orderApi.setShipToZip(customerEmail);</span><br><span class="line">                orderApi.setCarrierName(carrierCode);</span><br><span class="line">                orderApi.setCreateTime(date);</span><br><span class="line">                orderApi.setCreateUser(userCode);</span><br><span class="line">                orderApi.setStatus(&quot;&quot;);</span><br><span class="line">                orderApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                orderApi.setIsOperation(&quot;1&quot;);</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; products = (List&lt;Map&lt;String, Object&gt;&gt;) order.get(&quot;products&quot;);</span><br><span class="line">                if (!CollectionUtils.isEmpty(products)) &#123;</span><br><span class="line">                    int rowNum = 0;</span><br><span class="line">                    for (Map&lt;String, Object&gt; product : products) &#123;</span><br><span class="line">                        rowNum = rowNum + 1;</span><br><span class="line">                        String sku = (String) product.get(&quot;partNumber&quot;);</span><br><span class="line">                        String quantity = (String) product.get(&quot;quantity&quot;);</span><br><span class="line">                        System.out.println(&quot;po为&quot; + poNumber + &quot;:&quot; + product.get(&quot;price&quot;).toString());</span><br><span class="line">                        //  BigDecimal price = (BigDecimal) product.get(&quot;price&quot;);</span><br><span class="line">                        OrderDetailApi orderDetailApi = new OrderDetailApi();</span><br><span class="line">                        orderDetailApi.setCreateTime(date);</span><br><span class="line">                        orderDetailApi.setCreateUser(userCode);</span><br><span class="line">                        orderDetailApi.setPo(poNumber);</span><br><span class="line">                        orderDetailApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                        orderDetailApi.setRowNum(String.valueOf(rowNum));</span><br><span class="line">                        orderDetailApi.setSku(sku);</span><br><span class="line">                        orderDetailApi.setVendor(&quot;&quot;);</span><br><span class="line">                        orderDetailApi.setStatus(&quot;&quot;);</span><br><span class="line">                        orderDetailApi.setPoQty(Integer.parseInt(quantity));</span><br><span class="line">                        orderDetailApi.setPrice(Double.parseDouble(product.get(&quot;price&quot;).toString()));</span><br><span class="line">                        orderDetailApiList.add(orderDetailApi);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                orderApiList.add(orderApi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!CollectionUtils.isEmpty(orderApiList)) &#123;</span><br><span class="line">                orderApiMapper.insertBatch(orderApiList);</span><br><span class="line">            &#125;</span><br><span class="line">            if (!CollectionUtils.isEmpty(orderDetailApiList)) &#123;</span><br><span class="line">                orderDetailApiMapper.insertBatch(orderDetailApiList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            exception.getMessage();</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            System.out.println(exception.getMessage());</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            return ResultData.fail(&quot;存储数据到数据库出现异常&quot; + exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;api获取数据成功总共&quot; + orderApiList.size() + &quot;个订单&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取新增的订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getOrdersNew&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData getOrdersNew() &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String token = fetchToken(clientId, clientSecret, authUrl);</span><br><span class="line">        if (token == null) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Token Request failed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        OrderApi orderApi1 = new OrderApi();</span><br><span class="line">        orderApi1.setPlatform(&quot;Wayfair&quot;);</span><br><span class="line">        List&lt;OrderApi&gt; orders = orderApiMapper.query(orderApi1);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        Date now = new Date();</span><br><span class="line">        Date time = orderApiMapper.orderMaxDate(orderApi1);</span><br><span class="line">        if (time == null) &#123;</span><br><span class="line">            //半年前</span><br><span class="line">            Calendar instance = Calendar.getInstance();</span><br><span class="line">            instance.setTime(new Date());</span><br><span class="line">            instance.add(Calendar.MONTH, -1);</span><br><span class="line">            time = instance.getTime();</span><br><span class="line">        &#125;</span><br><span class="line">        String fromDate = simpleDateFormat.format(time);</span><br><span class="line">        String response = &quot;&quot;;</span><br><span class="line">        String method = &quot;POST&quot;;</span><br><span class="line">        String graphqlQuery = &quot;&quot;;</span><br><span class="line">//        String query = &quot;query getDropshipPurchaseOrders &#123;getDropshipPurchaseOrders (limit: 2000,hasResponse: false,fromDate: \\\&quot;&quot; + fromDate + &quot;\\\&quot;,sortOrder: DESC) &#123;poNumber,poDate,estimatedShipDate,customerName,customerAddress1,customerAddress2,customerCity,customerState,customerPostalCode,orderType,shippingInfo &#123;shipSpeed,carrierCode&#125;,packingSlipUrl,warehouse &#123;id,name,address &#123;name,address1,address2,address3,city,state,country,postalCode&#125;&#125;,products &#123;partNumber,quantity,price,event &#123;id,type,name,startDate,endDate&#125;&#125;,shipTo &#123;name,address1,address2,address3,city,state,country,postalCode,phoneNumber&#125;&#125;&#125;&quot;;</span><br><span class="line">        String query = &quot;query getDropshipPurchaseOrders &#123;getDropshipPurchaseOrders (limit: 2000,fromDate: \\\&quot;&quot; + fromDate + &quot;\\\&quot;,sortOrder: DESC) &#123;poNumber,poDate,estimatedShipDate,customerName,customerAddress1,customerAddress2,customerCity,customerState,customerPostalCode,orderType,shippingInfo &#123;shipSpeed,carrierCode&#125;,packingSlipUrl,warehouse &#123;id,name,address &#123;name,address1,address2,address3,city,state,country,postalCode&#125;&#125;,products &#123;partNumber,quantity,price,event &#123;id,type,name,startDate,endDate&#125;&#125;,shipTo &#123;name,address1,address2,address3,city,state,country,postalCode,phoneNumber&#125;&#125;&#125;&quot;;</span><br><span class="line">        String variables = &quot;&#123;&#125;&quot;;</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;content-type&quot;, &quot;application/json&quot;);</span><br><span class="line">        headers.put(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">        headers.put(&quot;authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">        JSONObject variablesObj = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (variables != null) &#123;</span><br><span class="line">                variablesObj = new JSONObject(Boolean.parseBoolean(variables));</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variablesObj.toString() + &quot;&#125;&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variables + &quot;&#125;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Graph QL variable JSON parsing failed with response: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = sendRequest(method, apiUrl, graphqlQuery, headers);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Problem executing the GraphQL Request: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        Map data = (Map) resultObject.get(&quot;data&quot;);</span><br><span class="line">        if (null == data) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请求异常&quot; + response);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; getDropshipPurchaseOrders = (List&lt;Map&lt;String, Object&gt;&gt;) data.get(&quot;getDropshipPurchaseOrders&quot;);</span><br><span class="line">        List&lt;OrderApi&gt; orderApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;OrderDetailApi&gt; orderDetailApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        if (!CollectionUtils.isEmpty(getDropshipPurchaseOrders)) &#123;</span><br><span class="line">            Date date = new Date();</span><br><span class="line">            String userCode = UserUtils.getUserCode();</span><br><span class="line">            for (Map&lt;String, Object&gt; order : getDropshipPurchaseOrders) &#123;</span><br><span class="line">                OrderApi orderApi = new OrderApi();</span><br><span class="line">                //订单信息</span><br><span class="line">                String poNumber = (String) order.get(&quot;poNumber&quot;);</span><br><span class="line">                Optional&lt;OrderApi&gt; first = orders.stream().filter(he -&gt; he.getPo().equals(poNumber)).findFirst();</span><br><span class="line">                if (first.isPresent()) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                String poDateStr = (String) order.get(&quot;poDate&quot;);</span><br><span class="line">                poDateStr = poDateStr.substring(0, 19);</span><br><span class="line">                Date poDate = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    poDate = simpleDateFormat.parse(poDateStr);</span><br><span class="line">                &#125; catch (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ResultData.fail(&quot;时间转化异常&quot; + poDateStr);</span><br><span class="line">                &#125;</span><br><span class="line">                String estimatedShipDateStr = (String) order.get(&quot;estimatedShipDate&quot;);</span><br><span class="line">                estimatedShipDateStr = estimatedShipDateStr.substring(0, 19);</span><br><span class="line">                Date estimatedShipDate = null;</span><br><span class="line">                try &#123;</span><br><span class="line">                    estimatedShipDate = simpleDateFormat.parse(estimatedShipDateStr);</span><br><span class="line">                &#125; catch (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    return ResultData.fail(&quot;时间转化异常&quot; + estimatedShipDateStr);</span><br><span class="line">                &#125;</span><br><span class="line">                //客户信息</span><br><span class="line">                String customerName = (String) order.get(&quot;customerName&quot;);</span><br><span class="line">                String customerAddress1 = (String) order.get(&quot;customerAddress1&quot;);</span><br><span class="line">                String customerAddress2 = (String) order.get(&quot;customerAddress2&quot;);</span><br><span class="line">                String customerCity = (String) order.get(&quot;customerCity&quot;);</span><br><span class="line">                String customerState = (String) order.get(&quot;customerState&quot;);</span><br><span class="line">                String customerEmail = (String) order.get(&quot;customerEmail&quot;);</span><br><span class="line">                //运输</span><br><span class="line">                Map shippingInfo = (Map) order.get(&quot;shippingInfo&quot;);</span><br><span class="line">                String shipSpeed = (String) shippingInfo.get(&quot;shipSpeed&quot;);</span><br><span class="line">                String carrierCode = (String) shippingInfo.get(&quot;carrierCode&quot;);</span><br><span class="line">                //仓库</span><br><span class="line">                Map warehouse = (Map) order.get(&quot;warehouse&quot;);</span><br><span class="line">                String name = (String) warehouse.get(&quot;name&quot;);</span><br><span class="line">                Map address = (Map) warehouse.get(&quot;address&quot;);</span><br><span class="line">                String address1 = (String) address.get(&quot;address1&quot;);</span><br><span class="line">                Map shipTo = (Map) order.get(&quot;shipTo&quot;);</span><br><span class="line">                String country = (String) address.get(&quot;country&quot;);</span><br><span class="line">                String phoneNumber = (String) address.get(&quot;phoneNumber&quot;);</span><br><span class="line">                orderApi.setPo(poNumber);</span><br><span class="line">                orderApi.setPlatform(&quot;Wayfair&quot;);</span><br><span class="line">                orderApi.setPoDate(poDate);</span><br><span class="line">                orderApi.setMustShipBy(estimatedShipDate);</span><br><span class="line">                orderApi.setShipToPhone(phoneNumber);</span><br><span class="line">                orderApi.setShipMethod(&quot;&quot;);</span><br><span class="line">                orderApi.setShipToName(customerName);</span><br><span class="line">                orderApi.setShipToAddressOne(customerAddress1);</span><br><span class="line">                orderApi.setShipToAddressTwo(customerAddress2);</span><br><span class="line">                orderApi.setShipToCity(customerCity);</span><br><span class="line">                orderApi.setShipToState(customerState);</span><br><span class="line">                orderApi.setShipToCountry(country);</span><br><span class="line">                orderApi.setShipToZip(customerEmail);</span><br><span class="line">                orderApi.setCarrierName(carrierCode);</span><br><span class="line">                orderApi.setCreateTime(date);</span><br><span class="line">                orderApi.setCreateUser(userCode);</span><br><span class="line">                orderApi.setStatus(&quot;&quot;);</span><br><span class="line">                orderApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                orderApi.setIsOperation(&quot;0&quot;);</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; products = (List&lt;Map&lt;String, Object&gt;&gt;) order.get(&quot;products&quot;);</span><br><span class="line">                if (!CollectionUtils.isEmpty(products)) &#123;</span><br><span class="line">                    int rowNum = 0;</span><br><span class="line">                    for (Map&lt;String, Object&gt; product : products) &#123;</span><br><span class="line">                        rowNum = rowNum + 1;</span><br><span class="line">                        String sku = (String) product.get(&quot;partNumber&quot;);</span><br><span class="line">                        String quantity = (String) product.get(&quot;quantity&quot;);</span><br><span class="line">                        System.out.println(&quot;po为&quot; + poNumber + &quot;:&quot; + product.get(&quot;price&quot;).toString());</span><br><span class="line">                        //  BigDecimal price = (BigDecimal) product.get(&quot;price&quot;);</span><br><span class="line">                        OrderDetailApi orderDetailApi = new OrderDetailApi();</span><br><span class="line">                        orderDetailApi.setCreateTime(date);</span><br><span class="line">                        orderDetailApi.setCreateUser(userCode);</span><br><span class="line">                        orderDetailApi.setPo(poNumber);</span><br><span class="line">                        orderDetailApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                        orderDetailApi.setRowNum(String.valueOf(rowNum));</span><br><span class="line">                        orderDetailApi.setSku(sku);</span><br><span class="line">                        orderDetailApi.setVendor(&quot;&quot;);</span><br><span class="line">                        orderDetailApi.setStatus(&quot;&quot;);</span><br><span class="line">                        orderDetailApi.setPoQty(Integer.parseInt(quantity));</span><br><span class="line">                        orderDetailApi.setPrice(Double.parseDouble(product.get(&quot;price&quot;).toString()));</span><br><span class="line">                        orderDetailApiList.add(orderDetailApi);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                orderApiList.add(orderApi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!CollectionUtils.isEmpty(orderApiList)) &#123;</span><br><span class="line">                orderApiMapper.insertBatch(orderApiList);</span><br><span class="line">            &#125;</span><br><span class="line">            if (!CollectionUtils.isEmpty(orderDetailApiList)) &#123;</span><br><span class="line">                orderDetailApiMapper.insertBatch(orderDetailApiList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            exception.getMessage();</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            System.out.println(exception.getMessage());</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            return ResultData.fail(&quot;存储数据到数据库出现异常&quot; + exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;api获取数据成功总共&quot; + orderApiList.size() + &quot;个订单&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/acknowledge&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData acknowledge(OrderApi orderApi) &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">//        String token = fetchToken(clientId, clientSecret, authUrl);</span><br><span class="line">        String token = fetchToken(sandboxClientId, sandboxClientSecret, authUrl);</span><br><span class="line">        if (token == null) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Token Request failed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        String purchaseOrderId = orderApi.getPo();</span><br><span class="line">        String platform = orderApi.getPlatform();</span><br><span class="line">        if (null == platform || StringUtils.isBlank(platform)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请传入平台&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (!platform.equals(&quot;Wayfair&quot;)) &#123;</span><br><span class="line">                return ResultData.fail(&quot;订单平台不一致&quot; + platform);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //运输方式后期可能要支持页面上选择</span><br><span class="line">        String shipSpeedType = orderApi.getShipSpeedType();</span><br><span class="line">        if (StringUtils.isBlank(shipSpeedType)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请选择运输方式&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Common common = new Common();</span><br><span class="line">            List&lt;Common&gt; commons = commonMapper.speedTypeList(common);</span><br><span class="line">            Optional&lt;Common&gt; first = commons.stream().filter(he -&gt; he.getCode().equals(shipSpeedType)).findFirst();</span><br><span class="line">            if (!first.isPresent()) &#123;</span><br><span class="line">                return ResultData.fail(&quot;运输方式有误&quot; + shipSpeedType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (null == purchaseOrderId || StringUtils.isBlank(purchaseOrderId)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请传入订单号&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">//        String detailStr = orderApi.getDetailStr();</span><br><span class="line">//        List&lt;OrderDetailApi&gt; detail = JSONArray.parseArray(detailStr, OrderDetailApi.class);</span><br><span class="line">//        if (CollectionUtils.isEmpty(detail)) &#123;</span><br><span class="line">//            return ResultData.fail(&quot;请传入要取消的要取消的明细数据&quot;);</span><br><span class="line">//        &#125;</span><br><span class="line">        List&lt;OrderApi&gt; orders = orderApiMapper.query(orderApi);</span><br><span class="line">        if (orders.size() &gt; 1) &#123;</span><br><span class="line">            return ResultData.fail(&quot;抓取API的订单&quot; + purchaseOrderId + &quot;出现重复,请仔细核对&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (CollectionUtils.isEmpty(orders)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;系统没有查到有关于这个&quot; + purchaseOrderId + &quot;的订单信息&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        OrderApi orderApi1 = orders.get(0);</span><br><span class="line">        OrderDetailApi detailApi1 = new OrderDetailApi();</span><br><span class="line">        detailApi1.setPo(purchaseOrderId);</span><br><span class="line">        List&lt;OrderDetailApi&gt; detail = orderDetailApiMapper.query(detailApi1);</span><br><span class="line">        if (CollectionUtils.isEmpty(detail)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;系统没有查到有关于这个&quot; + purchaseOrderId + &quot;的明细信息&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String lineItems = &quot;&quot;;</span><br><span class="line">        for (OrderDetailApi detailApi : detail) &#123;</span><br><span class="line">            String sku = detailApi.getSku();</span><br><span class="line">            Integer poQty = detailApi.getPoQty();</span><br><span class="line">            Double price = detailApi.getPrice();</span><br><span class="line">            Calendar instance = Calendar.getInstance();</span><br><span class="line">            instance.setTime(new Date());</span><br><span class="line">            instance.add(Calendar.DATE, 5);</span><br><span class="line">            Date time = instance.getTime();</span><br><span class="line">            detailApi.setEstimatedShipDate(time);</span><br><span class="line">            Date estimatedShipDate = detailApi.getEstimatedShipDate();</span><br><span class="line">            String nestimatedShipDateStr = simpleDateFormat.format(estimatedShipDate);</span><br><span class="line">            String itemStr = &quot;\\n&#123;\\npartNumber: \\\&quot;%s\\\&quot;,\\nquantity: %d,\\nunitPrice: %f,\\nestimatedShipDate: \\\&quot;%s\\\&quot;\\n&#125;\\n&quot;;</span><br><span class="line">            String format = String.format(itemStr, sku, poQty, price, nestimatedShipDateStr);</span><br><span class="line">            lineItems = lineItems + format + &quot;,&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        String response = &quot;&quot;;</span><br><span class="line">        String method = &quot;POST&quot;;</span><br><span class="line">        String graphqlQuery = &quot;&quot;;</span><br><span class="line">        String query = &quot;mutation accept &#123;\\npurchaseOrders &#123;\\naccept (\\npoNumber: \\\&quot;%s\\\&quot;,\\nshipSpeed: %s,\\nlineItems: [%s]\\n) &#123;\\nhandle,\\nsubmittedAt,\\nerrors &#123;\\nkey,\\nmessage\\n&#125;\\n&#125;\\n&#125;\\n&#125;&quot;;</span><br><span class="line">        query = String.format(query, purchaseOrderId, shipSpeedType, lineItems);</span><br><span class="line">        String variables = &quot;&#123;&#125;&quot;;</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;content-type&quot;, &quot;application/json&quot;);</span><br><span class="line">        headers.put(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">        headers.put(&quot;authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">        JSONObject variablesObj = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (variables != null) &#123;</span><br><span class="line">                variablesObj = new JSONObject(Boolean.parseBoolean(variables));</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variablesObj.toString() + &quot;&#125;&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variables + &quot;&#125;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Graph QL variable JSON parsing failed with response: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = sendRequest(method, sandboxApiUrl, graphqlQuery, headers);</span><br><span class="line">            // response = sendRequest(method, apiUrl, graphqlQuery, headers);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Problem executing the GraphQL Request: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        Map data = (Map) resultObject.get(&quot;data&quot;);</span><br><span class="line">        if (null == data) &#123;</span><br><span class="line">            return ResultData.fail(response);</span><br><span class="line">        &#125;</span><br><span class="line">        Map purchaseOrders = (Map) data.get(&quot;purchaseOrders&quot;);</span><br><span class="line">        Map accept = (Map) purchaseOrders.get(&quot;accept&quot;);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; errors = (List&lt;Map&lt;String, Object&gt;&gt;) accept.get(&quot;errors&quot;);</span><br><span class="line">        if (!CollectionUtils.isEmpty(errors)) &#123;</span><br><span class="line">            return ResultData.fail(errors.get(0).get(&quot;message&quot;).toString());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Date date = new Date();</span><br><span class="line">            String userCode = UserUtils.getUserCode();</span><br><span class="line">//            OrderApi orderApi2 = new OrderApi();</span><br><span class="line">            orderApi1.setStatus(&quot;Acknowledged&quot;);</span><br><span class="line">            orderApi1.setUpdateTime(date);</span><br><span class="line">            orderApi1.setUpdateUser(userCode);</span><br><span class="line">            orderApi1.setIsOperation(&quot;1&quot;);</span><br><span class="line">            OrderDetailApi orderDetailApi = new OrderDetailApi();</span><br><span class="line">            orderDetailApi.setPo(purchaseOrderId);</span><br><span class="line">            orderDetailApi.setStatus(&quot;Acknowledged&quot;);</span><br><span class="line">            orderDetailApi.setUpdateTime(date);</span><br><span class="line">            orderDetailApi.setUpdateUser(userCode);</span><br><span class="line">            try &#123;</span><br><span class="line">                orderApiMapper.update(orderApi1);</span><br><span class="line">                orderDetailApiMapper.update(orderDetailApi);</span><br><span class="line">                List&lt;OutboundMaster&gt; outboundMasters = new ArrayList&lt;&gt;();</span><br><span class="line">                List&lt;OutboundDetail&gt; outboundDetails = new ArrayList&lt;&gt;();</span><br><span class="line">                int i = 0;</span><br><span class="line">                for (OrderDetailApi orderDetailApi1 : detail) &#123;</span><br><span class="line">                    for (int j = 0; j &lt; orderDetailApi1.getPoQty(); j++) &#123;</span><br><span class="line">                        i = i + 1;</span><br><span class="line">                        OutboundMaster outboundMaster1 = new OutboundMaster();</span><br><span class="line">                        ResultData&lt;String&gt; orderData = basOrderGenerationRuleService.orderGeneration(&quot;out_warehousing_order&quot;, UserUtils.getUserCode());</span><br><span class="line">                        if (orderData.getCode() != 200) return orderData;</span><br><span class="line">                        String orderNum = orderData.getData();</span><br><span class="line">                        outboundMaster1.setOrder(orderNum);</span><br><span class="line">                        outboundMaster1.setPo(purchaseOrderId + &quot;-&quot; + i);</span><br><span class="line">                        outboundMaster1.setOrderType(&quot;API&quot;);</span><br><span class="line">                        outboundMaster1.setPoDate(orderApi1.getPoDate());</span><br><span class="line">                        outboundMaster1.setPlatform(orderApi1.getPlatform());</span><br><span class="line">                        outboundMaster1.setMustShipBy(orderApi1.getMustShipBy());</span><br><span class="line">                        outboundMaster1.setStatus(&quot;0&quot;);</span><br><span class="line">                        outboundMaster1.setShipMethod(orderApi1.getShipMethod());</span><br><span class="line">                        outboundMaster1.setCarrierName(orderApi1.getCarrierName());</span><br><span class="line">                        outboundMaster1.setShippingAccountNumber(orderApi1.getShippingAccountNumber());</span><br><span class="line">                        outboundMaster1.setShipToName(orderApi1.getShipToName());</span><br><span class="line">                        outboundMaster1.setShipToAddressOne(orderApi1.getShipToAddressOne());</span><br><span class="line">                        outboundMaster1.setShipToAddressTwo(orderApi1.getShipToAddressTwo());</span><br><span class="line">                        outboundMaster1.setShipToAddressThree(orderApi1.getShipToAddressThree());</span><br><span class="line">                        outboundMaster1.setShipToCity(orderApi1.getShipToCity());</span><br><span class="line">                        outboundMaster1.setShipToZip(orderApi1.getShipToZip());</span><br><span class="line">                        outboundMaster1.setShipToPhone(orderApi1.getShipToPhone());</span><br><span class="line">                        outboundMaster1.setShipToCountry(orderApi1.getShipToCountry());</span><br><span class="line">                        outboundMaster1.setShipToState(orderApi1.getShipToState());</span><br><span class="line">                        outboundMaster1.setTrackingNumber(orderApi1.getTrackingNumber());</span><br><span class="line">                        outboundMaster1.setRemark(orderApi1.getRemark());</span><br><span class="line">                        outboundMaster1.setCreateTime(date);</span><br><span class="line">                        outboundMaster1.setCreateUser(userCode);</span><br><span class="line">                        outboundMaster1.setIsHistory(&quot;0&quot;);</span><br><span class="line">                        outboundMaster1.setAuditBatch(1);</span><br><span class="line">                        OutboundDetail outboundDetail = new OutboundDetail();</span><br><span class="line">                        outboundDetail.setOrder(orderNum);</span><br><span class="line">                        outboundDetail.setSku(orderDetailApi1.getSku());</span><br><span class="line">                        outboundDetail.setWarehouse(&quot;WH231215001&quot;);</span><br><span class="line">                        outboundDetail.setPrice(orderDetailApi1.getPrice());</span><br><span class="line">                        outboundDetail.setPoQty(1);</span><br><span class="line">                        outboundDetail.setOutQty(0);</span><br><span class="line">                        outboundDetail.setDifferenceQty(0);</span><br><span class="line">                        outboundDetail.setVendor(orderDetailApi1.getVendor());</span><br><span class="line">                        outboundDetail.setRemark(orderDetailApi1.getRemark());</span><br><span class="line">                        outboundDetail.setCreateUser(userCode);</span><br><span class="line">                        outboundDetail.setCreateTime(date);</span><br><span class="line">                        outboundDetail.setIsHistory(&quot;0&quot;);</span><br><span class="line">                        outboundMasters.add(outboundMaster1);</span><br><span class="line">                        outboundDetails.add(outboundDetail);</span><br><span class="line">                        List&lt;OutboundDetail&gt; outboundDetailList = new ArrayList&lt;&gt;();</span><br><span class="line">                        outboundDetailList.add(outboundDetail);</span><br><span class="line">                        outboundMaster1.setDetailList(outboundDetailList);</span><br><span class="line">                        ResultData order1 = eagleApi.createWayfairOrder(outboundMaster1);</span><br><span class="line">                        if (order1.getCode() != 200) &#123;</span><br><span class="line">                            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">                            return ResultData.fail(&quot;将数据回写到鹰仓时出现了异常&quot; + order1.getData());</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(order1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                outboundMasterMapper.insertBatch(outboundMasters);</span><br><span class="line">                outboundDetailMapper.insertBatch(outboundDetails);</span><br><span class="line">            &#125; catch (Exception exception) &#123;</span><br><span class="line">                exception.getStackTrace();</span><br><span class="line">                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">                return ResultData.fail(&quot;接单成功，但是数据在转成销售出库单的时候出现了异常，请联系管理员&quot; + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(purchaseOrderId + &quot;接单成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 拒单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/cancel&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData cancel(OrderApi orderApi) &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">//        String token = fetchToken(clientId, clientSecret, authUrl);</span><br><span class="line">        String token = fetchToken(sandboxClientId, sandboxClientSecret, authUrl);</span><br><span class="line">        if (token == null) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Token Request failed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        String purchaseOrderId = orderApi.getPo();</span><br><span class="line">        String platform = orderApi.getPlatform();</span><br><span class="line">        if (null == platform || StringUtils.isBlank(platform)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请传入平台&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (!platform.equals(&quot;Wayfair&quot;)) &#123;</span><br><span class="line">                return ResultData.fail(&quot;订单平台不一致&quot; + platform);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (null == purchaseOrderId || StringUtils.isBlank(purchaseOrderId)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请传入订单号&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">//        String detailStr = orderApi.getDetailStr();</span><br><span class="line">//        List&lt;OrderDetailApi&gt; detail = JSONArray.parseArray(detailStr, OrderDetailApi.class);</span><br><span class="line">//        if (CollectionUtils.isEmpty(detail)) &#123;</span><br><span class="line">//            return ResultData.fail(&quot;请传入要取消的要取消的明细数据&quot;);</span><br><span class="line">//        &#125;</span><br><span class="line">        List&lt;OrderApi&gt; orders = orderApiMapper.query(orderApi);</span><br><span class="line">        if (orders.size() &gt; 1) &#123;</span><br><span class="line">            return ResultData.fail(&quot;抓取API的订单&quot; + purchaseOrderId + &quot;出现重复,请仔细核对&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (CollectionUtils.isEmpty(orders)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;系统没有查到有关于这个&quot; + purchaseOrderId + &quot;的订单信息&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        OrderApi orderApi1 = orders.get(0);</span><br><span class="line">        OrderDetailApi detailApi1 = new OrderDetailApi();</span><br><span class="line">        detailApi1.setPo(purchaseOrderId);</span><br><span class="line">        List&lt;OrderDetailApi&gt; detail = orderDetailApiMapper.query(detailApi1);</span><br><span class="line">        if (CollectionUtils.isEmpty(detail)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;系统没有查到有关于这个&quot; + purchaseOrderId + &quot;的明细信息&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String lineItems = &quot;&quot;;</span><br><span class="line">        for (OrderDetailApi detailApi : detail) &#123;</span><br><span class="line">            String sku = detailApi.getSku();</span><br><span class="line">            Integer poQty = detailApi.getPoQty();</span><br><span class="line">            String itemStr = &quot;\\n&#123;\\npartNumber: \\\&quot;%s\\\&quot;,\\nquantity: %d\\n&#125;\\n&quot;;</span><br><span class="line">            String format = String.format(itemStr, sku, poQty);</span><br><span class="line">            lineItems = lineItems + format + &quot;,&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        String response = &quot;&quot;;</span><br><span class="line">        String method = &quot;POST&quot;;</span><br><span class="line">        String graphqlQuery = &quot;&quot;;</span><br><span class="line">        String query = &quot;mutation reject &#123;\\npurchaseOrders &#123;\\nreject (\\npoNumber: \\\&quot;%s\\\&quot;,\\nlineItems: [%s]\\n) &#123;\\nhandle,\\nsubmittedAt,\\nerrors &#123;\\nkey,\\nmessage\\n&#125;\\n&#125;\\n&#125;\\n&#125;&quot;;</span><br><span class="line">        query = String.format(query, purchaseOrderId, lineItems);</span><br><span class="line">        String variables = &quot;&#123;&#125;&quot;;</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;content-type&quot;, &quot;application/json&quot;);</span><br><span class="line">        headers.put(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">        headers.put(&quot;authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">        JSONObject variablesObj = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (variables != null) &#123;</span><br><span class="line">                variablesObj = new JSONObject(Boolean.parseBoolean(variables));</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variablesObj.toString() + &quot;&#125;&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variables + &quot;&#125;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Graph QL variable JSON parsing failed with response: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = sendRequest(method, sandboxApiUrl, graphqlQuery, headers);</span><br><span class="line">//            response = sendRequest(method, apiUrl, graphqlQuery, headers);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Problem executing the GraphQL Request: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        Map data = (Map) resultObject.get(&quot;data&quot;);</span><br><span class="line">        if (null == data) &#123;</span><br><span class="line">            return ResultData.fail(response);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        Map purchaseOrders = (Map) data.get(&quot;purchaseOrders&quot;);</span><br><span class="line">        Map accept = (Map) purchaseOrders.get(&quot;reject&quot;);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; errors = (List&lt;Map&lt;String, Object&gt;&gt;) accept.get(&quot;errors&quot;);</span><br><span class="line">        if (!CollectionUtils.isEmpty(errors)) &#123;</span><br><span class="line">            return ResultData.fail(errors.get(0).get(&quot;message&quot;).toString());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Date date = new Date();</span><br><span class="line">            String userCode = UserUtils.getUserCode();</span><br><span class="line">            try &#123;</span><br><span class="line">                orderApi1.setStatus(&quot;Cancelled&quot;);</span><br><span class="line">                orderApi1.setUpdateTime(date);</span><br><span class="line">                orderApi1.setUpdateUser(userCode);</span><br><span class="line">                orderApi1.setIsOperation(&quot;1&quot;);</span><br><span class="line">                OrderDetailApi orderDetailApi = new OrderDetailApi();</span><br><span class="line">                orderDetailApi.setPo(purchaseOrderId);</span><br><span class="line">                orderDetailApi.setStatus(&quot;Cancelled&quot;);</span><br><span class="line">                orderDetailApi.setUpdateTime(date);</span><br><span class="line">                orderDetailApi.setUpdateUser(userCode);</span><br><span class="line">                orderApiMapper.update(orderApi1);</span><br><span class="line">                orderDetailApiMapper.update(orderDetailApi);</span><br><span class="line">            &#125; catch (Exception exception) &#123;</span><br><span class="line">                exception.getStackTrace();</span><br><span class="line">                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">                return ResultData.fail(&quot;拒单成功，但是数据在转成销售出库单的时候出现了异常，请联系管理员&quot; + exception.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(purchaseOrderId + &quot;拒单成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 库存同步</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/feeds&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData feeds(Inventory inventory) &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String token = fetchToken(sandboxClientId, sandboxClientSecret, authUrl);</span><br><span class="line">        if (token == null) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Token Request failed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        inventory.setInventoryStr(&quot;[&#123;\&quot;storeCode\&quot;:\&quot;95501\&quot;,\&quot;sku\&quot;:\&quot;XXXXXXXX\&quot;,\&quot;storeUseQty\&quot;:1&#125;&#123;\&quot;storeCode\&quot;:\&quot;95501\&quot;,\&quot;sku\&quot;:\&quot;XXXXXXXX\&quot;,\&quot;storeUseQty\&quot;:2&#125;,]&quot;);</span><br><span class="line">        String detailStr = inventory.getInventoryStr();</span><br><span class="line">        List&lt;Inventory&gt; detail = JSONArray.parseArray(detailStr, Inventory.class);</span><br><span class="line">        if (CollectionUtils.isEmpty(detail)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请传入需要同步的库存明细数据&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String inventorys = &quot;&quot;;</span><br><span class="line">        for (Inventory item : detail) &#123;</span><br><span class="line">            String storeCode = item.getStoreCode();</span><br><span class="line">            String sku = item.getSku();</span><br><span class="line">            Integer qty = item.getStoreUseQty();</span><br><span class="line">            String itemStr = &quot;\n&#123;\n\&quot;supplierId\&quot;: %s,\n\&quot;supplierPartNumber\&quot;: \&quot;%s\&quot;,\n\&quot;quantityOnHand\&quot;: %d\n&#125;\n&quot;;</span><br><span class="line">            String format = String.format(itemStr, storeCode, sku, qty);</span><br><span class="line">            inventorys = inventorys + format + &quot;,&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        if (StringUtils.isNotBlank(inventorys)) &#123;</span><br><span class="line">            inventorys = inventorys.substring(0, inventorys.length() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        String response = &quot;&quot;;</span><br><span class="line">        String method = &quot;POST&quot;;</span><br><span class="line">        String graphqlQuery = &quot;&quot;;</span><br><span class="line">        String query = &quot;mutation save (\\n$inventory: [inventoryInput]!,\\n$feedKind: inventoryFeedKind\\n) &#123;\\ninventory &#123;\\nsave (\\ninventory: $inventory,\\nfeedKind: $feedKind\\n) &#123;\\nhandle,\\nsubmittedAt,\\nerrors &#123;\\nkey,\\nmessage\\n&#125;\\n&#125;\\n&#125;\\n&#125;&quot;;</span><br><span class="line">        String variables = &quot;&#123;\n\&quot;inventory\&quot;: [%s],\n\&quot;feedKind\&quot;: \&quot;DIFFERENTIAL\&quot;\n&#125;&quot;;</span><br><span class="line">        variables = String.format(variables, inventorys);</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;content-type&quot;, &quot;application/json&quot;);</span><br><span class="line">        headers.put(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">        headers.put(&quot;authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">        JSONObject variablesObj = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (variables != null) &#123;</span><br><span class="line">                variablesObj = JSONObject.parseObject(variables);</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variablesObj.toString() + &quot;&#125;&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                graphqlQuery = &quot;&#123;\&quot;query\&quot;: \&quot;&quot; + query + &quot;\&quot;,\&quot;variables\&quot;:&quot; + variables + &quot;&#125;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Graph QL variable JSON parsing failed with response: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = sendRequest(method, sandboxApiUrl, graphqlQuery, headers);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Problem executing the GraphQL Request: &quot; + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        Map data = (Map) resultObject.get(&quot;data&quot;);</span><br><span class="line">        if (null == data) &#123;</span><br><span class="line">            return ResultData.fail(response);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        Map inventoryMap = (Map) data.get(&quot;inventory&quot;);</span><br><span class="line">        Map save = (Map) inventoryMap.get(&quot;save&quot;);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; errors = (List&lt;Map&lt;String, Object&gt;&gt;) save.get(&quot;errors&quot;);</span><br><span class="line">        if (!CollectionUtils.isEmpty(errors)) &#123;</span><br><span class="line">            return ResultData.fail(errors.get(0).get(&quot;message&quot;).toString());</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;库存数据同步成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取标签</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/shippingLabel&quot;)</span><br><span class="line">    public ResultData shippingLabel(String purchaseOrderNumber) throws URISyntaxException, IOException &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String token = fetchToken(sandboxClientId, sandboxClientSecret, authUrl);</span><br><span class="line">        if (token == null) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Token Request failed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">//        HttpGet request = new HttpGet(&quot;https://api.wayfair.com/v1/shipping_label/&quot; + purchaseOrderNumber);</span><br><span class="line">        HttpGet request = new HttpGet(&quot;https://sandbox.api.wayfair.com/v1/shipping_label/&quot; + purchaseOrderNumber);</span><br><span class="line">        request.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">        request.setHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">        request.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class="line">        HttpClient client = HttpClients.createDefault();</span><br><span class="line">        HttpResponse response = client.execute(request);</span><br><span class="line">//        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">//        headers.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">//        headers.put(&quot;Authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">//        headers.put(&quot;Content-Type&quot;,&quot;application/json&quot;);</span><br><span class="line">//        Map&lt;String, Object&gt; objectObjectHashMap = new HashMap&lt;&gt;();</span><br><span class="line">//        String response = HttpUtil.sendHttp(HttpRequestMethedEnum.HttpGet, &quot;https://api.wayfair.com/v1/shipping_label/&quot; + purchaseOrderNumber, objectObjectHashMap, headers);</span><br><span class="line">        InputStream in = response.getEntity().getContent();</span><br><span class="line">        FileOutputStream out = new FileOutputStream(&quot;D:/uploadFile/shippingLabel.pdf&quot;);</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        int readByte = 0;</span><br><span class="line">        //读取旧文件的流写入新文件里</span><br><span class="line">        while ((readByte = in.read(buffer)) != -1) &#123;</span><br><span class="line">            out.write(buffer, 0, readByte);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        return ResultData.succeed(EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;));</span><br><span class="line">//        return ResultData.succeed(&quot;success&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取标签</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/billOfLadingRetrieval&quot;)</span><br><span class="line">    public ResultData billOfLadingRetrieval(String purchaseOrderNumber) throws URISyntaxException, IOException &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String token = fetchToken(clientId, clientSecret, authUrl);</span><br><span class="line">        if (token == null) &#123;</span><br><span class="line">            return ResultData.fail(&quot;Token Request failed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        HttpGet request = new HttpGet(&quot;https://api.wayfair.com/v1/bill_of_lading/&quot; + purchaseOrderNumber);</span><br><span class="line">        request.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">        request.setHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + token);</span><br><span class="line">        request.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class="line">        HttpClient client = HttpClients.createDefault();</span><br><span class="line">        HttpResponse response = client.execute(request);</span><br><span class="line">        InputStream in = response.getEntity().getContent();</span><br><span class="line">        FileOutputStream out = new FileOutputStream(&quot;D:/uploadFile/label.pdf&quot;);</span><br><span class="line">        byte[] buffer = new byte[2097152];</span><br><span class="line">        int readByte = 0;</span><br><span class="line">        //读取旧文件的流写入新文件里</span><br><span class="line">        while ((readByte = in.read(buffer)) != -1) &#123;</span><br><span class="line">            out.write(buffer, 0, readByte);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">//        return ResultData.succeed(EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;));</span><br><span class="line">        return ResultData.succeed(&quot;success&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对接Walmart平台API</title>
      <link href="/2023/12/05/%E5%AF%B9%E6%8E%A5Walmart%E5%B9%B3%E5%8F%B0API/"/>
      <url>/2023/12/05/%E5%AF%B9%E6%8E%A5Walmart%E5%B9%B3%E5%8F%B0API/</url>
      
        <content type="html"><![CDATA[<h1 id="对接Walmart平台API"><a href="#对接Walmart平台API" class="headerlink" title="对接Walmart平台API"></a>对接Walmart平台API</h1><p>参考 ：</p><p><a href="https://juejin.cn/post/7078280387935502367">企业对接Walmart平台API流程（一） - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/zhangfeng1133/article/details/123449245">沃尔玛(walmart)开放API接口_对接沃尔玛api_zhangfeng1133的博客-CSDN博客</a></p><p>[如何从沃尔玛Marketplace电商平台获得API接口和密钥？-蓝海亿观网 (egainnews.com)](<a href="https://www.egainnews.com/article/4502#:~:text=%E7%99%BB%E5%BD%95%E6%B2%83%E5%B0%94%E7%8E%9B%E5%8D%96%E5%AE%B6%E4%B8%AD%E5%BF%83%E3%80%82">https://www.egainnews.com/article/4502#:~:text=登录沃尔玛卖家中心。</a> 2. 点击“设置”按钮。 3.,然后单击API。 4. 单击API后，将出现API密钥。 注意：如果未出现密钥，则单击“重新生成密钥”即可。)</p><p><a href="https://blog.csdn.net/penghaiping1001/article/details/119255868">Walmart API 授权流程解析_https://marketplace.walmartapis.com/v3/token-CSDN博客</a></p><p><a href="https://developer.walmart.com/home/us-mp/">开发人员门户Marketplace文档</a></p><p><a href="https://www.cnblogs.com/xiangshihua/p/16285202.html">沃尔玛api接口 - 天心PHP - 博客园 (cnblogs.com)</a></p><h2 id="沃尔玛api验证"><a href="#沃尔玛api验证" class="headerlink" title="沃尔玛api验证"></a>沃尔玛api验证</h2><p>使用<a href="https://so.csdn.net/so/search?q=OAuth&spm=1001.2101.3001.7020">OAuth</a>（开放验证）基于token验证和授权。</p><p><strong>整体思路：首先先将获取到Client ID&#x2F;Client Secret，将Client ID&#x2F;Client Secret转码成Base64编码(Authorization),调用获取token的api，获取到WM_SEC.ACCESS_TOKEN</strong></p><h3 id="token验证（V3）"><a href="#token验证（V3）" class="headerlink" title="token验证（V3）"></a>token验证（V3）</h3><h4 id="验证-authenticaton"><a href="#验证-authenticaton" class="headerlink" title="验证 authenticaton"></a>验证 authenticaton</h4><ul><li>登录开发者中心</li><li>获取Client ID&#x2F;Client Secret，从<a href="https://developer.walmart.com/#/generateKey">API keys页面</a>。（这个页面是需要先区分你是属于沃尔玛的那个类别的账号；登录进去后获取到Client ID&#x2F;Client Secret，如果进去里面没法新增和查看就是没有权限，需找人添加）</li><li>根据Client ID&#x2F;Client Secret，通过沃尔玛的Token API，获取token,token有效时长15分钟。</li><li>使用下面的头部验证信息来验证API调用，所有的API都需要进行验证。</li></ul><p>头部共同验证参数</p><p>所有接口必须包含的头部验证参数。</p><table><thead><tr><th align="left">名称</th><th align="left">描述</th><th align="left">必须</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">WM_SVC.NAME</td><td align="left">沃尔玛服务名称</td><td align="left">Yes</td><td align="left">Walmart Marketplace</td></tr><tr><td align="left">WM_QOS.CORRELATION_ID</td><td align="left">唯一ID，标识API的调用，用来追踪和调试问题。使用GUID生成随机ID</td><td align="left">Yes</td><td align="left">1234hfvgtr</td></tr><tr><td align="left">WM_CONSUMER.CHANNEL.TYPE</td><td align="left">唯一ID用来追踪用户请求的频道（美国，加拿大）</td><td align="left">No</td><td align="left">0f3e4dd4-0514-4346-b39d-…使用用户在登录时收到的用户频道</td></tr><tr><td align="left">Authorization</td><td align="left">基础授权头部。Client ID和Client secret的64位编码</td><td align="left">Yes</td><td align="left">Basic YzcyOTFjNmItNzI5MC00….</td></tr><tr><td align="left">WM_SEC.ACCESS_TOKEN</td><td align="left">通过Token API获取的token</td><td align="left">Yes</td><td align="left">eyJraWQiOiIzZjVhYTFmNS1hYWE5LTQzM…..</td></tr></tbody></table><h4 id="授权-authorization"><a href="#授权-authorization" class="headerlink" title="授权 authorization"></a>授权 authorization</h4><p>沃尔玛提供了委托访问授权。</p><p>委托访问 Delegated Access</p><ul><li>在开发中心，选择“API Keys”。</li><li>添加方案供应商，设置供应商的权限。每个供应商都会有不同的Client ID&#x2F;Client Secret</li><li>将相应的Client ID&#x2F;Client Secret信息发给方案供应商。</li><li>方案供应商使用Client ID&#x2F;Client Secret通过Token API来获取访问token。 如果你的方案供应商不在列表，联系沃尔玛。</li></ul><p>打开沃尔玛开发者<a href="https://developer.walmart.com/">https://developer.walmart.com/</a></p><p>进来之后，根据我们为顾客调用的人那边的账号是什么类别的，总共有四个类别的用户类型（<a href="https://developer.walmart.com/home/us-mp/">Marketplace Partners</a>，<a href="https://developer.walmart.com/home/us-supplier/">1P Suppliers</a>，<a href="https://developer.walmart.com/home/us-cp/">Content Providers</a>，<a href="https://developer.walmart.com/home/advertising-partners/">Advertising Partners</a>）；</p><p>正常是 市场合作伙伴-<a href="https://developer.walmart.com/home/us-mp/">Marketplace Partners</a></p><p>点<a href="https://developer.walmart.com/doc/us/mp/us-mp-intro/">Get started</a>进去的对应的类别进到对应的开发文档里面</p><p>首先先理解整体的对接思路：先找到api文档，点击My Account登录找到获取到Client ID&#x2F;Client Secret（注意这个有权限问题，如果登录进去没法添加或者查看的话，那就是没有权限，或者是登录到账号里面去的setting没有API模块也是没有权限，需找对应的人给你添加权限）</p><p>进去后里面有生产模式(真正的生产，谨慎操作)和沙箱模式（测试环境）</p><p>重点：<strong>可以看到Client ID和 Client Secret</strong></p><p><strong>通过Client ID&#x2F;Client Secret获取到Authorization（基础授权头部。Client ID和Client secret的64位编码）</strong></p><p>拼接方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 对密钥进行64位编码</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private static String getAuthorization(String clientSecret, String clientId) &#123;</span><br><span class="line">//这里注意是clientId在前，clientSecret在后</span><br><span class="line">    String str = clientId + &quot;:&quot; + clientSecret;</span><br><span class="line">    return &quot;Basic &quot; + Base64.encodeBase64String(str.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到之后再进去对应的api文档，</p><p><a href="https://developer.walmart.com/api/us/mp/auth#tag/Authorization">https://developer.walmart.com/api/us/mp/auth#tag/Authorization</a></p><p>注意这里要获取accesstoken 这个 grant_type&#x3D;<strong>client_credentials</strong>；不是refresh_token</p><p>进行调用，获取到WM_SEC.ACCESS_TOKEN，用这个<strong>WM_SEC.ACCESS_TOKEN</strong>就可以去调用其他的API了（查订单，库存…）</p><p>在去其他模块进行获取</p><p><a href="https://developer.walmart.com/api/us/mp/orders#operation/getAllReleasedOrders">https://developer.walmart.com/api/us/mp/orders#operation/getAllReleasedOrders</a></p><p>代码模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import cn.hutool.http.HttpRequest;</span><br><span class="line">import cn.hutool.http.HttpResponse;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.google.api.client.repackaged.org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class AmazonApi &#123;</span><br><span class="line"></span><br><span class="line">    static String clientId = &quot;xxxxxxxxx你的clientIdxxxx&quot;;</span><br><span class="line">    </span><br><span class="line">    static String clientSecret = &quot;xxxxxxxxx你的clientSecretxxxx&quot;;</span><br><span class="line"></span><br><span class="line">    static String accountName = &quot;Walmart Marketplace&quot;; // WM_SVC.NAME</span><br><span class="line"></span><br><span class="line">    static String tokenUrl = &quot;https://marketplace.walmartapis.com/v3/token&quot;;  //获取token的url</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对密钥进行编码</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String getAuthorization(String clientSecret, String clientId) &#123;</span><br><span class="line">        String str = clientId + &quot;:&quot; + clientSecret;</span><br><span class="line">        return &quot;Basic &quot; + Base64.encodeBase64String(str.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取accessToken(WM_SEC.ACCESS_TOKEN)</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getUSAAccessToken() &#123;</span><br><span class="line">        String accessToken;</span><br><span class="line">        String authorization = getAuthorization(clientSecret, clientId);</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;Authorization&quot;, authorization);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            HttpResponse response = HttpRequest.post(tokenUrl)</span><br><span class="line">                    .addHeaders(headers)</span><br><span class="line">                    .body(&quot;grant_type=client_credentials&quot;, &quot;application/x-www-form-urlencoded&quot;)</span><br><span class="line">                    .execute();</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(response.body());</span><br><span class="line">            accessToken = jsonObject.getString(&quot;access_token&quot;);</span><br><span class="line">            if (accessToken == null) &#123;</span><br><span class="line">                System.out.println(&quot;获取沃尔玛接口调用凭证失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.out.println(&quot;请求异常&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取所有的未发货订单</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static void getOrderReleased()&#123;</span><br><span class="line">        String usaAccessToken = getUSAAccessToken();</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;WM_SEC.ACCESS_TOKEN&quot;, usaAccessToken);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        //执行请求，获取数据</span><br><span class="line">        HttpResponse response = HttpRequest.get(&quot;https://marketplace.walmartapis.com/v3/orders/released&quot;)</span><br><span class="line">                .addHeaders(headers)</span><br><span class="line">                .execute();</span><br><span class="line">        if (200 == response.getStatus()) &#123;</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(response.body());</span><br><span class="line">            System.out.println(jsonObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        getOrderReleased();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战代码"><a href="#实战代码" class="headerlink" title="实战代码:"></a>实战代码:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xinghuo.service.api.walmart;</span><br><span class="line"></span><br><span class="line">import cn.hutool.http.HttpRequest;</span><br><span class="line">import cn.hutool.http.HttpResponse;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.google.api.client.repackaged.org.apache.commons.codec.binary.Base64;</span><br><span class="line">import com.xinghuo.framework.auth.util.UserUtils;</span><br><span class="line">import com.xinghuo.framework.core.util.HttpUtil;</span><br><span class="line">import com.xinghuo.framework.core.util.ResultData;</span><br><span class="line">import com.xinghuo.service.api.eagle.EagleApi;</span><br><span class="line">import com.xinghuo.service.basic.entity.*;</span><br><span class="line">import com.xinghuo.service.basic.server.mapper.*;</span><br><span class="line">import com.xinghuo.service.basic.server.service.BasOrderGenerationRuleService;</span><br><span class="line">import com.xinghuo.service.common.util.HttpRequestMethedEnum;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import org.springframework.transaction.interceptor.TransactionAspectSupport;</span><br><span class="line">import org.springframework.util.CollectionUtils;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.net.URISyntaxException;</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/walmart&quot;)</span><br><span class="line">public class WalmartApi &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;walmart.clientId&#125;&quot;)</span><br><span class="line">    private String clientId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;walmart.clientSecret&#125;&quot;)</span><br><span class="line">    private String clientSecret;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;walmart.accountName&#125;&quot;)</span><br><span class="line">    private String accountName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;walmart.tokenUrl&#125;&quot;)</span><br><span class="line">    private String tokenUrl;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;walmart.sandboxClientId&#125;&quot;)</span><br><span class="line">    private String sandboxClientId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;walmart.sandboxClientSecret&#125;&quot;)</span><br><span class="line">    private String sandboxClientSecret;</span><br><span class="line"></span><br><span class="line">//    @Value(&quot;$&#123;walmart.accountName&#125;&quot;)</span><br><span class="line">//    private String accountName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;walmart.sandboxTokenUrl&#125;&quot;)</span><br><span class="line">    private String sandboxTokenUrl;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderApiMapper orderApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderDetailApiMapper orderDetailApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ReturnApiMapper returnApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ReturnDetailApiMapper returnDetailApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private BasOrderGenerationRuleService basOrderGenerationRuleService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OutboundMasterMapper outboundMasterMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OutboundDetailMapper outboundDetailMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private EagleApi eagleApi;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对密钥进行编码</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getAuthorization(String clientId, String clientSecret) &#123;</span><br><span class="line">        String str = clientId + &quot;:&quot; + clientSecret;</span><br><span class="line">        return &quot;Basic &quot; + Base64.encodeBase64String(str.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取美国店铺的token</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String getUSAAccessToken(String clientId, String clientSecret, String accountName, String tokenUrl) &#123;</span><br><span class="line">        String accessToken;</span><br><span class="line">        String authorization = getAuthorization(clientId, clientSecret);</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;Authorization&quot;, authorization);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        try &#123;</span><br><span class="line">            HttpResponse response = HttpRequest.post(tokenUrl)</span><br><span class="line">                    .addHeaders(headers)</span><br><span class="line">                    .body(&quot;grant_type=client_credentials&quot;, &quot;application/x-www-form-urlencoded&quot;)</span><br><span class="line">                    .execute();</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(response.body());</span><br><span class="line">            accessToken = jsonObject.getString(&quot;access_token&quot;);</span><br><span class="line">            if (accessToken == null) &#123;</span><br><span class="line">                System.out.println(&quot;获取沃尔玛接口调用凭证失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.out.println(&quot;请求异常&quot;);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取所有的刚下单未接单的订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getOrdersCreated&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData getOrdersCreated() throws URISyntaxException &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String usaAccessToken = getUSAAccessToken(clientId, clientSecret, accountName, tokenUrl);</span><br><span class="line">        //设置请求头</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;WM_SEC.ACCESS_TOKEN&quot;, usaAccessToken);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        headers.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">//        获取数据库中沃尔玛平台的时间</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ssZ&quot;);</span><br><span class="line">        //设置参数</span><br><span class="line">        HashMap&lt;String, Object&gt; objectObjectHashMap = new HashMap&lt;&gt;();</span><br><span class="line">        OrderApi orderApi1 = new OrderApi();</span><br><span class="line">        orderApi1.setPlatform(&quot;Walmart&quot;);</span><br><span class="line">        List&lt;OrderApi&gt; orders = orderApiMapper.query(orderApi1);</span><br><span class="line">        Date date1 = orderApiMapper.orderMaxDate(orderApi1);</span><br><span class="line">        if (null != date1) &#123;</span><br><span class="line">            String createdStartDate = simpleDateFormat.format(date1);</span><br><span class="line">            objectObjectHashMap.put(&quot;createdStartDate&quot;, createdStartDate);</span><br><span class="line">        &#125;</span><br><span class="line">        //  objectObjectHashMap.put(&quot;status&quot;, &quot;Created&quot;);</span><br><span class="line">        objectObjectHashMap.put(&quot;limit&quot;, &quot;200&quot;);</span><br><span class="line">        String response = HttpUtil.sendHttp(HttpRequestMethedEnum.HttpGet, &quot;https://marketplace.walmartapis.com/v3/orders&quot;, objectObjectHashMap, headers);</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        Map map = (Map) resultObject.get(&quot;list&quot;);</span><br><span class="line">        Map elements = (Map) map.get(&quot;elements&quot;);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; orderList = (List&lt;Map&lt;String, Object&gt;&gt;) elements.get(&quot;order&quot;);</span><br><span class="line">        List&lt;OrderApi&gt; orderApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;OrderDetailApi&gt; orderDetailApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        if (!CollectionUtils.isEmpty(orderList)) &#123;</span><br><span class="line">            Date date = new Date();</span><br><span class="line">            String userCode = UserUtils.getUserCode();</span><br><span class="line">            for (Map&lt;String, Object&gt; order : orderList) &#123;</span><br><span class="line">                OrderApi orderApi = new OrderApi();</span><br><span class="line">                String purchaseOrderId = (String) order.get(&quot;purchaseOrderId&quot;);</span><br><span class="line">                Optional&lt;OrderApi&gt; first = orders.stream().filter(he -&gt; he.getPo().equals(purchaseOrderId)).findFirst();</span><br><span class="line">                if (first.isPresent()) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                String customerOrderId = (String) order.get(&quot;customerOrderId&quot;);</span><br><span class="line">                String customerEmailId = (String) order.get(&quot;customerEmailId&quot;);</span><br><span class="line">                long orderDateLong = (long) order.get(&quot;orderDate&quot;);</span><br><span class="line">                Map shippingInfo = (Map) order.get(&quot;shippingInfo&quot;);</span><br><span class="line">                String phone = (String) shippingInfo.get(&quot;phone&quot;);</span><br><span class="line">                long estimatedDeliveryDateLong = (long) shippingInfo.get(&quot;estimatedDeliveryDate&quot;);</span><br><span class="line">                long estimatedShipDateLong = (long) shippingInfo.get(&quot;estimatedShipDate&quot;);</span><br><span class="line">                String methodCode = (String) shippingInfo.get(&quot;methodCode&quot;);</span><br><span class="line">                Map postalAddress = (Map) shippingInfo.get(&quot;postalAddress&quot;);</span><br><span class="line">                String name = (String) postalAddress.get(&quot;name&quot;);</span><br><span class="line">                String address1 = (String) postalAddress.get(&quot;address1&quot;);</span><br><span class="line">                String address2 = (String) postalAddress.get(&quot;address2&quot;);</span><br><span class="line">                String city = (String) postalAddress.get(&quot;city&quot;);</span><br><span class="line">                String state = (String) postalAddress.get(&quot;state&quot;);</span><br><span class="line">                String postalCode = (String) postalAddress.get(&quot;postalCode&quot;);</span><br><span class="line">                String country = (String) postalAddress.get(&quot;country&quot;);</span><br><span class="line">                Map orderLines = (Map) order.get(&quot;orderLines&quot;);</span><br><span class="line">                orderApi.setPo(purchaseOrderId);</span><br><span class="line">                orderApi.setPlatform(&quot;Walmart&quot;);</span><br><span class="line">                Date orderDate = new Date(orderDateLong);</span><br><span class="line">                orderApi.setPoDate(orderDate);</span><br><span class="line">                orderApi.setShipToPhone(phone);</span><br><span class="line">                Date estimatedDeliveryDate = new Date(estimatedDeliveryDateLong);</span><br><span class="line">                orderApi.setMustShipBy(estimatedDeliveryDate);</span><br><span class="line">                orderApi.setShipMethod(methodCode);</span><br><span class="line">                orderApi.setShipToName(name);</span><br><span class="line">                orderApi.setShipToAddressOne(address1);</span><br><span class="line">                orderApi.setShipToAddressTwo(address2);</span><br><span class="line">                orderApi.setShipToCity(city);</span><br><span class="line">                orderApi.setShipToState(state);</span><br><span class="line">                orderApi.setShipToCountry(country);</span><br><span class="line">                orderApi.setShipToZip(postalCode);</span><br><span class="line">                orderApi.setCreateTime(date);</span><br><span class="line">                orderApi.setCreateUser(userCode);</span><br><span class="line">                orderApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                orderApi.setIsOperation(&quot;0&quot;);</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; orderLine = (List&lt;Map&lt;String, Object&gt;&gt;) orderLines.get(&quot;orderLine&quot;);</span><br><span class="line">                if (!CollectionUtils.isEmpty(orderLine)) &#123;</span><br><span class="line">//                    List&lt;OrderDetailApi&gt; orderDetailApis = new ArrayList&lt;&gt;();</span><br><span class="line">//                    List&lt;String&gt; skus = new ArrayList&lt;&gt;();</span><br><span class="line">                    for (Map&lt;String, Object&gt; line : orderLine) &#123;</span><br><span class="line">                        OrderDetailApi orderDetailApi = new OrderDetailApi();</span><br><span class="line">                        orderDetailApi.setCreateTime(date);</span><br><span class="line">                        orderDetailApi.setCreateUser(userCode);</span><br><span class="line">                        orderDetailApi.setPo(purchaseOrderId);</span><br><span class="line">                        orderDetailApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                        String rowNum = (String) line.get(&quot;lineNumber&quot;);</span><br><span class="line">                        Map item = (Map) line.get(&quot;item&quot;);</span><br><span class="line">                        String sku = (String) item.get(&quot;sku&quot;);</span><br><span class="line">                        String productName = (String) item.get(&quot;productName&quot;);</span><br><span class="line">//                        if (!skus.contains(sku)) &#123;</span><br><span class="line">//                            skus.add(sku);</span><br><span class="line">//                        &#125;</span><br><span class="line">                        Map charges = (Map) line.get(&quot;charges&quot;);</span><br><span class="line">                        orderDetailApi.setRowNum(rowNum);</span><br><span class="line">                        orderDetailApi.setSku(sku);</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; charge = (List&lt;Map&lt;String, Object&gt;&gt;) charges.get(&quot;charge&quot;);</span><br><span class="line">                        if (!CollectionUtils.isEmpty(charge)) &#123;</span><br><span class="line">                            Map&lt;String, Object&gt; itemPrice = charge.get(0);</span><br><span class="line">                            Map chargeAmount = (Map) itemPrice.get(&quot;chargeAmount&quot;);</span><br><span class="line">                            BigDecimal price = (BigDecimal) chargeAmount.get(&quot;amount&quot;);</span><br><span class="line">                            double v = price.doubleValue();</span><br><span class="line">                            orderDetailApi.setPrice(v);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Map orderLineQuantity = (Map) line.get(&quot;orderLineQuantity&quot;);</span><br><span class="line">                        String quantity = (String) orderLineQuantity.get(&quot;amount&quot;);</span><br><span class="line">                        int qty = Integer.parseInt(quantity);</span><br><span class="line">                        Map fulfillment = (Map) line.get(&quot;fulfillment&quot;);</span><br><span class="line">                        String vendor = (String) fulfillment.get(&quot;fulfillmentOption&quot;);</span><br><span class="line">                        Map orderLineStatuses = (Map) line.get(&quot;orderLineStatuses&quot;);</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; orderLineStatus = (List&lt;Map&lt;String, Object&gt;&gt;) orderLineStatuses.get(&quot;orderLineStatus&quot;);</span><br><span class="line">                        if (!CollectionUtils.isEmpty(orderLineStatus)) &#123;</span><br><span class="line">                            Map&lt;String, Object&gt; itemPrice = orderLineStatus.get(0);</span><br><span class="line">                            String status = (String) itemPrice.get(&quot;status&quot;);</span><br><span class="line">                            orderApi.setStatus(status);</span><br><span class="line">                            orderDetailApi.setStatus(status);</span><br><span class="line">                            if (status.equals(&quot;Created&quot;)) &#123;</span><br><span class="line">                                orderApi.setIsOperation(&quot;0&quot;);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                orderApi.setIsOperation(&quot;1&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        orderDetailApi.setVendor(vendor);</span><br><span class="line">                        orderDetailApi.setPoQty(qty);</span><br><span class="line">//                        orderDetailApis.add(orderDetailApi);</span><br><span class="line">                        orderDetailApiList.add(orderDetailApi);</span><br><span class="line">                    &#125;</span><br><span class="line">//                    for (String sku : skus) &#123;</span><br><span class="line">//                        List&lt;OrderDetailApi&gt; collect = orderDetailApis.stream().filter(he -&gt; he.getSku().equals(sku)).collect(Collectors.toList());</span><br><span class="line">//                        if (!CollectionUtils.isEmpty(collect)) &#123;</span><br><span class="line">//                            OrderDetailApi orderDetailApi = collect.get(0);</span><br><span class="line">//                            int sum = collect.stream().mapToInt(OrderDetailApi::getPoQty).sum();</span><br><span class="line">//                            orderDetailApi.setPoQty(sum);</span><br><span class="line">//                            orderDetailApiList.add(orderDetailApi);</span><br><span class="line">//                        &#125;</span><br><span class="line">//                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                orderApiList.add(orderApi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!CollectionUtils.isEmpty(orderApiList)) &#123;</span><br><span class="line">                orderApiMapper.insertBatch(orderApiList);</span><br><span class="line">            &#125;</span><br><span class="line">            if (!CollectionUtils.isEmpty(orderDetailApiList)) &#123;</span><br><span class="line">                orderDetailApiMapper.insertBatch(orderDetailApiList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            exception.getMessage();</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            System.out.println(exception.getMessage());</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            return ResultData.fail(&quot;获取异常&quot; + exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;api获取数据成功总共&quot; + orderApiList.size() + &quot;个订单&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取所有的订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getOrdersAll&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData getOrdersAll() throws URISyntaxException &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String usaAccessToken = getUSAAccessToken(clientId, clientSecret, accountName, tokenUrl);</span><br><span class="line">        //设置请求头</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;WM_SEC.ACCESS_TOKEN&quot;, usaAccessToken);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        headers.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">        OrderApi orderApi1 = new OrderApi();</span><br><span class="line">        orderApi1.setPlatform(&quot;Walmart&quot;);</span><br><span class="line">        List&lt;OrderApi&gt; orders = orderApiMapper.query(orderApi1);</span><br><span class="line">//        获取数据库中沃尔玛平台的时间</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ssZ&quot;);</span><br><span class="line">        //半年前</span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.setTime(new Date());</span><br><span class="line">        instance.add(Calendar.MONTH, -6);</span><br><span class="line">        Date time = instance.getTime();</span><br><span class="line">        String createdStartDate = simpleDateFormat.format(time);</span><br><span class="line">//        设置参数</span><br><span class="line">        HashMap&lt;String, Object&gt; objectObjectHashMap = new HashMap&lt;&gt;();</span><br><span class="line">        // objectObjectHashMap.put(&quot;status&quot;,&quot;Created&quot;);</span><br><span class="line">        objectObjectHashMap.put(&quot;createdStartDate&quot;, createdStartDate);</span><br><span class="line">        objectObjectHashMap.put(&quot;limit&quot;, &quot;200&quot;);</span><br><span class="line">        String response = HttpUtil.sendHttp(HttpRequestMethedEnum.HttpGet, &quot;https://marketplace.walmartapis.com/v3/orders&quot;, objectObjectHashMap, headers);</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        Map map = (Map) resultObject.get(&quot;list&quot;);</span><br><span class="line">        Map elements = (Map) map.get(&quot;elements&quot;);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; orderList = (List&lt;Map&lt;String, Object&gt;&gt;) elements.get(&quot;order&quot;);</span><br><span class="line">        List&lt;OrderApi&gt; orderApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;OrderDetailApi&gt; orderDetailApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        if (!CollectionUtils.isEmpty(orderList)) &#123;</span><br><span class="line">            Date date = new Date();</span><br><span class="line">            String userCode = UserUtils.getUserCode();</span><br><span class="line">            for (Map&lt;String, Object&gt; order : orderList) &#123;</span><br><span class="line">                OrderApi orderApi = new OrderApi();</span><br><span class="line">                //采购单号</span><br><span class="line">                String purchaseOrderId = (String) order.get(&quot;purchaseOrderId&quot;);</span><br><span class="line">                //订单号</span><br><span class="line">                String customerOrderId = (String) order.get(&quot;customerOrderId&quot;);</span><br><span class="line">                Optional&lt;OrderApi&gt; first = orders.stream().filter(he -&gt; he.getPo().equals(purchaseOrderId)).findFirst();</span><br><span class="line">                if (first.isPresent()) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                String customerEmailId = (String) order.get(&quot;customerEmailId&quot;);</span><br><span class="line">                long orderDateLong = (long) order.get(&quot;orderDate&quot;);</span><br><span class="line">                Map shippingInfo = (Map) order.get(&quot;shippingInfo&quot;);</span><br><span class="line">                String phone = (String) shippingInfo.get(&quot;phone&quot;);</span><br><span class="line">                long estimatedDeliveryDateLong = (long) shippingInfo.get(&quot;estimatedDeliveryDate&quot;);</span><br><span class="line">                long estimatedShipDateLong = (long) shippingInfo.get(&quot;estimatedShipDate&quot;);</span><br><span class="line">                String methodCode = (String) shippingInfo.get(&quot;methodCode&quot;);</span><br><span class="line">                Map postalAddress = (Map) shippingInfo.get(&quot;postalAddress&quot;);</span><br><span class="line">                String name = (String) postalAddress.get(&quot;name&quot;);</span><br><span class="line">                String address1 = (String) postalAddress.get(&quot;address1&quot;);</span><br><span class="line">                String address2 = (String) postalAddress.get(&quot;address2&quot;);</span><br><span class="line">                String city = (String) postalAddress.get(&quot;city&quot;);</span><br><span class="line">                String state = (String) postalAddress.get(&quot;state&quot;);</span><br><span class="line">                String postalCode = (String) postalAddress.get(&quot;postalCode&quot;);</span><br><span class="line">                String country = (String) postalAddress.get(&quot;country&quot;);</span><br><span class="line">                Map orderLines = (Map) order.get(&quot;orderLines&quot;);</span><br><span class="line">                orderApi.setPo(purchaseOrderId);</span><br><span class="line">                orderApi.setPlatform(&quot;Walmart&quot;);</span><br><span class="line">                Date orderDate = new Date(orderDateLong);</span><br><span class="line">                orderApi.setPoDate(orderDate);</span><br><span class="line">                orderApi.setShipToPhone(phone);</span><br><span class="line">                Date estimatedDeliveryDate = new Date(estimatedDeliveryDateLong);</span><br><span class="line">                orderApi.setMustShipBy(estimatedDeliveryDate);</span><br><span class="line">                orderApi.setShipMethod(methodCode);</span><br><span class="line">                orderApi.setShipToName(name);</span><br><span class="line">                orderApi.setShipToAddressOne(address1);</span><br><span class="line">                orderApi.setShipToAddressTwo(address2);</span><br><span class="line">                orderApi.setShipToCity(city);</span><br><span class="line">                orderApi.setShipToState(state);</span><br><span class="line">                orderApi.setShipToCountry(country);</span><br><span class="line">                orderApi.setShipToZip(postalCode);</span><br><span class="line">                orderApi.setCreateTime(date);</span><br><span class="line">                orderApi.setCreateUser(userCode);</span><br><span class="line">                orderApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                orderApi.setIsOperation(&quot;0&quot;);</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; orderLine = (List&lt;Map&lt;String, Object&gt;&gt;) orderLines.get(&quot;orderLine&quot;);</span><br><span class="line">                if (!CollectionUtils.isEmpty(orderLine)) &#123;</span><br><span class="line">//                    List&lt;OrderDetailApi&gt; orderDetailApis = new ArrayList&lt;&gt;();</span><br><span class="line">//                    List&lt;String&gt; skus = new ArrayList&lt;&gt;();</span><br><span class="line">                    for (Map&lt;String, Object&gt; line : orderLine) &#123;</span><br><span class="line">                        OrderDetailApi orderDetailApi = new OrderDetailApi();</span><br><span class="line">                        orderDetailApi.setCreateTime(date);</span><br><span class="line">                        orderDetailApi.setCreateUser(userCode);</span><br><span class="line">                        orderDetailApi.setPo(purchaseOrderId);</span><br><span class="line">                        orderDetailApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                        String rowNum = (String) line.get(&quot;lineNumber&quot;);</span><br><span class="line">                        Map item = (Map) line.get(&quot;item&quot;);</span><br><span class="line">                        String sku = (String) item.get(&quot;sku&quot;);</span><br><span class="line">                        String productName = (String) item.get(&quot;productName&quot;);</span><br><span class="line">//                        if (!skus.contains(sku)) &#123;</span><br><span class="line">//                            skus.add(sku);</span><br><span class="line">//                        &#125;</span><br><span class="line">                        Map charges = (Map) line.get(&quot;charges&quot;);</span><br><span class="line">                        orderDetailApi.setRowNum(rowNum);</span><br><span class="line">                        orderDetailApi.setSku(sku);</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; charge = (List&lt;Map&lt;String, Object&gt;&gt;) charges.get(&quot;charge&quot;);</span><br><span class="line">                        if (!CollectionUtils.isEmpty(charge)) &#123;</span><br><span class="line">                            Map&lt;String, Object&gt; itemPrice = charge.get(0);</span><br><span class="line">                            Map chargeAmount = (Map) itemPrice.get(&quot;chargeAmount&quot;);</span><br><span class="line">                            BigDecimal price = (BigDecimal) chargeAmount.get(&quot;amount&quot;);</span><br><span class="line">                            double v = price.doubleValue();</span><br><span class="line">                            orderDetailApi.setPrice(v);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Map orderLineQuantity = (Map) line.get(&quot;orderLineQuantity&quot;);</span><br><span class="line">                        String quantity = (String) orderLineQuantity.get(&quot;amount&quot;);</span><br><span class="line">                        int qty = Integer.parseInt(quantity);</span><br><span class="line">                        Map fulfillment = (Map) line.get(&quot;fulfillment&quot;);</span><br><span class="line">                        String vendor = (String) fulfillment.get(&quot;fulfillmentOption&quot;);</span><br><span class="line">                        Map orderLineStatuses = (Map) line.get(&quot;orderLineStatuses&quot;);</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; orderLineStatus = (List&lt;Map&lt;String, Object&gt;&gt;) orderLineStatuses.get(&quot;orderLineStatus&quot;);</span><br><span class="line">                        if (!CollectionUtils.isEmpty(orderLineStatus)) &#123;</span><br><span class="line">                            Map&lt;String, Object&gt; itemPrice = orderLineStatus.get(0);</span><br><span class="line">                            String status = (String) itemPrice.get(&quot;status&quot;);</span><br><span class="line">                            orderApi.setStatus(status);</span><br><span class="line">                            orderDetailApi.setStatus(status);</span><br><span class="line">                            if (status.equals(&quot;Created&quot;)) &#123;</span><br><span class="line">                                orderApi.setIsOperation(&quot;0&quot;);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                orderApi.setIsOperation(&quot;1&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        orderDetailApi.setVendor(vendor);</span><br><span class="line">                        orderDetailApi.setPoQty(qty);</span><br><span class="line">//                        orderDetailApis.add(orderDetailApi);</span><br><span class="line">                        orderDetailApiList.add(orderDetailApi);</span><br><span class="line">                    &#125;</span><br><span class="line">//                    for (String sku : skus) &#123;</span><br><span class="line">//                        List&lt;OrderDetailApi&gt; collect = orderDetailApis.stream().filter(he -&gt; he.getSku().equals(sku)).collect(Collectors.toList());</span><br><span class="line">//                        if (!CollectionUtils.isEmpty(collect)) &#123;</span><br><span class="line">//                            OrderDetailApi orderDetailApi = collect.get(0);</span><br><span class="line">//                            int sum = collect.stream().mapToInt(OrderDetailApi::getPoQty).sum();</span><br><span class="line">//                            orderDetailApi.setPoQty(sum);</span><br><span class="line">//                            orderDetailApiList.add(orderDetailApi);</span><br><span class="line">//                        &#125;</span><br><span class="line">//                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                orderApiList.add(orderApi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!CollectionUtils.isEmpty(orderApiList)) &#123;</span><br><span class="line">                orderApiMapper.insertBatch(orderApiList);</span><br><span class="line">            &#125;</span><br><span class="line">            if (!CollectionUtils.isEmpty(orderDetailApiList)) &#123;</span><br><span class="line">                orderDetailApiMapper.insertBatch(orderDetailApiList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            exception.getMessage();</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            System.out.println(exception.getMessage());</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            return ResultData.fail(&quot;获取异常&quot; + exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;api获取数据成功总共&quot; + orderApiList.size() + &quot;个订单&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 确定接受订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/acknowledge&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData acknowledge(OrderApi orderApi) throws URISyntaxException &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">//        String usaAccessToken = getUSAAccessToken(clientId, clientSecret, accountName, tokenUrl);</span><br><span class="line">        String usaAccessToken = getUSAAccessToken(sandboxClientId, sandboxClientSecret, accountName, sandboxTokenUrl);</span><br><span class="line">        //设置请求头</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;WM_SEC.ACCESS_TOKEN&quot;, usaAccessToken);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        headers.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">//        设置参数</span><br><span class="line">        String purchaseOrderId = orderApi.getPo();</span><br><span class="line">        if (null == purchaseOrderId || StringUtils.isBlank(purchaseOrderId)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请传入订单号&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;OrderApi&gt; orders = orderApiMapper.query(orderApi);</span><br><span class="line">        if (orders.size() &gt; 1) &#123;</span><br><span class="line">            return ResultData.fail(&quot;抓取API的订单&quot; + purchaseOrderId + &quot;出现重复,请仔细核对&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (CollectionUtils.isEmpty(orders)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;系统没有查到有关于这个&quot; + purchaseOrderId + &quot;的信息&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        OrderApi orderApi1 = orders.get(0);</span><br><span class="line">        OrderDetailApi detailApi = new OrderDetailApi();</span><br><span class="line">        detailApi.setPo(purchaseOrderId);</span><br><span class="line">        List&lt;OrderDetailApi&gt; orderDetailApiList = orderDetailApiMapper.query(detailApi);</span><br><span class="line">        if (CollectionUtils.isEmpty(orderDetailApiList)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;系统没有查到有关于这个&quot; + purchaseOrderId + &quot;的明细信息&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String status = orderApi1.getStatus();</span><br><span class="line">        String url = &quot;https://sandbox.walmartapis.com/v3/orders/&quot; + purchaseOrderId + &quot;/acknowledge&quot;;</span><br><span class="line">//        String url = &quot;https://walmartapis.com/v3/orders/&quot; + purchaseOrderId + &quot;/acknowledge&quot;;</span><br><span class="line">        if (status.equals(&quot;Created&quot;)) &#123;</span><br><span class="line">            HashMap&lt;String, Object&gt; objectObjectHashMap = new HashMap&lt;&gt;();</span><br><span class="line">            String response = HttpUtil.sendHttp(HttpRequestMethedEnum.HttpPost, url, objectObjectHashMap, headers);</span><br><span class="line">            JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">            if (null != resultObject) &#123;</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; order = (List&lt;Map&lt;String, Object&gt;&gt;) resultObject.get(&quot;order&quot;);</span><br><span class="line">                if (order.size() == 0) &#123;</span><br><span class="line">                    return ResultData.fail(purchaseOrderId + &quot;接单失败&quot; + &quot;返回错误结果&quot; + response);</span><br><span class="line">                &#125;</span><br><span class="line">                Map&lt;String, Object&gt; map = order.get(0);</span><br><span class="line">                String apiReturnPurchaseOrderId = (String) map.get(&quot;purchaseOrderId&quot;);</span><br><span class="line">                if (purchaseOrderId.equals(apiReturnPurchaseOrderId)) &#123;</span><br><span class="line">                    Date date = new Date();</span><br><span class="line">                    String userCode = UserUtils.getUserCode();</span><br><span class="line">//        OrderApi orderApi2 = new OrderApi();</span><br><span class="line">                    orderApi1.setStatus(&quot;Acknowledged&quot;);</span><br><span class="line">                    orderApi1.setUpdateTime(date);</span><br><span class="line">                    orderApi1.setUpdateUser(userCode);</span><br><span class="line">                    orderApi1.setIsOperation(&quot;1&quot;);</span><br><span class="line">                    OrderDetailApi orderDetailApi = new OrderDetailApi();</span><br><span class="line">                    orderDetailApi.setPo(purchaseOrderId);</span><br><span class="line">                    orderDetailApi.setStatus(&quot;Acknowledged&quot;);</span><br><span class="line">                    orderDetailApi.setUpdateTime(date);</span><br><span class="line">                    orderDetailApi.setUpdateUser(userCode);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        orderApiMapper.update(orderApi1);</span><br><span class="line">                        orderDetailApiMapper.update(orderDetailApi);</span><br><span class="line">                        List&lt;OutboundMaster&gt; outboundMasters = new ArrayList&lt;&gt;();</span><br><span class="line">                        List&lt;OutboundDetail&gt; outboundDetails = new ArrayList&lt;&gt;();</span><br><span class="line">                        int i = 0;</span><br><span class="line">                        for (OrderDetailApi detail : orderDetailApiList) &#123;</span><br><span class="line">                            i = i + 1;</span><br><span class="line">                            OutboundMaster outboundMaster1 = new OutboundMaster();</span><br><span class="line">                            ResultData&lt;String&gt; orderData = basOrderGenerationRuleService.orderGeneration(&quot;out_warehousing_order&quot;, UserUtils.getUserCode());</span><br><span class="line">                            if (orderData.getCode() != 200) return orderData;</span><br><span class="line">                            String orderNum = orderData.getData();</span><br><span class="line">                            outboundMaster1.setOrder(orderNum);</span><br><span class="line">                            outboundMaster1.setPo(purchaseOrderId + &quot;-&quot; + i);</span><br><span class="line">                            outboundMaster1.setOrderType(&quot;API&quot;);</span><br><span class="line">                            outboundMaster1.setPoDate(orderApi1.getPoDate());</span><br><span class="line">                            outboundMaster1.setPlatform(orderApi1.getPlatform());</span><br><span class="line">                            outboundMaster1.setMustShipBy(orderApi1.getMustShipBy());</span><br><span class="line">                            outboundMaster1.setStatus(&quot;0&quot;);</span><br><span class="line">                            outboundMaster1.setShipMethod(orderApi1.getShipMethod());</span><br><span class="line">                            outboundMaster1.setCarrierName(orderApi1.getCarrierName());</span><br><span class="line">                            outboundMaster1.setShippingAccountNumber(orderApi1.getShippingAccountNumber());</span><br><span class="line">                            outboundMaster1.setShipToName(orderApi1.getShipToName());</span><br><span class="line">                            outboundMaster1.setShipToAddressOne(orderApi1.getShipToAddressOne());</span><br><span class="line">                            outboundMaster1.setShipToAddressTwo(orderApi1.getShipToAddressTwo());</span><br><span class="line">                            outboundMaster1.setShipToAddressThree(orderApi1.getShipToAddressThree());</span><br><span class="line">                            outboundMaster1.setShipToCity(orderApi1.getShipToCity());</span><br><span class="line">                            outboundMaster1.setShipToZip(orderApi1.getShipToZip());</span><br><span class="line">                            outboundMaster1.setShipToPhone(orderApi1.getShipToPhone());</span><br><span class="line">                            outboundMaster1.setShipToCountry(orderApi1.getShipToCountry());</span><br><span class="line">                            outboundMaster1.setShipToState(orderApi1.getShipToState());</span><br><span class="line">                            outboundMaster1.setTrackingNumber(orderApi1.getTrackingNumber());</span><br><span class="line">                            outboundMaster1.setRemark(orderApi1.getRemark());</span><br><span class="line">                            outboundMaster1.setCreateTime(date);</span><br><span class="line">                            outboundMaster1.setCreateUser(userCode);</span><br><span class="line">                            outboundMaster1.setIsHistory(&quot;0&quot;);</span><br><span class="line">                            outboundMaster1.setAuditBatch(1);</span><br><span class="line">                            OutboundDetail outboundDetail = new OutboundDetail();</span><br><span class="line">                            outboundDetail.setOrder(orderNum);</span><br><span class="line">                            outboundDetail.setSku(detail.getSku());</span><br><span class="line">                            outboundDetail.setPrice(detail.getPrice());</span><br><span class="line">                            outboundDetail.setWarehouse(&quot;WH231215001&quot;);</span><br><span class="line">                            outboundDetail.setOutQty(0);</span><br><span class="line">                            outboundDetail.setDifferenceQty(0);</span><br><span class="line">                            outboundDetail.setPoQty(1);</span><br><span class="line">                            outboundDetail.setVendor(detail.getVendor());</span><br><span class="line">                            outboundDetail.setRemark(detail.getRemark());</span><br><span class="line">                            outboundDetail.setCreateUser(userCode);</span><br><span class="line">                            outboundDetail.setCreateTime(date);</span><br><span class="line">                            outboundDetail.setIsHistory(&quot;0&quot;);</span><br><span class="line">                            outboundMasters.add(outboundMaster1);</span><br><span class="line">                            outboundDetails.add(outboundDetail);</span><br><span class="line">                            List&lt;OutboundDetail&gt; outboundDetailList = new ArrayList&lt;&gt;();</span><br><span class="line">                            outboundDetailList.add(outboundDetail);</span><br><span class="line">                            outboundMaster1.setDetailList(outboundDetailList);</span><br><span class="line">                            ResultData order1 = eagleApi.createWalmartOrder(outboundMaster1);</span><br><span class="line">                            if (order1.getCode() != 200) &#123;</span><br><span class="line">                                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">                                return ResultData.fail(&quot;将数据回写到鹰仓时出现了异常&quot; + order1.getData());</span><br><span class="line">                            &#125;</span><br><span class="line">                            System.out.println(order1);</span><br><span class="line">                        &#125;</span><br><span class="line">                        outboundMasterMapper.insertBatch(outboundMasters);</span><br><span class="line">                        outboundDetailMapper.insertBatch(outboundDetails);</span><br><span class="line">                    &#125; catch (Exception exception) &#123;</span><br><span class="line">                        exception.getStackTrace();</span><br><span class="line">                        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">                        return ResultData.fail(&quot;接单成功，但是数据在转成销售出库单的时候出现了异常，请联系管理员&quot; + exception.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return ResultData.fail(&quot;接单的订单号&quot; + purchaseOrderId + &quot;跟接单请求返回的订单号&quot; + apiReturnPurchaseOrderId + &quot;不一样&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return ResultData.fail(purchaseOrderId + &quot;接单请求返回数据为空&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (status.equals(&quot;Cancelled&quot;)) &#123;</span><br><span class="line">                return ResultData.fail(purchaseOrderId + &quot;订单已被取消&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (status.equals(&quot;Acknowledged&quot;)) &#123;</span><br><span class="line">                return ResultData.fail(purchaseOrderId + &quot;订单已经接单，无需重复接单&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(purchaseOrderId + &quot;接单成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 取消订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/cancel&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData cancel(OrderApi orderApi) throws URISyntaxException &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">//        String usaAccessToken = getUSAAccessToken(clientId, clientSecret, accountName, tokenUrl);</span><br><span class="line">        String usaAccessToken = getUSAAccessToken(sandboxClientId, sandboxClientSecret, accountName, sandboxTokenUrl);</span><br><span class="line">        //设置请求头</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;WM_SEC.ACCESS_TOKEN&quot;, usaAccessToken);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        headers.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">//        设置参数</span><br><span class="line">        String purchaseOrderId = orderApi.getPo();</span><br><span class="line">        if (null == purchaseOrderId || StringUtils.isBlank(purchaseOrderId)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请传入订单号&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String detailStr = orderApi.getDetailStr();</span><br><span class="line">//        List&lt;OrderDetailApi&gt; detail = JSONArray.parseArray(detailStr, OrderDetailApi.class);</span><br><span class="line">//        if (CollectionUtils.isEmpty(detail)) &#123;</span><br><span class="line">//            return ResultData.fail(&quot;请传入要取消的要取消的明细数据&quot;);</span><br><span class="line">//        &#125;</span><br><span class="line">        List&lt;OrderApi&gt; orders = orderApiMapper.query(orderApi);</span><br><span class="line">        if (orders.size() &gt; 1) &#123;</span><br><span class="line">            return ResultData.fail(&quot;抓取API的订单&quot; + purchaseOrderId + &quot;出现重复,请仔细核对&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (CollectionUtils.isEmpty(orders)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;系统没有查到有关于这个&quot; + purchaseOrderId + &quot;的信息&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        OrderDetailApi detailApi1 = new OrderDetailApi();</span><br><span class="line">        detailApi1.setPo(purchaseOrderId);</span><br><span class="line">        List&lt;OrderDetailApi&gt; detailApiList = orderDetailApiMapper.query(detailApi1);</span><br><span class="line">        if (CollectionUtils.isEmpty(detailApiList)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;请传入要取消的要取消的明细数据&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        OrderApi orderApi1 = orders.get(0);</span><br><span class="line">        String status = orderApi1.getStatus();</span><br><span class="line">        String url = &quot;https://sandbox.walmartapis.com/v3/orders/&quot; + purchaseOrderId + &quot;/cancel&quot;;</span><br><span class="line">//        String url = &quot;https://walmartapis.com/v3/orders/&quot; + purchaseOrderId + &quot;/cancel&quot;;</span><br><span class="line">        if (status.equals(&quot;Created&quot;)) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; objectObjectHashMap = new HashMap&lt;&gt;();</span><br><span class="line">            Map&lt;String, Object&gt; orderCancellation = new HashMap&lt;&gt;();</span><br><span class="line">            Map&lt;String, Object&gt; orderLines = new HashMap&lt;&gt;();</span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; orderLine = new ArrayList&lt;&gt;();</span><br><span class="line">            for (OrderDetailApi detailApi : detailApiList) &#123;</span><br><span class="line">                detailApi.setCancellationReason(&quot;SELLER_CANCEL_OUT_OF_STOCK&quot;);</span><br><span class="line">                Map&lt;String, Object&gt; orderLineItem = new HashMap&lt;&gt;();</span><br><span class="line">                orderLineItem.put(&quot;lineNumber&quot;, detailApi.getRowNum());</span><br><span class="line">                Map&lt;String, Object&gt; orderLineStatuses = new HashMap&lt;&gt;();</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; orderLineStatus = new ArrayList&lt;&gt;();</span><br><span class="line">                Map&lt;String, Object&gt; orderLineStatusItem = new HashMap&lt;&gt;();</span><br><span class="line">                Map&lt;String, Object&gt; statusQuantity = new HashMap&lt;&gt;();</span><br><span class="line">                statusQuantity.put(&quot;unitOfMeasurement&quot;, &quot;EA&quot;);</span><br><span class="line">                statusQuantity.put(&quot;amount&quot;, detailApi.getPoQty().toString());</span><br><span class="line">                orderLineStatusItem.put(&quot;status&quot;, &quot;Cancelled&quot;);</span><br><span class="line">                //取消订单的原因</span><br><span class="line">                orderLineStatusItem.put(&quot;cancellationReason&quot;, detailApi.getCancellationReason());</span><br><span class="line">                orderLineStatusItem.put(&quot;statusQuantity&quot;, statusQuantity);</span><br><span class="line">                orderLineStatus.add(orderLineStatusItem);</span><br><span class="line">                orderLineStatuses.put(&quot;orderLineStatus&quot;, orderLineStatus);</span><br><span class="line">                orderLineItem.put(&quot;orderLineStatuses&quot;, orderLineStatuses);</span><br><span class="line">                orderLine.add(orderLineItem);</span><br><span class="line">            &#125;</span><br><span class="line">            orderLines.put(&quot;orderLine&quot;, orderLine);</span><br><span class="line">            orderCancellation.put(&quot;orderLines&quot;, orderLines);</span><br><span class="line">            objectObjectHashMap.put(&quot;orderCancellation&quot;, orderCancellation);</span><br><span class="line">            String response = HttpUtil.sendHttp(HttpRequestMethedEnum.HttpPost, url, objectObjectHashMap, headers);</span><br><span class="line">            JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">            if (null != resultObject) &#123;</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; order = (List&lt;Map&lt;String, Object&gt;&gt;) resultObject.get(&quot;order&quot;);</span><br><span class="line">                if (CollectionUtils.isEmpty(order)) &#123;</span><br><span class="line">                    return ResultData.fail(purchaseOrderId + &quot;拒单失败&quot; + &quot;返回错误结果&quot; + response);</span><br><span class="line">                &#125;</span><br><span class="line">                Map&lt;String, Object&gt; map = order.get(0);</span><br><span class="line">                String apiReturnPurchaseOrderId = (String) map.get(&quot;purchaseOrderId&quot;);</span><br><span class="line">                if (purchaseOrderId.equals(apiReturnPurchaseOrderId)) &#123;</span><br><span class="line">                    Date date = new Date();</span><br><span class="line">                    String userCode = UserUtils.getUserCode();</span><br><span class="line">//                    OrderApi orderApi2 = new OrderApi();</span><br><span class="line">                    try &#123;</span><br><span class="line">                        orderApi1.setStatus(&quot;Cancelled&quot;);</span><br><span class="line">                        orderApi1.setUpdateTime(date);</span><br><span class="line">                        orderApi1.setUpdateUser(userCode);</span><br><span class="line">                        orderApi1.setIsOperation(&quot;1&quot;);</span><br><span class="line">                        OrderDetailApi orderDetailApi = new OrderDetailApi();</span><br><span class="line">                        orderDetailApi.setPo(purchaseOrderId);</span><br><span class="line">                        orderDetailApi.setStatus(&quot;Cancelled&quot;);</span><br><span class="line">                        orderDetailApi.setUpdateTime(date);</span><br><span class="line">                        orderDetailApi.setUpdateUser(userCode);</span><br><span class="line">                        orderApiMapper.update(orderApi1);</span><br><span class="line">                        orderDetailApiMapper.update(orderDetailApi);</span><br><span class="line">                    &#125; catch (Exception exception) &#123;</span><br><span class="line">                        exception.getStackTrace();</span><br><span class="line">                        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">                        return ResultData.fail(&quot;拒单成功，但是数据在转成销售出库单的时候出现了异常，请联系管理员&quot; + exception.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return ResultData.fail(&quot;接单的订单号&quot; + purchaseOrderId + &quot;跟接单请求返回的订单号&quot; + apiReturnPurchaseOrderId + &quot;不一样&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return ResultData.fail(purchaseOrderId + &quot;接单请求返回数据为空&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (status.equals(&quot;Acknowledged&quot;)) &#123;</span><br><span class="line">                return ResultData.fail(purchaseOrderId + &quot;订单已接单了,无法进行取消&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (status.equals(&quot;Cancelled&quot;)) &#123;</span><br><span class="line">                return ResultData.fail(purchaseOrderId + &quot;订单已取消，无需重复取消&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(purchaseOrderId + &quot;取消订单成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取全部退货单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getReturnAll&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData getReturnAll() throws URISyntaxException, ParseException &#123;</span><br><span class="line">//获取授权token</span><br><span class="line">        String usaAccessToken = getUSAAccessToken(clientId, clientSecret, accountName, tokenUrl);</span><br><span class="line">        //设置请求头</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;WM_SEC.ACCESS_TOKEN&quot;, usaAccessToken);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        headers.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">        ReturnApi returnApi1 = new ReturnApi();</span><br><span class="line">        returnApi1.setPlatform(&quot;Walmart&quot;);</span><br><span class="line">        List&lt;ReturnApi&gt; returnApis = returnApiMapper.query(returnApi1);</span><br><span class="line">//        获取数据库中沃尔玛平台的时间</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ssZ&quot;);</span><br><span class="line">        Date now = new Date();</span><br><span class="line">        //半年前</span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.setTime(new Date());</span><br><span class="line">        instance.add(Calendar.MONTH, -6);</span><br><span class="line">        Date time = instance.getTime();</span><br><span class="line">        String returnCreationStartDate = simpleDateFormat.format(time);</span><br><span class="line">        String returnCreationEndDate = simpleDateFormat.format(now);</span><br><span class="line">//        设置参数</span><br><span class="line">        HashMap&lt;String, Object&gt; objectObjectHashMap = new HashMap&lt;&gt;();</span><br><span class="line">        // objectObjectHashMap.put(&quot;status&quot;,&quot;Created&quot;);</span><br><span class="line">        objectObjectHashMap.put(&quot;returnCreationStartDate&quot;, returnCreationStartDate);</span><br><span class="line">        objectObjectHashMap.put(&quot;returnCreationEndDate&quot;, returnCreationEndDate);</span><br><span class="line">        objectObjectHashMap.put(&quot;limit&quot;, &quot;200&quot;);</span><br><span class="line">        String response = HttpUtil.sendHttp(HttpRequestMethedEnum.HttpGet, &quot;https://marketplace.walmartapis.com/v3/returns&quot;, objectObjectHashMap, headers);</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; returnOrders = (List&lt;Map&lt;String, Object&gt;&gt;) resultObject.get(&quot;returnOrders&quot;);</span><br><span class="line">        List&lt;ReturnApi&gt; returnApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;ReturnDetailApi&gt; returnDetailApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        if (!CollectionUtils.isEmpty(returnOrders)) &#123;</span><br><span class="line">            String userCode = UserUtils.getUserCode();</span><br><span class="line">            for (Map&lt;String, Object&gt; order : returnOrders) &#123;</span><br><span class="line">                ReturnApi returnApi = new ReturnApi();</span><br><span class="line">                //退货单号</span><br><span class="line">                String returnOrderId = (String) order.get(&quot;returnOrderId&quot;);</span><br><span class="line">                Optional&lt;ReturnApi&gt; first1 = returnApis.stream().filter(he -&gt; he.getReturnNum().equals(returnOrderId)).findFirst();</span><br><span class="line">                if (first1.isPresent()) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //客户邮箱地址</span><br><span class="line">                String customerEmailId = (String) order.get(&quot;customerEmailId&quot;);</span><br><span class="line">                //客户信息</span><br><span class="line">                Map customerName = (Map) order.get(&quot;customerName&quot;);</span><br><span class="line">                String firstName = (String) customerName.get(&quot;firstName&quot;);</span><br><span class="line">                String lastName = (String) customerName.get(&quot;lastName&quot;);</span><br><span class="line">                //客户订单号</span><br><span class="line">                String customerOrderId = (String) order.get(&quot;customerOrderId&quot;);</span><br><span class="line">                //退货时间</span><br><span class="line">                String orderDateStr = (String) order.get(&quot;returnOrderDate&quot;);</span><br><span class="line">                SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS Z&quot;);</span><br><span class="line">                orderDateStr = orderDateStr.replace(&quot;Z&quot;, &quot; UTC&quot;);</span><br><span class="line">                Date orderDate = format.parse(orderDateStr);</span><br><span class="line">                String returnByDateStr = (String) order.get(&quot;returnByDate&quot;);</span><br><span class="line">                returnByDateStr = returnByDateStr.replace(&quot;Z&quot;, &quot; UTC&quot;);</span><br><span class="line">                Date returnByDate = format.parse(returnByDateStr);</span><br><span class="line">                returnApi.setReturnNum(returnOrderId);</span><br><span class="line">                returnApi.setIssueDate(orderDate);</span><br><span class="line">                returnApi.setReturnConfirmationTime(returnByDate);</span><br><span class="line">                List&lt;Map&lt;String, String&gt;&gt; tackInfos = new ArrayList&lt;&gt;();</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; returnLineGroups = (List&lt;Map&lt;String, Object&gt;&gt;) order.get(&quot;returnLineGroups&quot;);</span><br><span class="line">                if (!CollectionUtils.isEmpty(returnLineGroups)) &#123;</span><br><span class="line">                    Map&lt;String, String&gt; tack = new HashMap&lt;&gt;();</span><br><span class="line">                    for (Map&lt;String, Object&gt; returnLineGroup : returnLineGroups) &#123;</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; returnLines = (List&lt;Map&lt;String, Object&gt;&gt;) returnLineGroup.get(&quot;returnLines&quot;);</span><br><span class="line">                        if (!CollectionUtils.isEmpty(returnLines)) &#123;</span><br><span class="line">                            Map&lt;String, Object&gt; map = returnLines.get(0);</span><br><span class="line">                            Integer returnOrderLineNumber = (Integer) map.get(&quot;returnOrderLineNumber&quot;);</span><br><span class="line">                            tack.put(&quot;returnOrderLineNumber&quot;, returnOrderLineNumber.toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; labels = (List&lt;Map&lt;String, Object&gt;&gt;) returnLineGroup.get(&quot;labels&quot;);</span><br><span class="line">                        if (!CollectionUtils.isEmpty(labels)) &#123;</span><br><span class="line">                            Map&lt;String, Object&gt; map = labels.get(0);</span><br><span class="line">                            List&lt;Map&lt;String, Object&gt;&gt; carrierInfoList = (List&lt;Map&lt;String, Object&gt;&gt;) map.get(&quot;carrierInfoList&quot;);</span><br><span class="line">                            if (!CollectionUtils.isEmpty(carrierInfoList)) &#123;</span><br><span class="line">                                Map&lt;String, Object&gt; carrierInfo = carrierInfoList.get(0);</span><br><span class="line">                                String carrierName = (String) carrierInfo.get(&quot;carrierName&quot;);</span><br><span class="line">                                String trackingNo = (String) carrierInfo.get(&quot;trackingNo&quot;);</span><br><span class="line">                                tack.put(&quot;carrierName&quot;, carrierName);</span><br><span class="line">                                tack.put(&quot;trackingNo&quot;, trackingNo);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    tackInfos.add(tack);</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; returnOrderLines = (List&lt;Map&lt;String, Object&gt;&gt;) order.get(&quot;returnOrderLines&quot;);</span><br><span class="line">                if (!CollectionUtils.isEmpty(returnOrderLines)) &#123;</span><br><span class="line">                    for (Map&lt;String, Object&gt; returnOrderLine : returnOrderLines) &#123;</span><br><span class="line">                        //退料行号</span><br><span class="line">                        Integer returnOrderLineNumber = (Integer) returnOrderLine.get(&quot;returnOrderLineNumber&quot;);</span><br><span class="line">                        //采购单号行号</span><br><span class="line">                        Integer rowNum = (Integer) returnOrderLine.get(&quot;purchaseOrderLineNumber&quot;);</span><br><span class="line">                        //采购单号</span><br><span class="line">                        String purchaseOrderId = (String) returnOrderLine.get(&quot;purchaseOrderId&quot;);</span><br><span class="line">                        //退货原因</span><br><span class="line">                        String returnReason = (String) returnOrderLine.get(&quot;returnReason&quot;);</span><br><span class="line">                        Map item = (Map) returnOrderLine.get(&quot;item&quot;);</span><br><span class="line">                        //sku</span><br><span class="line">                        String sku = (String) item.get(&quot;sku&quot;);</span><br><span class="line">                        Map unitPrice = (Map) returnOrderLine.get(&quot;unitPrice&quot;);</span><br><span class="line">                        //价格</span><br><span class="line">                        BigDecimal currencyAmount = (BigDecimal) unitPrice.get(&quot;currencyAmount&quot;);</span><br><span class="line">                        double price = currencyAmount.doubleValue();</span><br><span class="line">                        Map quantity = (Map) returnOrderLine.get(&quot;quantity&quot;);</span><br><span class="line">                        BigDecimal measurementValue = (BigDecimal) quantity.get(&quot;measurementValue&quot;);</span><br><span class="line">                        //数量</span><br><span class="line">                        int qty = measurementValue.intValue();</span><br><span class="line">                        //状态</span><br><span class="line">                        String status = (String) returnOrderLine.get(&quot;status&quot;);</span><br><span class="line">                        ReturnDetailApi returnDetailApi = new ReturnDetailApi();</span><br><span class="line">                        returnDetailApi.setReturnNum(returnOrderId);</span><br><span class="line">                        returnDetailApi.setSku(sku);</span><br><span class="line">                        returnDetailApi.setStatus(status);</span><br><span class="line">                        returnDetailApi.setQty(qty);</span><br><span class="line">                        returnDetailApi.setReturnReason(returnReason);</span><br><span class="line">                        returnDetailApi.setRowNum(returnOrderLineNumber.toString());</span><br><span class="line">                        Optional&lt;Map&lt;String, String&gt;&gt; first = tackInfos.stream().filter(he -&gt; he.get(&quot;returnOrderLineNumber&quot;).equals(returnOrderLineNumber.toString())).findFirst();</span><br><span class="line">                        if (first.isPresent()) &#123;</span><br><span class="line">                            Map&lt;String, String&gt; track = first.get();</span><br><span class="line">                            String carrierName = track.get(&quot;carrierName&quot;);</span><br><span class="line">                            String trackingNo = track.get(&quot;trackingNo&quot;);</span><br><span class="line">                            returnDetailApi.setCarrier(carrierName);</span><br><span class="line">                            returnDetailApi.setTrackingNum(trackingNo);</span><br><span class="line">                        &#125;</span><br><span class="line">                        returnDetailApi.setCreateTime(now);</span><br><span class="line">                        returnDetailApi.setCreateUser(userCode);</span><br><span class="line">                        returnDetailApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                        returnDetailApiList.add(returnDetailApi);</span><br><span class="line">                        returnApi.setPo(purchaseOrderId);</span><br><span class="line">                        returnApi.setStatus(status);</span><br><span class="line">                        returnApi.setReturnReason(returnReason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                returnApi.setPlatform(&quot;Walmart&quot;);</span><br><span class="line">                returnApi.setCreateTime(now);</span><br><span class="line">                returnApi.setCreateUser(userCode);</span><br><span class="line">                returnApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                returnApi.setIsOperation(&quot;0&quot;);</span><br><span class="line">                returnApiList.add(returnApi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!CollectionUtils.isEmpty(returnApiList)) &#123;</span><br><span class="line">                returnApiMapper.insertBatch(returnApiList);</span><br><span class="line">            &#125;</span><br><span class="line">            if (!CollectionUtils.isEmpty(returnDetailApiList)) &#123;</span><br><span class="line">                returnDetailApiMapper.insertBatch(returnDetailApiList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            exception.getMessage();</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            System.out.println(exception.getMessage());</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            return ResultData.fail(&quot;获取异常&quot; + exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;api获取数据成功总共&quot; + returnApiList.size() + &quot;个订单&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取同步退货单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getReturnNew&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData getReturnNew() throws URISyntaxException, ParseException &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String usaAccessToken = getUSAAccessToken(clientId, clientSecret, accountName, tokenUrl);</span><br><span class="line">        //设置请求头</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;WM_SEC.ACCESS_TOKEN&quot;, usaAccessToken);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        headers.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">        ReturnApi returnApi1 = new ReturnApi();</span><br><span class="line">        returnApi1.setPlatform(&quot;Walmart&quot;);</span><br><span class="line">        List&lt;ReturnApi&gt; returnApis = returnApiMapper.query(returnApi1);</span><br><span class="line">        Date date = returnApiMapper.orderMaxDate(returnApi1);</span><br><span class="line">        //        设置参数</span><br><span class="line">        HashMap&lt;String, Object&gt; objectObjectHashMap = new HashMap&lt;&gt;();</span><br><span class="line">//        获取数据库中沃尔玛平台的时间</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ssZ&quot;);</span><br><span class="line">        Date now = new Date();</span><br><span class="line">        if (null != date) &#123;</span><br><span class="line">            String returnCreationStartDate = simpleDateFormat.format(date);</span><br><span class="line">            String returnCreationEndDate = simpleDateFormat.format(now);</span><br><span class="line">            objectObjectHashMap.put(&quot;returnCreationStartDate&quot;, returnCreationStartDate);</span><br><span class="line">            objectObjectHashMap.put(&quot;returnCreationEndDate&quot;, returnCreationEndDate);</span><br><span class="line">        &#125;</span><br><span class="line">        //status INITIATED, DELIVERED, COMPLETED</span><br><span class="line">        // objectObjectHashMap.put(&quot;status&quot;,&quot;INITIATED&quot;);</span><br><span class="line">        objectObjectHashMap.put(&quot;limit&quot;, &quot;200&quot;);</span><br><span class="line">        String response = HttpUtil.sendHttp(HttpRequestMethedEnum.HttpGet, &quot;https://marketplace.walmartapis.com/v3/returns&quot;, objectObjectHashMap, headers);</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; returnOrders = (List&lt;Map&lt;String, Object&gt;&gt;) resultObject.get(&quot;returnOrders&quot;);</span><br><span class="line">        List&lt;ReturnApi&gt; returnApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;ReturnDetailApi&gt; returnDetailApiList = new ArrayList&lt;&gt;();</span><br><span class="line">        if (!CollectionUtils.isEmpty(returnOrders)) &#123;</span><br><span class="line">            String userCode = UserUtils.getUserCode();</span><br><span class="line">            for (Map&lt;String, Object&gt; order : returnOrders) &#123;</span><br><span class="line">                ReturnApi returnApi = new ReturnApi();</span><br><span class="line">                //退货单号</span><br><span class="line">                String returnOrderId = (String) order.get(&quot;returnOrderId&quot;);</span><br><span class="line">                Optional&lt;ReturnApi&gt; first1 = returnApis.stream().filter(he -&gt; he.getReturnNum().equals(returnOrderId)).findFirst();</span><br><span class="line">                if (first1.isPresent()) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //客户邮箱地址</span><br><span class="line">                String customerEmailId = (String) order.get(&quot;customerEmailId&quot;);</span><br><span class="line">                //客户信息</span><br><span class="line">                Map customerName = (Map) order.get(&quot;customerName&quot;);</span><br><span class="line">                String firstName = (String) customerName.get(&quot;firstName&quot;);</span><br><span class="line">                String lastName = (String) customerName.get(&quot;lastName&quot;);</span><br><span class="line">                //客户订单号</span><br><span class="line">                String customerOrderId = (String) order.get(&quot;customerOrderId&quot;);</span><br><span class="line">                //退货时间</span><br><span class="line">                String orderDateStr = (String) order.get(&quot;returnOrderDate&quot;);</span><br><span class="line">                SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS Z&quot;);</span><br><span class="line">                orderDateStr = orderDateStr.replace(&quot;Z&quot;, &quot; UTC&quot;);</span><br><span class="line">                Date orderDate = format.parse(orderDateStr);</span><br><span class="line">                String returnByDateStr = (String) order.get(&quot;returnByDate&quot;);</span><br><span class="line">                returnByDateStr = returnByDateStr.replace(&quot;Z&quot;, &quot; UTC&quot;);</span><br><span class="line">                Date returnByDate = format.parse(returnByDateStr);</span><br><span class="line">                returnApi.setReturnNum(returnOrderId);</span><br><span class="line">                returnApi.setIssueDate(orderDate);</span><br><span class="line">                returnApi.setReturnConfirmationTime(returnByDate);</span><br><span class="line">                List&lt;Map&lt;String, String&gt;&gt; tackInfos = new ArrayList&lt;&gt;();</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; returnLineGroups = (List&lt;Map&lt;String, Object&gt;&gt;) order.get(&quot;returnLineGroups&quot;);</span><br><span class="line">                if (!CollectionUtils.isEmpty(returnLineGroups)) &#123;</span><br><span class="line">                    Map&lt;String, String&gt; tack = new HashMap&lt;&gt;();</span><br><span class="line">                    for (Map&lt;String, Object&gt; returnLineGroup : returnLineGroups) &#123;</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; returnLines = (List&lt;Map&lt;String, Object&gt;&gt;) returnLineGroup.get(&quot;returnLines&quot;);</span><br><span class="line">                        if (!CollectionUtils.isEmpty(returnLines)) &#123;</span><br><span class="line">                            Map&lt;String, Object&gt; map = returnLines.get(0);</span><br><span class="line">                            Integer returnOrderLineNumber = (Integer) map.get(&quot;returnOrderLineNumber&quot;);</span><br><span class="line">                            tack.put(&quot;returnOrderLineNumber&quot;, returnOrderLineNumber.toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; labels = (List&lt;Map&lt;String, Object&gt;&gt;) returnLineGroup.get(&quot;labels&quot;);</span><br><span class="line">                        if (!CollectionUtils.isEmpty(labels)) &#123;</span><br><span class="line">                            Map&lt;String, Object&gt; map = labels.get(0);</span><br><span class="line">                            List&lt;Map&lt;String, Object&gt;&gt; carrierInfoList = (List&lt;Map&lt;String, Object&gt;&gt;) map.get(&quot;carrierInfoList&quot;);</span><br><span class="line">                            if (!CollectionUtils.isEmpty(carrierInfoList)) &#123;</span><br><span class="line">                                Map&lt;String, Object&gt; carrierInfo = carrierInfoList.get(0);</span><br><span class="line">                                String carrierName = (String) carrierInfo.get(&quot;carrierName&quot;);</span><br><span class="line">                                String trackingNo = (String) carrierInfo.get(&quot;trackingNo&quot;);</span><br><span class="line">                                tack.put(&quot;carrierName&quot;, carrierName);</span><br><span class="line">                                tack.put(&quot;trackingNo&quot;, trackingNo);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    tackInfos.add(tack);</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;Map&lt;String, Object&gt;&gt; returnOrderLines = (List&lt;Map&lt;String, Object&gt;&gt;) order.get(&quot;returnOrderLines&quot;);</span><br><span class="line">                if (!CollectionUtils.isEmpty(returnOrderLines)) &#123;</span><br><span class="line">                    for (Map&lt;String, Object&gt; returnOrderLine : returnOrderLines) &#123;</span><br><span class="line">                        //退料行号</span><br><span class="line">                        Integer returnOrderLineNumber = (Integer) returnOrderLine.get(&quot;returnOrderLineNumber&quot;);</span><br><span class="line">                        //采购单号行号</span><br><span class="line">                        Integer rowNum = (Integer) returnOrderLine.get(&quot;purchaseOrderLineNumber&quot;);</span><br><span class="line">                        //采购单号</span><br><span class="line">                        String purchaseOrderId = (String) returnOrderLine.get(&quot;purchaseOrderId&quot;);</span><br><span class="line">                        //退货原因</span><br><span class="line">                        String returnReason = (String) returnOrderLine.get(&quot;returnReason&quot;);</span><br><span class="line">                        Map item = (Map) returnOrderLine.get(&quot;item&quot;);</span><br><span class="line">                        //sku</span><br><span class="line">                        String sku = (String) item.get(&quot;sku&quot;);</span><br><span class="line">                        Map unitPrice = (Map) returnOrderLine.get(&quot;unitPrice&quot;);</span><br><span class="line">                        //价格</span><br><span class="line">                        BigDecimal currencyAmount = (BigDecimal) unitPrice.get(&quot;currencyAmount&quot;);</span><br><span class="line">                        double price = currencyAmount.doubleValue();</span><br><span class="line">                        Map quantity = (Map) returnOrderLine.get(&quot;quantity&quot;);</span><br><span class="line">                        BigDecimal measurementValue = (BigDecimal) quantity.get(&quot;measurementValue&quot;);</span><br><span class="line">                        //数量</span><br><span class="line">                        int qty = measurementValue.intValue();</span><br><span class="line">                        //状态</span><br><span class="line">                        String status = (String) returnOrderLine.get(&quot;status&quot;);</span><br><span class="line">                        ReturnDetailApi returnDetailApi = new ReturnDetailApi();</span><br><span class="line">                        returnDetailApi.setReturnNum(returnOrderId);</span><br><span class="line">                        returnDetailApi.setSku(sku);</span><br><span class="line">                        returnDetailApi.setStatus(status);</span><br><span class="line">                        returnDetailApi.setQty(qty);</span><br><span class="line">                        returnDetailApi.setReturnReason(returnReason);</span><br><span class="line">                        returnDetailApi.setRowNum(returnOrderLineNumber.toString());</span><br><span class="line">                        Optional&lt;Map&lt;String, String&gt;&gt; first = tackInfos.stream().filter(he -&gt; he.get(&quot;returnOrderLineNumber&quot;).equals(returnOrderLineNumber.toString())).findFirst();</span><br><span class="line">                        if (first.isPresent()) &#123;</span><br><span class="line">                            Map&lt;String, String&gt; track = first.get();</span><br><span class="line">                            String carrierName = track.get(&quot;carrierName&quot;);</span><br><span class="line">                            String trackingNo = track.get(&quot;trackingNo&quot;);</span><br><span class="line">                            returnDetailApi.setCarrier(carrierName);</span><br><span class="line">                            returnDetailApi.setTrackingNum(trackingNo);</span><br><span class="line">                        &#125;</span><br><span class="line">                        returnDetailApi.setCreateTime(now);</span><br><span class="line">                        returnDetailApi.setCreateUser(userCode);</span><br><span class="line">                        returnDetailApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                        returnDetailApiList.add(returnDetailApi);</span><br><span class="line">                        returnApi.setPo(purchaseOrderId);</span><br><span class="line">                        returnApi.setStatus(status);</span><br><span class="line">                        returnApi.setReturnReason(returnReason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                returnApi.setPlatform(&quot;Walmart&quot;);</span><br><span class="line">                returnApi.setCreateTime(now);</span><br><span class="line">                returnApi.setCreateUser(userCode);</span><br><span class="line">                returnApi.setIsHistory(&quot;0&quot;);</span><br><span class="line">                returnApi.setIsOperation(&quot;0&quot;);</span><br><span class="line">                returnApiList.add(returnApi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!CollectionUtils.isEmpty(returnApiList)) &#123;</span><br><span class="line">                returnApiMapper.insertBatch(returnApiList);</span><br><span class="line">            &#125;</span><br><span class="line">            if (!CollectionUtils.isEmpty(returnDetailApiList)) &#123;</span><br><span class="line">                returnDetailApiMapper.insertBatch(returnDetailApiList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            exception.getMessage();</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            System.out.println(exception.getMessage());</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            return ResultData.fail(&quot;获取异常&quot; + exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;api获取数据成功总共&quot; + returnApiList.size() + &quot;个订单&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 库存同步</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/feeds&quot;)</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData feeds(MultipartFile file) throws URISyntaxException &#123;</span><br><span class="line">        //获取授权token</span><br><span class="line">        String usaAccessToken = getUSAAccessToken(clientId, clientSecret, accountName, tokenUrl);</span><br><span class="line">        //设置请求头</span><br><span class="line">        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();</span><br><span class="line">        headers.put(&quot;WM_SEC.ACCESS_TOKEN&quot;, usaAccessToken);</span><br><span class="line">        headers.put(&quot;WM_SVC.NAME&quot;, accountName);</span><br><span class="line">        headers.put(&quot;WM_QOS.CORRELATION_ID&quot;, UUID.randomUUID().toString());</span><br><span class="line">        headers.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">        //设置参数</span><br><span class="line">        HashMap&lt;String, Object&gt; objectObjectHashMap = new HashMap&lt;&gt;();</span><br><span class="line">        objectObjectHashMap.put(&quot;file&quot;, file);</span><br><span class="line">        String response = HttpUtil.sendHttp(HttpRequestMethedEnum.HttpPost, &quot;https://sandbox.walmartapis.com/v3/feeds?feedType=inventory&quot;, objectObjectHashMap, headers);</span><br><span class="line">        JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">        if (null == resultObject.get(&quot;feedId&quot;)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;批量更新库存出现异常&quot; + response);</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;库存批量更新成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对接鹰仓使用的Web Services  api.md</title>
      <link href="/2023/10/10/%E5%AF%B9%E6%8E%A5%E9%B9%B0%E4%BB%93%E4%BD%BF%E7%94%A8%E7%9A%84Web-Services-api-md/"/>
      <url>/2023/10/10/%E5%AF%B9%E6%8E%A5%E9%B9%B0%E4%BB%93%E4%BD%BF%E7%94%A8%E7%9A%84Web-Services-api-md/</url>
      
        <content type="html"><![CDATA[<h1 id="对接鹰仓使用的Web-Services-api"><a href="#对接鹰仓使用的Web-Services-api" class="headerlink" title="对接鹰仓使用的Web Services  api"></a>对接鹰仓使用的Web Services  api</h1><p>参考：</p><p><a href="https://blog.csdn.net/Tha_Real/article/details/106905537">HTTPClient作为客户端调用webservice推送soap_c# httpclient application&#x2F;soap+xml-CSDN博客</a></p><p><a href="https://www.cnblogs.com/loong-hon/p/10337316.html">Java发布webservice应用并发送SOAP请求调用 - 霞光里 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/JavaReact/article/details/106022975">Java调用WebService接口的四种方式-CSDN博客</a></p><p><a href="https://blog.csdn.net/my_futrue/article/details/132145231">Java 调用 WebService 、java调用Soap请求、Java对接soap接口_java soap-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_25073223/article/details/126192378">Java创建Document对象有哪些方法呢？_java document撖寡情-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_37701381/article/details/117788749">Java XML解析工具类-CSDN博客</a></p><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基本的 Web services 平台是 XML + HTTP。</span><br><span class="line"></span><br><span class="line">SOAP 指简易对象访问协议</span><br><span class="line">SOAP 是一种通信协议</span><br><span class="line">SOAP 用于应用程序之间的通信</span><br><span class="line">SOAP 是一种用于发送消息的格式</span><br><span class="line">SOAP 被设计用来通过因特网进行通信</span><br><span class="line">SOAP 独立于平台</span><br><span class="line">SOAP 独立于语言</span><br><span class="line">SOAP 基于 XML</span><br><span class="line">SOAP 很简单并可扩展</span><br><span class="line">SOAP 允许您绕过防火墙</span><br><span class="line">SOAP 将作为 W3C 标准来发展</span><br></pre></td></tr></table></figure><h3 id="客户端访问webservice"><a href="#客户端访问webservice" class="headerlink" title="客户端访问webservice"></a>客户端访问webservice</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /**</span><br><span class="line">     * HTTPClient 调用 WebService</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param soap</span><br><span class="line">     * @param SOAPAction</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String doPostSoap(String url, String soap, String SOAPAction) &#123;</span><br><span class="line">        //请求体</span><br><span class="line">        String retStr = &quot;&quot;;</span><br><span class="line">        // 创建HttpClientBuilder</span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();</span><br><span class="line">        // HttpClient</span><br><span class="line">        CloseableHttpClient closeableHttpClient = httpClientBuilder.build();</span><br><span class="line">        HttpPost httpPost = new HttpPost(url);</span><br><span class="line">        try &#123;</span><br><span class="line">            httpPost.setHeader(&quot;Content-Type&quot;, &quot;text/xml;charset=UTF-8&quot;);</span><br><span class="line">            //看情况可以为空，也可以不设置</span><br><span class="line">            // httpPost.setHeader(&quot;SOAPAction&quot;, SOAPAction);</span><br><span class="line">            StringEntity data = new StringEntity(soap, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">            httpPost.setEntity(data);</span><br><span class="line">            CloseableHttpResponse response = closeableHttpClient.execute(httpPost);</span><br><span class="line">            HttpEntity httpEntity = response.getEntity();</span><br><span class="line">            if (httpEntity != null) &#123;</span><br><span class="line">                // 打印响应内容</span><br><span class="line">                retStr = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            // 释放资源</span><br><span class="line">            closeableHttpClient.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //这里还是返回的是xml字符串</span><br><span class="line">        System.out.println(retStr);</span><br><span class="line">        //将返回的xml转换成Document</span><br><span class="line">        Document document = strXmlToDocument(retStr);</span><br><span class="line">        //在Document中找到我们要找到那个  &lt;response&gt;&lt;/response&gt;里面的数据</span><br><span class="line">        retStr = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">        //在将字符串json数据转成JsonObeject</span><br><span class="line">        System.out.println(retStr);</span><br><span class="line">        return retStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">     * 将返回的数据转换成Document</span><br><span class="line">     * @param parseStrXml</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Document strXmlToDocument(String parseStrXml) &#123;</span><br><span class="line">        StringReader read = new StringReader(parseStrXml);</span><br><span class="line">        //创建新的输入源SAX 解析器将使用 InputSource 对象来确定如何读取 XML 输入</span><br><span class="line">        InputSource source = new InputSource(read);</span><br><span class="line">        //创建一个新的SAXBuilder</span><br><span class="line">        // 新建立构造器</span><br><span class="line">        SAXBuilder sb = new SAXBuilder();</span><br><span class="line">        Document doc = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            doc = sb.build(source);</span><br><span class="line">        &#125; catch (JDOMException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return doc;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据目标节点名获取值</span><br><span class="line">     *</span><br><span class="line">     * @param doc           文档结构</span><br><span class="line">     * @param finalNodeName 节点名</span><br><span class="line">     */</span><br><span class="line">    public static String getValueByElementName(Document doc, String finalNodeName) &#123;</span><br><span class="line">        Element root = doc.getRootElement();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; resultmap = getChildAllText(doc, root, map);</span><br><span class="line">        String result = (String) resultmap.get(finalNodeName);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 递归获得子节点的值</span><br><span class="line">     *</span><br><span class="line">     * @param doc       文档结构</span><br><span class="line">     * @param e         节点元素</span><br><span class="line">     * @param resultmap 递归将值存入map中</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, Object&gt; getChildAllText(Document doc, Element e, HashMap&lt;String, Object&gt; resultmap) &#123;</span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            //如果存在子节点</span><br><span class="line">            if (e.getChildren() != null) &#123;</span><br><span class="line">                List&lt;Element&gt; list = e.getChildren();</span><br><span class="line">                //循环输出</span><br><span class="line">                for (Element el : list) &#123;</span><br><span class="line">                    //如果子节点还存在子节点，则递归获取</span><br><span class="line">                    if (el.getChildren().size() &gt; 0) &#123;</span><br><span class="line">                        getChildAllText(doc, el, resultmap);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //将叶子节点值压入map</span><br><span class="line">                        resultmap.put(el.getName(), el.getTextTrim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultmap;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     public static void main(String[] args) throws IOException &#123;</span><br><span class="line">      //路径</span><br><span class="line">      String url = &quot;http://yz.yunwms.com/default/svc/web-service&quot;; </span><br><span class="line">      //SOAPAction</span><br><span class="line">      String SOAPAction  = &quot;&quot;; </span><br><span class="line">      //SOAP数据</span><br><span class="line">      String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;&quot; +</span><br><span class="line">                &quot;                &#123;&quot; +</span><br><span class="line">                &quot;                    \&quot;pageSize\&quot;:10,&quot; +</span><br><span class="line">                &quot;                    \&quot;page\&quot;:9,&quot; +</span><br><span class="line">                &quot;                    \&quot;warehouse_code\&quot;:[\&quot;EHL01\&quot;]&quot; +</span><br><span class="line">                &quot;                &#125;&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;&quot; +</span><br><span class="line">                &quot;&lt;appToken&gt;xxx&lt;/appToken&gt;&quot; +</span><br><span class="line">                &quot;&lt;appKey&gt;xxxxx&lt;/appKey&gt;&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;getProductList&lt;/service&gt;&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">       //调用方法</span><br><span class="line">       String  response =  doPostSoap(url,soapXML,SOAPAction);</span><br><span class="line">       JSONObject resultObject = JSONObject.parseObject(response);</span><br><span class="line">       System.out.println(&quot;----&gt;&quot; + resultObject);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="xml字符串转成jsonObject的工具类"><a href="#xml字符串转成jsonObject的工具类" class="headerlink" title="xml字符串转成jsonObject的工具类"></a>xml字符串转成jsonObject的工具类</h3><p>引入pom</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--解析xml报文--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;dom4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;dom4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.6.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;jaxen&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jaxen&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1-beta-6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码工具类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.dom4j.Attribute;</span><br><span class="line">import org.dom4j.Document;</span><br><span class="line">import org.dom4j.Element;</span><br><span class="line">import org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * xml 解析</span><br><span class="line"> *</span><br><span class="line"> * @author star</span><br><span class="line"> * @date 2021/6/10</span><br><span class="line"> */</span><br><span class="line">public class XmlUtil &#123;</span><br><span class="line">    /**</span><br><span class="line">     * XML节点转换JSON对象</span><br><span class="line">     *</span><br><span class="line">     * @param element 节点</span><br><span class="line">     * @param object  新的JSON存储</span><br><span class="line">     * @return JSON对象</span><br><span class="line">     */</span><br><span class="line">    private static JSONObject xmlToJson(Element element, JSONObject object) &#123;</span><br><span class="line">        List&lt;Element&gt; elements = element.elements();</span><br><span class="line">        for (Element child : elements) &#123;</span><br><span class="line">            Object value = object.get(child.getName());</span><br><span class="line">            Object newValue;</span><br><span class="line"></span><br><span class="line">            if (child.elements().size() &gt; 0) &#123;</span><br><span class="line">                JSONObject jsonObject = xmlToJson(child, new JSONObject(true));</span><br><span class="line">                if (!jsonObject.isEmpty()) &#123;</span><br><span class="line">                    newValue = jsonObject;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    newValue = child.getText();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                newValue = child.getText();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;Attribute&gt; attributes = child.attributes();</span><br><span class="line">            if (!attributes.isEmpty()) &#123;</span><br><span class="line">                JSONObject attrJsonObject = new JSONObject();</span><br><span class="line">                for (Attribute attribute : attributes) &#123;</span><br><span class="line">                    attrJsonObject.put(attribute.getName(), attribute.getText());</span><br><span class="line">                    attrJsonObject.put(&quot;content&quot;, newValue);</span><br><span class="line">                &#125;</span><br><span class="line">                newValue = attrJsonObject;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (newValue != null) &#123;</span><br><span class="line">                if (value != null) &#123;</span><br><span class="line">                    if (value instanceof JSONArray) &#123;</span><br><span class="line">                        ((JSONArray) value).add(newValue);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        JSONArray array = new JSONArray();</span><br><span class="line">                        array.add(value);</span><br><span class="line">                        array.add(newValue);</span><br><span class="line">                        object.put(child.getName(), array);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    object.put(child.getName(), newValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * XML字符串转换JSON对象</span><br><span class="line">     *</span><br><span class="line">     * @param xmlStr XML字符串</span><br><span class="line">     * @return JSON对象</span><br><span class="line">     */</span><br><span class="line">    public static JSONObject xmlToJson(String xmlStr) &#123;</span><br><span class="line">        JSONObject result = new JSONObject(true);</span><br><span class="line">        SAXReader xmlReader = new SAXReader();</span><br><span class="line">        try &#123;</span><br><span class="line">            Document document = xmlReader.read(new StringReader(xmlStr));</span><br><span class="line">            Element element = document.getRootElement();</span><br><span class="line">            return xmlToJson(element, result);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * XML文件转换JSON对象</span><br><span class="line">     *</span><br><span class="line">     * @param file 文件路径</span><br><span class="line">     * @param node 选择节点</span><br><span class="line">     * @return JSON对象</span><br><span class="line">     */</span><br><span class="line">    public static JSONObject xmlToJson(File file, String node) &#123;</span><br><span class="line">        JSONObject result = new JSONObject(true);</span><br><span class="line">        SAXReader xmlReader = new SAXReader();</span><br><span class="line">        try &#123;</span><br><span class="line">            Document document = xmlReader.read(file);</span><br><span class="line">            Element element;</span><br><span class="line">            if (StringUtils.isBlank(node)) &#123;</span><br><span class="line">                element = document.getRootElement();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                element = (Element) document.selectSingleNode(node);</span><br><span class="line">            &#125;</span><br><span class="line">            return xmlToJson(element, result);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(xmlToJson(new File(&quot;C:\\Users\\star\\Desktop\\PAD\\1 用户登录验证.xml&quot;), &quot;Body/Response&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实战代码："><a href="#实战代码：" class="headerlink" title="实战代码："></a>实战代码：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xinghuo.service.api.eagle;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.amazonaws.util.IOUtils;</span><br><span class="line">import com.xinghuo.framework.core.util.HttpUtil;</span><br><span class="line">import com.xinghuo.framework.core.util.ResultData;</span><br><span class="line">import com.xinghuo.service.basic.entity.OutboundDetail;</span><br><span class="line">import com.xinghuo.service.basic.entity.OutboundMaster;</span><br><span class="line">import com.xinghuo.service.basic.entity.ShippingPlanSplitDetail;</span><br><span class="line">import com.xinghuo.service.basic.server.mapper.*;</span><br><span class="line">import com.xinghuo.service.common.util.HttpRequestMethedEnum;</span><br><span class="line">import org.apache.http.HttpEntity;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpPost;</span><br><span class="line">import org.apache.http.entity.StringEntity;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line">import org.jdom.Document;</span><br><span class="line">import org.jdom.Element;</span><br><span class="line">import org.jdom.JDOMException;</span><br><span class="line">import org.jdom.input.SAXBuilder;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.xml.sax.InputSource;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URISyntaxException;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLDecoder;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/eagel&quot;)</span><br><span class="line">public class EagleApi &#123;</span><br><span class="line">    @Value(&quot;$&#123;eagle.appToken&#125;&quot;)</span><br><span class="line">    private String appToken;</span><br><span class="line">    @Value(&quot;$&#123;eagle.appKey&#125;&quot;)</span><br><span class="line">    private String appKey;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private static ShippingPlanSplitDetailMapper shippingPlanSplitDetailMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderApiMapper orderApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderDetailApiMapper orderDetailApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ReturnApiMapper returnApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private ReturnDetailApiMapper returnDetailApiMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CommonMapper commonMapper;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 登录OMS账户</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/logOn&quot;)</span><br><span class="line">    public ResultData logOn() throws IOException &#123;</span><br><span class="line">        //第一步：创建服务地址</span><br><span class="line">        URL url = new URL(&quot;http://yz.yunwms.com/default/svc/web-service&quot;);</span><br><span class="line">        //第二步：打开一个通向服务地址的连接</span><br><span class="line">        HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        //第三步：设置参数</span><br><span class="line">        //3.1发送方式设置：POST必须大写</span><br><span class="line">        connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">        //3.2设置数据格式：content-type</span><br><span class="line">        connection.setRequestProperty(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);</span><br><span class="line">        //3.3设置输入输出，因为默认新创建的connection没有读写权限，</span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line">        connection.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">        //第四步：组织SOAP数据，发送请求</span><br><span class="line">        String soapString = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;</span><br><span class="line">                + &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; &quot;</span><br><span class="line">                + &quot;xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;&quot;</span><br><span class="line">                + &quot;&lt;SOAP-ENV:Body&gt;&quot;</span><br><span class="line">                + &quot;&lt;ns1:callService&gt;&quot;</span><br><span class="line">                + &quot;&lt;paramsJson&gt;&quot;</span><br><span class="line">                + &quot;&#123;\&quot;user_account\&quot;:\&quot;demo\&quot;,&quot; +</span><br><span class="line">                &quot;            \&quot;user_password\&quot;:\&quot;123456\&quot;&#125;&quot;</span><br><span class="line">                + &quot;&lt;/paramsJson&gt;&quot;</span><br><span class="line">                + &quot;&lt;appToken&gt;d2684ad701d2111628d418a57ea6d1d0&lt;/appToken&gt;&quot;</span><br><span class="line">                + &quot;&lt;appKey&gt;1b052c2bd8757e4547234d8bd0ee1d6d&lt;/appKey&gt;&quot;</span><br><span class="line">                + &quot;&lt;service&gt;logOn&lt;/service&gt;&quot;</span><br><span class="line">                + &quot;&lt;/ns1:callService&gt;&quot;</span><br><span class="line">                + &quot;&lt;/SOAP-ENV:Body&gt;&quot;</span><br><span class="line">                + &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        //将信息以流的方式发送出去</span><br><span class="line">        OutputStream os = connection.getOutputStream();</span><br><span class="line">        os.write(soapString.getBytes());</span><br><span class="line">        //第五步：接收服务端响应，打印</span><br><span class="line">        String result = &quot;&quot;;</span><br><span class="line">        int responseCode = connection.getResponseCode();</span><br><span class="line">        if (200 == responseCode) &#123;//表示服务端响应成功</span><br><span class="line">            //获取当前连接请求返回的数据流</span><br><span class="line">            InputStream is = connection.getInputStream();</span><br><span class="line">            InputStreamReader isr = new InputStreamReader(is);</span><br><span class="line">            BufferedReader br = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String temp = null;</span><br><span class="line">            while (null != (temp = br.readLine())) &#123;</span><br><span class="line">                sb.append(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            result = sb.toString();</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">            Document document = strXmlToDocument(result);</span><br><span class="line">            String response = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">            HashMap&lt;String, String&gt; hashMap = JSON.parseObject(response, HashMap.class);</span><br><span class="line">            System.out.println(&quot;----&gt;&quot; + hashMap.get(&quot;data&quot;));</span><br><span class="line">            System.out.println(URLDecoder.decode(hashMap.get(&quot;data&quot;)));</span><br><span class="line"></span><br><span class="line">            is.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        return ResultData.succeed(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取仓库</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getWarehouse&quot;)</span><br><span class="line">    public ResultData getWarehouse() throws IOException &#123;</span><br><span class="line">        //第一步：创建服务地址</span><br><span class="line">        URL url = new URL(&quot;http://yz.yunwms.com/default/svc/web-service&quot;);        //第二步：打开一个通向服务地址的连接</span><br><span class="line">        HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        //第三步：设置参数</span><br><span class="line">        //3.1发送方式设置：POST必须大写</span><br><span class="line">        connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">        //3.2设置数据格式：content-type</span><br><span class="line">        connection.setRequestProperty(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);</span><br><span class="line">        //3.3设置输入输出，因为默认新创建的connection没有读写权限，</span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line">        connection.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">        //第四步：组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;&lt;paramsJson&gt;&quot; +</span><br><span class="line">                &quot;&#123;&quot; +</span><br><span class="line">                &quot;&#125;&quot; +</span><br><span class="line">                &quot;&lt;/paramsJson&gt;&quot; +</span><br><span class="line">                &quot;&lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;&quot; +</span><br><span class="line">                &quot;&lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;&quot; +</span><br><span class="line">                &quot;&lt;service&gt;getWarehouse&lt;/service&gt;&quot; +</span><br><span class="line">                &quot;&lt;/ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        //将信息以流的方式发送出去</span><br><span class="line">        OutputStream os = connection.getOutputStream();</span><br><span class="line">        os.write(soapXML.getBytes());</span><br><span class="line">        //第五步：接收服务端响应，打印</span><br><span class="line">        int responseCode = connection.getResponseCode();</span><br><span class="line">        Object data = null;</span><br><span class="line">        if (200 == responseCode) &#123;//表示服务端响应成功</span><br><span class="line">            //获取当前连接请求返回的数据流</span><br><span class="line">            InputStream is = connection.getInputStream();</span><br><span class="line">            InputStreamReader isr = new InputStreamReader(is);</span><br><span class="line">            BufferedReader br = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String temp = null;</span><br><span class="line">            while (null != (temp = br.readLine())) &#123;</span><br><span class="line">                sb.append(temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//            System.out.println(sb.toString());</span><br><span class="line">            Document document = strXmlToDocument(sb.toString());</span><br><span class="line">            String response = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">            data = JSON.parseObject(response, Map.class);</span><br><span class="line">            is.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        return ResultData.succeed(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取sku</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getSku&quot;)</span><br><span class="line">    public ResultData getSku() throws IOException &#123;</span><br><span class="line">        //第一步：创建服务地址</span><br><span class="line">        URL url = new URL(&quot;http://yz.yunwms.com/default/svc/web-service&quot;);        //第二步：打开一个通向服务地址的连接</span><br><span class="line">        HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        //第三步：设置参数</span><br><span class="line">        //3.1发送方式设置：POST必须大写</span><br><span class="line">        connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">        //3.2设置数据格式：content-type</span><br><span class="line">        connection.setRequestProperty(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);</span><br><span class="line">        //3.3设置输入输出，因为默认新创建的connection没有读写权限，</span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line">        connection.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">        //第四步：组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;&quot; +</span><br><span class="line">                &quot;                &#123;&quot; +</span><br><span class="line">                &quot;                    \&quot;pageSize\&quot;:10,&quot; +</span><br><span class="line">                &quot;                    \&quot;page\&quot;:9,&quot; +</span><br><span class="line">                &quot;                    \&quot;warehouse_code\&quot;:[\&quot;EHL01\&quot;]&quot; +</span><br><span class="line">                &quot;                &#125;&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;getProductList&lt;/service&gt;&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        //将信息以流的方式发送出去</span><br><span class="line">        OutputStream os = connection.getOutputStream();</span><br><span class="line">        os.write(soapXML.getBytes());</span><br><span class="line">        //第五步：接收服务端响应，打印</span><br><span class="line">        int responseCode = connection.getResponseCode();</span><br><span class="line">        Object data = null;</span><br><span class="line">        if (200 == responseCode) &#123;//表示服务端响应成功</span><br><span class="line">            //获取当前连接请求返回的数据流</span><br><span class="line">            InputStream is = connection.getInputStream();</span><br><span class="line">            InputStreamReader isr = new InputStreamReader(is);</span><br><span class="line">            BufferedReader br = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String temp = null;</span><br><span class="line">            while (null != (temp = br.readLine())) &#123;</span><br><span class="line">                sb.append(temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">            Document document = strXmlToDocument(sb.toString());</span><br><span class="line">            String response = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">            data = JSON.parseObject(response, Map.class);</span><br><span class="line">            System.out.println(&quot;----&gt;&quot; + response);</span><br><span class="line"></span><br><span class="line">            is.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        return ResultData.succeed(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 运输方式</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getShippingMethod&quot;)</span><br><span class="line">    public ResultData getShippingMethod() &#123;</span><br><span class="line">        String retStr = &quot;&quot;;</span><br><span class="line">        String url = &quot;http://yz.yunwms.com/default/svc/web-service&quot;;</span><br><span class="line">        //组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;\n&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;\n&quot; +</span><br><span class="line">                &quot;                &#123;\n&quot; +</span><br><span class="line">                &quot;                    \&quot;warehouseCode\&quot;:\&quot;EHL01\&quot;\n&quot; +</span><br><span class="line">                &quot;                &#125;\n&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;getShippingMethod&lt;/service&gt;\n&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        System.out.println(soapXML);</span><br><span class="line">        // 创建HttpClientBuilder</span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();</span><br><span class="line">        // HttpClient</span><br><span class="line">        CloseableHttpClient closeableHttpClient = httpClientBuilder.build();</span><br><span class="line">        HttpPost httpPost = new HttpPost(url);</span><br><span class="line">        try &#123;</span><br><span class="line">            httpPost.setHeader(&quot;Content-Type&quot;, &quot;text/xml;charset=UTF-8&quot;);</span><br><span class="line">            //看情况可以为空，也可以不设置</span><br><span class="line">            // httpPost.setHeader(&quot;SOAPAction&quot;, SOAPAction);</span><br><span class="line">            StringEntity data = new StringEntity(soapXML, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">            httpPost.setEntity(data);</span><br><span class="line">            CloseableHttpResponse response = closeableHttpClient.execute(httpPost);</span><br><span class="line">            HttpEntity httpEntity = response.getEntity();</span><br><span class="line">            if (httpEntity != null) &#123;</span><br><span class="line">                // 打印响应内容</span><br><span class="line">                retStr = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            // 释放资源</span><br><span class="line">            closeableHttpClient.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //这里还是返回的是xml字符串</span><br><span class="line">        System.out.println(retStr);</span><br><span class="line">        //将返回的xml转换成Document</span><br><span class="line">        Document document = strXmlToDocument(retStr);</span><br><span class="line">        //在Document中找到我们要找到那个  &lt;response&gt;&lt;/response&gt;里面的数据</span><br><span class="line">        retStr = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">        //在将字符串json数据转成JsonObeject</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(retStr);</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">        return ResultData.succeed(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建销售订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getOrder&quot;)</span><br><span class="line">    public ResultData getOrder() &#123;</span><br><span class="line">        String retStr = &quot;&quot;;</span><br><span class="line">        String url = &quot;http://yz.yunwms.com/default/svc/web-service&quot;;</span><br><span class="line">        //组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;\n&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;\n&quot; +</span><br><span class="line">                &quot;                &#123;\n&quot; +</span><br><span class="line">                &quot;                    \&quot;pageSize\&quot;:1,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;page\&quot;:1,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_code\&quot;:\&quot;51326-240219-0008\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_status\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;shipping_method\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_code_arr\&quot;:[],\n&quot; +</span><br><span class="line">                &quot;                    \&quot;create_date_from\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;create_date_to\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;modify_date_from\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;modify_date_to\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;ship_date_from\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;ship_date_to\&quot;:\&quot;\&quot;\n&quot; +</span><br><span class="line">                &quot;                &#125;\n&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;getOrderList&lt;/service&gt;\n&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;\n&quot; +</span><br><span class="line">                &quot;    &quot;;</span><br><span class="line">        System.out.println(soapXML);</span><br><span class="line">        // 创建HttpClientBuilder</span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();</span><br><span class="line">        // HttpClient</span><br><span class="line">        CloseableHttpClient closeableHttpClient = httpClientBuilder.build();</span><br><span class="line">        HttpPost httpPost = new HttpPost(url);</span><br><span class="line">        try &#123;</span><br><span class="line">            httpPost.setHeader(&quot;Content-Type&quot;, &quot;text/xml;charset=UTF-8&quot;);</span><br><span class="line">            //看情况可以为空，也可以不设置</span><br><span class="line">            // httpPost.setHeader(&quot;SOAPAction&quot;, SOAPAction);</span><br><span class="line">            StringEntity data = new StringEntity(soapXML, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">            httpPost.setEntity(data);</span><br><span class="line">            CloseableHttpResponse response = closeableHttpClient.execute(httpPost);</span><br><span class="line">            HttpEntity httpEntity = response.getEntity();</span><br><span class="line">            if (httpEntity != null) &#123;</span><br><span class="line">                // 打印响应内容</span><br><span class="line">                retStr = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            // 释放资源</span><br><span class="line">            closeableHttpClient.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //这里还是返回的是xml字符串</span><br><span class="line">        System.out.println(retStr);</span><br><span class="line">        //将返回的xml转换成Document</span><br><span class="line">        Document document = strXmlToDocument(retStr);</span><br><span class="line">        //在Document中找到我们要找到那个  &lt;response&gt;&lt;/response&gt;里面的数据</span><br><span class="line">        retStr = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">        //在将字符串json数据转成JsonObeject</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(retStr);</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">        return ResultData.succeed(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建WALMART销售订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/createWalmartOrder&quot;)</span><br><span class="line">    public ResultData createWalmartOrder(OutboundMaster outboundMaster) &#123;</span><br><span class="line">        List&lt;OutboundDetail&gt; detailList = outboundMaster.getDetailList();</span><br><span class="line">        OutboundDetail outboundDetail = detailList.get(0);</span><br><span class="line">        if (null == outboundMaster.getShipToAddressTwo()) &#123;</span><br><span class="line">            outboundMaster.setShipToAddressTwo(&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String retStr = &quot;&quot;;</span><br><span class="line">        String url = &quot;http://yz.yunwms.com/default/svc/web-service&quot;;</span><br><span class="line">        //组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;\n&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;\n&quot; +</span><br><span class="line">                &quot;                &#123;\n&quot; +</span><br><span class="line">                &quot;                    \&quot;platform\&quot;:\&quot;WALMART\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;warehouse_code\&quot;:\&quot;EHL01\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;shipping_method\&quot;:\&quot;UPS_3\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;reference_no\&quot;:\&quot;&quot; + outboundMaster.getPo() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_desc\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_business_type\&quot;:\&quot;b2c\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;country_code\&quot;:\&quot;&quot; + outboundMaster.getShipToCountry() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;province\&quot;:\&quot;&quot; + outboundMaster.getShipToState() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;city\&quot;:\&quot;&quot; + outboundMaster.getShipToCity() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;district\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;address1\&quot;:\&quot;&quot; + outboundMaster.getShipToAddressOne() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;address2\&quot;:\&quot;&quot; + outboundMaster.getShipToAddressTwo() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;address3\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;zipcode\&quot;:\&quot;&quot; + outboundMaster.getShipToZip() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;license\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;doorplate\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;company\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;name\&quot;:\&quot;&quot; + outboundMaster.getShipToName() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;phone\&quot;:\&quot;&quot; + outboundMaster.getShipToPhone() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;cell_phone\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;phone_extension\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;email\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_cod_currency\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;assign_time\&quot;:\&quot;02\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;items\&quot;:[\n&quot; +</span><br><span class="line">                &quot;                        &#123;\n&quot; +</span><br><span class="line">                &quot;                            \&quot;product_sku\&quot;:\&quot;&quot; + outboundDetail.getSku() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                            \&quot;quantity\&quot;:&quot; + outboundDetail.getPoQty() + &quot;\n&quot; +</span><br><span class="line">                &quot;                        &#125;\n&quot; +</span><br><span class="line">                &quot;                    ]\n&quot; +</span><br><span class="line">                &quot;                &#125;\n&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;createOrder&lt;/service&gt;\n&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        System.out.println(soapXML);</span><br><span class="line">        // 创建HttpClientBuilder</span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();</span><br><span class="line">        // HttpClient</span><br><span class="line">        CloseableHttpClient closeableHttpClient = httpClientBuilder.build();</span><br><span class="line">        HttpPost httpPost = new HttpPost(url);</span><br><span class="line">        try &#123;</span><br><span class="line">            httpPost.setHeader(&quot;Content-Type&quot;, &quot;text/xml;charset=UTF-8&quot;);</span><br><span class="line">            //看情况可以为空，也可以不设置</span><br><span class="line">            // httpPost.setHeader(&quot;SOAPAction&quot;, SOAPAction);</span><br><span class="line">            StringEntity data = new StringEntity(soapXML, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">            httpPost.setEntity(data);</span><br><span class="line">            CloseableHttpResponse response = closeableHttpClient.execute(httpPost);</span><br><span class="line">            HttpEntity httpEntity = response.getEntity();</span><br><span class="line">            if (httpEntity != null) &#123;</span><br><span class="line">                // 打印响应内容</span><br><span class="line">                retStr = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            // 释放资源</span><br><span class="line">            closeableHttpClient.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //这里还是返回的是xml字符串</span><br><span class="line">        System.out.println(retStr);</span><br><span class="line">        //将返回的xml转换成Document</span><br><span class="line">        Document document = strXmlToDocument(retStr);</span><br><span class="line">        //在Document中找到我们要找到那个  &lt;response&gt;&lt;/response&gt;里面的数据</span><br><span class="line">        retStr = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">        //在将字符串json数据转成JsonObeject</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(retStr);</span><br><span class="line">        if (null == jsonObject) &#123;</span><br><span class="line">            return ResultData.fail(&quot;发送到鹰仓的请求参数异常&quot; + retStr);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Object error = jsonObject.get(&quot;Error&quot;);</span><br><span class="line">            if (null != error) &#123;</span><br><span class="line">                return ResultData.fail(500, &quot;发送到鹰仓的请求体没错，但是数据有误&quot;, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">        return ResultData.succeed(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建WALMART销售订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/createWayfairOrder&quot;)</span><br><span class="line">    public ResultData createWayfairOrder(OutboundMaster outboundMaster) &#123;</span><br><span class="line">        List&lt;OutboundDetail&gt; detailList = outboundMaster.getDetailList();</span><br><span class="line">        OutboundDetail outboundDetail = detailList.get(0);</span><br><span class="line">        if (null == outboundMaster.getShipToAddressTwo()) &#123;</span><br><span class="line">            outboundMaster.setShipToAddressTwo(&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String retStr = &quot;&quot;;</span><br><span class="line">        String url = &quot;http://yz.yunwms.com/default/svc/web-service&quot;;</span><br><span class="line">        //组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;\n&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;\n&quot; +</span><br><span class="line">                &quot;                &#123;\n&quot; +</span><br><span class="line">                &quot;                    \&quot;platform\&quot;:\&quot;WAYFAIR\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;warehouse_code\&quot;:\&quot;EHL01\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;shipping_method\&quot;:\&quot;ZITI\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;reference_no\&quot;:\&quot;&quot; + outboundMaster.getPo() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_desc\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_business_type\&quot;:\&quot;b2c\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;country_code\&quot;:\&quot;&quot; + outboundMaster.getShipToCountry() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;province\&quot;:\&quot;&quot; + outboundMaster.getShipToState() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;city\&quot;:\&quot;&quot; + outboundMaster.getShipToCity() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;district\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;address1\&quot;:\&quot;&quot; + outboundMaster.getShipToAddressOne() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;address2\&quot;:\&quot;&quot; + outboundMaster.getShipToAddressTwo() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;address3\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;zipcode\&quot;:\&quot;&quot; + outboundMaster.getShipToZip() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;license\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;doorplate\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;company\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;name\&quot;:\&quot;&quot; + outboundMaster.getShipToName() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;phone\&quot;:\&quot;&quot; + outboundMaster.getShipToPhone() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;cell_phone\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;phone_extension\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;email\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;order_cod_currency\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;items\&quot;:[\n&quot; +</span><br><span class="line">                &quot;                        &#123;\n&quot; +</span><br><span class="line">                &quot;                            \&quot;product_sku\&quot;:\&quot;&quot; + outboundDetail.getSku() + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                            \&quot;quantity\&quot;:&quot; + outboundDetail.getPoQty() + &quot;\n&quot; +</span><br><span class="line">                &quot;                        &#125;\n&quot; +</span><br><span class="line">                &quot;                    ],\n&quot; +</span><br><span class="line">//                &quot;                    \&quot;tracking_no\&quot;:\&quot;&quot; + &quot;tracking_no&quot; + &quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                    \&quot;label\&quot;:[\n&quot; +</span><br><span class="line">                &quot;                        &#123;\n&quot; +</span><br><span class="line">                &quot;                            \&quot;file_type\&quot;:\&quot;pdf\&quot;,\n&quot; +</span><br><span class="line">                &quot;                            \&quot;file_data\&quot;:\&quot;\&quot;,\n&quot; +</span><br><span class="line">                &quot;                            \&quot;file_size\&quot;:\&quot;1680x945\&quot;,\n&quot; +</span><br><span class="line">                &quot;                            \&quot;file_name\&quot;:\&quot;shippingLabelCS514662380.pdf\&quot; \n&quot; +</span><br><span class="line">                &quot;                        &#125;\n&quot; +</span><br><span class="line">                &quot;                    ]\n&quot; +</span><br><span class="line">                &quot;                &#125;\n&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;createOrder&lt;/service&gt;\n&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        System.out.println(soapXML);</span><br><span class="line">        // 创建HttpClientBuilder</span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();</span><br><span class="line">        // HttpClient</span><br><span class="line">        CloseableHttpClient closeableHttpClient = httpClientBuilder.build();</span><br><span class="line">        HttpPost httpPost = new HttpPost(url);</span><br><span class="line">        try &#123;</span><br><span class="line">            httpPost.setHeader(&quot;Content-Type&quot;, &quot;text/xml;charset=UTF-8&quot;);</span><br><span class="line">            //看情况可以为空，也可以不设置</span><br><span class="line">            // httpPost.setHeader(&quot;SOAPAction&quot;, SOAPAction);</span><br><span class="line">            StringEntity data = new StringEntity(soapXML, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">            httpPost.setEntity(data);</span><br><span class="line">            CloseableHttpResponse response = closeableHttpClient.execute(httpPost);</span><br><span class="line">            HttpEntity httpEntity = response.getEntity();</span><br><span class="line">            if (httpEntity != null) &#123;</span><br><span class="line">                // 打印响应内容</span><br><span class="line">                retStr = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            // 释放资源</span><br><span class="line">            closeableHttpClient.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //这里还是返回的是xml字符串</span><br><span class="line">        System.out.println(retStr);</span><br><span class="line">        //将返回的xml转换成Document</span><br><span class="line">        Document document = strXmlToDocument(retStr);</span><br><span class="line">        //在Document中找到我们要找到那个  &lt;response&gt;&lt;/response&gt;里面的数据</span><br><span class="line">        retStr = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">        //在将字符串json数据转成JsonObeject</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(retStr);</span><br><span class="line">        if (null == jsonObject) &#123;</span><br><span class="line">            return ResultData.fail(&quot;发送到鹰仓的请求参数异常&quot; + retStr);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Object error = jsonObject.get(&quot;Error&quot;);</span><br><span class="line">            if (null != error) &#123;</span><br><span class="line">                return ResultData.fail(500, &quot;发送到鹰仓的请求体没错，但是数据有误&quot;, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">        return ResultData.succeed(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取getAsnList</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/getAsnList&quot;)</span><br><span class="line">    public ResultData getAsnList() throws IOException &#123;</span><br><span class="line">        //第一步：创建服务地址</span><br><span class="line">        URL url = new URL(&quot;http://yz.yunwms.com/default/svc/web-service&quot;);</span><br><span class="line">        //第二步：打开一个通向服务地址的连接</span><br><span class="line">        HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        //第三步：设置参数</span><br><span class="line">        //3.1发送方式设置：POST必须大写</span><br><span class="line">        connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">        //3.2设置数据格式：content-type</span><br><span class="line">        connection.setRequestProperty(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);</span><br><span class="line">        //3.3设置输入输出，因为默认新创建的connection没有读写权限，</span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line">        connection.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">        //第四步：组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;&quot; +</span><br><span class="line">                &quot;                &#123;&quot; +</span><br><span class="line">                &quot;                    \&quot;pageSize\&quot;:20,&quot; +</span><br><span class="line">                &quot;                    \&quot;page\&quot;:1,&quot; +</span><br><span class="line">                &quot;                    \&quot;receiving_code\&quot;:\&quot;\&quot;,&quot; +</span><br><span class="line">                &quot;                    \&quot;receiving_code_arr\&quot;:[],&quot; +</span><br><span class="line">                &quot;\&quot;reference_no\&quot;:\&quot;\&quot;,&quot; +</span><br><span class="line">                &quot;                    \&quot;reference_no_arr\&quot;:[],&quot; +</span><br><span class="line">                &quot;                    \&quot;create_date_from\&quot;:\&quot;2018-01-08 10:00:00\&quot;,&quot; +</span><br><span class="line">                &quot;                    \&quot;create_date_to\&quot;:\&quot;2018-02-08 10:00:00\&quot;,&quot; +</span><br><span class="line">                &quot;                    \&quot;modify_date_from\&quot;:\&quot;2018-01-08 10:00:00\&quot;,&quot; +</span><br><span class="line">                &quot;                    \&quot;modify_date_to\&quot;:\&quot;2018-02-08 10:00:00\&quot;,&quot; +</span><br><span class="line">                &quot;                    \&quot;business_type\&quot;:\&quot;\&quot;,&quot; +</span><br><span class="line">                &quot;                    \&quot;is_get_inventory_code\&quot;:0&quot; +</span><br><span class="line">                &quot;                &#125;&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;getAsnList&lt;/service&gt;&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        //将信息以流的方式发送出去</span><br><span class="line">        OutputStream os = connection.getOutputStream();</span><br><span class="line">        os.write(soapXML.getBytes());</span><br><span class="line">        //第五步：接收服务端响应，打印</span><br><span class="line">        int responseCode = connection.getResponseCode();</span><br><span class="line">        Object data = null;</span><br><span class="line">        if (200 == responseCode) &#123;//表示服务端响应成功</span><br><span class="line">            //获取当前连接请求返回的数据流</span><br><span class="line">            InputStream is = connection.getInputStream();</span><br><span class="line">            InputStreamReader isr = new InputStreamReader(is);</span><br><span class="line">            BufferedReader br = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String temp = null;</span><br><span class="line">            while (null != (temp = br.readLine())) &#123;</span><br><span class="line">                sb.append(temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//            System.out.println(sb.toString());</span><br><span class="line">            Document document = strXmlToDocument(sb.toString());</span><br><span class="line">            String response = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">            data = JSON.parseObject(response, Map.class);</span><br><span class="line">            System.out.println(&quot;----&gt;&quot; + response);</span><br><span class="line"></span><br><span class="line">            is.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        return ResultData.succeed(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建订单</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/createAsn&quot;)</span><br><span class="line">    public ResultData createAsn() throws IOException &#123;</span><br><span class="line">        //第一步：创建服务地址</span><br><span class="line">        URL url = new URL(&quot;http://yz.yunwms.com/default/svc/web-service&quot;);</span><br><span class="line">        //第二步：打开一个通向服务地址的连接</span><br><span class="line">        HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        //第三步：设置参数</span><br><span class="line">        //3.1发送方式设置：POST必须大写</span><br><span class="line">        connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">        //3.2设置数据格式：content-type</span><br><span class="line">        connection.setRequestProperty(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);</span><br><span class="line">        //3.3设置输入输出，因为默认新创建的connection没有读写权限，</span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line">        connection.setDoOutput(true);</span><br><span class="line">        List&lt;ShippingPlanSplitDetail&gt; detailList = new ArrayList&lt;&gt;();</span><br><span class="line">        ShippingPlanSplitDetail shippingPlanSplitDetail = new ShippingPlanSplitDetail();</span><br><span class="line">        shippingPlanSplitDetail.setStatus(&quot;5&quot;);</span><br><span class="line">        shippingPlanSplitDetail.setSmallShippingPlanOrder(&quot;SMSP20231121-0002&quot;);</span><br><span class="line">        detailList = shippingPlanSplitDetailMapper.query(shippingPlanSplitDetail);</span><br><span class="line">        Integer boxNo = 1;</span><br><span class="line">        List&lt;ShippingPlanSplitDetail&gt; shippingPlanSplitDetailList = new ArrayList&lt;&gt;();</span><br><span class="line">//        for (ShippingPlanSplitDetail detail:detailList) &#123;</span><br><span class="line">//            for (int i = 0; i &lt; detail.getCtn(); i++) &#123;</span><br><span class="line">//                ShippingPlanSplitDetail detail1 = new ShippingPlanSplitDetail();</span><br><span class="line">//                detail1.set</span><br><span class="line">//            &#125;</span><br><span class="line">//        &#125;</span><br><span class="line">        //第四步：组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;&lt;paramsJson&gt;&quot; +</span><br><span class="line">                &quot;&#123;&quot; +</span><br><span class="line">                &quot;\&quot;reference_no\&quot;:\&quot;dfdfd1399866764\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;warehouse_code\&quot;:\&quot;EHL01\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;items\&quot;:[&quot; +</span><br><span class="line">                &quot;&#123;&quot; +</span><br><span class="line">                &quot;\&quot;product_sku\&quot;:\&quot;114A006\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;quantity\&quot;:10,&quot; +</span><br><span class="line">                &quot;\&quot;box_no\&quot;:1,&quot; +</span><br><span class="line">                &quot;\&quot;product_price\&quot;:1.00,&quot; +</span><br><span class="line">                &quot;\&quot;currency_code\&quot;:\&quot;RMB\&quot;,&quot; +</span><br><span class="line">                &quot; \&quot;associated_barcode\&quot;:\&quot;sdgv554561\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;inventory_type\&quot;:\&quot;1\&quot;&quot; +</span><br><span class="line">                &quot;&#125;,&quot; +</span><br><span class="line">//                &quot; &#123;&quot; +</span><br><span class="line">//                &quot;\&quot;product_sku\&quot;:\&quot;EA140509201610\&quot;,&quot; +</span><br><span class="line">//                &quot;\&quot;quantity\&quot;:10,&quot; +</span><br><span class="line">//                &quot;\&quot;currency_code\&quot;:\&quot;RMB\&quot;,&quot; +</span><br><span class="line">//                &quot;\&quot;associated_barcode\&quot;:\&quot;sdgv554562\&quot;,&quot; +</span><br><span class="line">//                &quot;\&quot;inventory_type\&quot;:\&quot;1\&quot;&quot; +</span><br><span class="line">//                &quot;&#125;,&quot; +</span><br><span class="line">                &quot;&#123;&quot; +</span><br><span class="line">                &quot;\&quot;product_sku\&quot;:\&quot;1135\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;quantity\&quot;:10,&quot; +</span><br><span class="line">                &quot;\&quot;box_no\&quot;:2,&quot; +</span><br><span class="line">                &quot; \&quot;product_price\&quot;:1.00,&quot; +</span><br><span class="line">                &quot;\&quot;currency_code\&quot;:\&quot;RMB\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;associated_barcode\&quot;:\&quot;sdgv554563\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;inventory_type\&quot;:\&quot;1\&quot;&quot; +</span><br><span class="line">                &quot;&#125;&quot; +</span><br><span class="line">                &quot;]&quot; +</span><br><span class="line">                &quot;&#125;&quot; +</span><br><span class="line">                &quot;&lt;/paramsJson&gt;&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;service&gt;createAsn&lt;/service&gt;&quot; +</span><br><span class="line">                &quot;&lt;/ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot; +</span><br><span class="line">                &quot;    &quot;;</span><br><span class="line">        //将信息以流的方式发送出去</span><br><span class="line">        OutputStream os = connection.getOutputStream();</span><br><span class="line">        os.write(soapXML.getBytes());</span><br><span class="line">        //第五步：接收服务端响应，打印</span><br><span class="line">        int responseCode = connection.getResponseCode();</span><br><span class="line">        Object data = null;</span><br><span class="line">        if (200 == responseCode) &#123;//表示服务端响应成功</span><br><span class="line">            //获取当前连接请求返回的数据流</span><br><span class="line">            InputStream is = connection.getInputStream();</span><br><span class="line">            InputStreamReader isr = new InputStreamReader(is);</span><br><span class="line">            BufferedReader br = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String temp = null;</span><br><span class="line">            while (null != (temp = br.readLine())) &#123;</span><br><span class="line">                sb.append(temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//            System.out.println(sb.toString());</span><br><span class="line">            Document document = strXmlToDocument(sb.toString());</span><br><span class="line">            String response = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">            data = JSON.parseObject(response, Map.class);</span><br><span class="line">            System.out.println(&quot;----&gt;&quot; + response);</span><br><span class="line"></span><br><span class="line">            is.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        return ResultData.succeed(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改modifyAsn</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/modifyAsn&quot;)</span><br><span class="line">    public ResultData modifyAsn() throws IOException &#123;</span><br><span class="line">        //第一步：创建服务地址</span><br><span class="line">        URL url = new URL(&quot;http://yz.yunwms.com/default/svc/web-service&quot;);</span><br><span class="line">        //第二步：打开一个通向服务地址的连接</span><br><span class="line">        HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        //第三步：设置参数</span><br><span class="line">        //3.1发送方式设置：POST必须大写</span><br><span class="line">        connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">        //3.2设置数据格式：content-type</span><br><span class="line">        connection.setRequestProperty(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);</span><br><span class="line">        //3.3设置输入输出，因为默认新创建的connection没有读写权限，</span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line">        connection.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">        //第四步：组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;&quot; +</span><br><span class="line">                &quot;                &#123;&quot; +</span><br><span class="line">                &quot;                    \&quot;receiving_code\&quot;:\&quot;RVA001-200422-0001\&quot;&quot; +</span><br><span class="line">                &quot;                &#125;&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;cancelAsn&lt;/service&gt;&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        //将信息以流的方式发送出去</span><br><span class="line">        OutputStream os = connection.getOutputStream();</span><br><span class="line">        os.write(soapXML.getBytes());</span><br><span class="line">        //第五步：接收服务端响应，打印</span><br><span class="line">        int responseCode = connection.getResponseCode();</span><br><span class="line">        Object data = null;</span><br><span class="line">        if (200 == responseCode) &#123;//表示服务端响应成功</span><br><span class="line">            //获取当前连接请求返回的数据流</span><br><span class="line">            InputStream is = connection.getInputStream();</span><br><span class="line">            InputStreamReader isr = new InputStreamReader(is);</span><br><span class="line">            BufferedReader br = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String temp = null;</span><br><span class="line">            while (null != (temp = br.readLine())) &#123;</span><br><span class="line">                sb.append(temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//            System.out.println(sb.toString());</span><br><span class="line">            Document document = strXmlToDocument(sb.toString());</span><br><span class="line">            String response = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">            data = JSON.parseObject(response, Map.class);</span><br><span class="line">            System.out.println(&quot;----&gt;&quot; + response);</span><br><span class="line"></span><br><span class="line">            is.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        return ResultData.succeed(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * cancelAsn</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/cancelAsn&quot;)</span><br><span class="line">    public ResultData cancelAsn() throws IOException &#123;</span><br><span class="line">        //第一步：创建服务地址</span><br><span class="line">        URL url = new URL(&quot;http://yz.yunwms.com/default/svc/web-service&quot;);</span><br><span class="line">        //第二步：打开一个通向服务地址的连接</span><br><span class="line">        HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        //第三步：设置参数</span><br><span class="line">        //3.1发送方式设置：POST必须大写</span><br><span class="line">        connection.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">        //3.2设置数据格式：content-type</span><br><span class="line">        connection.setRequestProperty(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);</span><br><span class="line">        //3.3设置输入输出，因为默认新创建的connection没有读写权限，</span><br><span class="line">        connection.setDoInput(true);</span><br><span class="line">        connection.setDoOutput(true);</span><br><span class="line"></span><br><span class="line">        //第四步：组织SOAP数据，发送请求</span><br><span class="line">        String soapXML = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;&quot; +</span><br><span class="line">                &quot;&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:ns1=\&quot;http://www.example.org/Ec/\&quot;&gt;&quot; +</span><br><span class="line">                &quot;    &lt;SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;        &lt;ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;            &lt;paramsJson&gt;&quot; +</span><br><span class="line">                &quot;                &#123;&quot; +</span><br><span class="line">                &quot;                    \&quot;receiving_code\&quot;:\&quot;RVA001-200422-0001\&quot;&quot; +</span><br><span class="line">                &quot;                &#125;&quot; +</span><br><span class="line">                &quot;            &lt;/paramsJson&gt;&quot; +</span><br><span class="line">                &quot;            &lt;appToken&gt;&quot; + appToken + &quot;&lt;/appToken&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;appKey&gt;&quot; + appKey + &quot;&lt;/appKey&gt;\n&quot; +</span><br><span class="line">                &quot;            &lt;service&gt;cancelAsn&lt;/service&gt;&quot; +</span><br><span class="line">                &quot;        &lt;/ns1:callService&gt;&quot; +</span><br><span class="line">                &quot;    &lt;/SOAP-ENV:Body&gt;&quot; +</span><br><span class="line">                &quot;&lt;/SOAP-ENV:Envelope&gt;&quot;;</span><br><span class="line">        //将信息以流的方式发送出去</span><br><span class="line">        OutputStream os = connection.getOutputStream();</span><br><span class="line">        os.write(soapXML.getBytes());</span><br><span class="line">        //第五步：接收服务端响应，打印</span><br><span class="line">        int responseCode = connection.getResponseCode();</span><br><span class="line">        Object data = null;</span><br><span class="line">        if (200 == responseCode) &#123;//表示服务端响应成功</span><br><span class="line">            //获取当前连接请求返回的数据流</span><br><span class="line">            InputStream is = connection.getInputStream();</span><br><span class="line">            InputStreamReader isr = new InputStreamReader(is);</span><br><span class="line">            BufferedReader br = new BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String temp = null;</span><br><span class="line">            while (null != (temp = br.readLine())) &#123;</span><br><span class="line">                sb.append(temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//            System.out.println(sb.toString());</span><br><span class="line">            Document document = strXmlToDocument(sb.toString());</span><br><span class="line">            String response = getValueByElementName(document, &quot;response&quot;);</span><br><span class="line">            data = JSON.parseObject(response, Map.class);</span><br><span class="line">            System.out.println(&quot;----&gt;&quot; + response);</span><br><span class="line"></span><br><span class="line">            is.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        return ResultData.succeed(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        String ss=&quot;https://pic.imgdb.cn/item/656da10ec458853aef86d988.jpg&quot;;</span><br><span class="line">        byte[] bytes = ss.getBytes();</span><br><span class="line">        String s = Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将返回的数据转换成Document</span><br><span class="line">     *</span><br><span class="line">     * @param parseStrXml</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Document strXmlToDocument(String parseStrXml) &#123;</span><br><span class="line">        StringReader read = new StringReader(parseStrXml);</span><br><span class="line">        //创建新的输入源SAX 解析器将使用 InputSource 对象来确定如何读取 XML 输入</span><br><span class="line">        InputSource source = new InputSource(read);</span><br><span class="line">        //创建一个新的SAXBuilder</span><br><span class="line">        // 新建立构造器</span><br><span class="line">        SAXBuilder sb = new SAXBuilder();</span><br><span class="line">        Document doc = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            doc = sb.build(source);</span><br><span class="line">        &#125; catch (JDOMException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return doc;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据目标节点名获取值</span><br><span class="line">     *</span><br><span class="line">     * @param doc           文档结构</span><br><span class="line">     * @param finalNodeName 节点名</span><br><span class="line">     */</span><br><span class="line">    public static String getValueByElementName(Document doc, String finalNodeName) &#123;</span><br><span class="line">        Element root = doc.getRootElement();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; resultmap = getChildAllText(doc, root, map);</span><br><span class="line">        String result = (String) resultmap.get(finalNodeName);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 递归获得子节点的值</span><br><span class="line">     *</span><br><span class="line">     * @param doc       文档结构</span><br><span class="line">     * @param e         节点元素</span><br><span class="line">     * @param resultmap 递归将值存入map中</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, Object&gt; getChildAllText(Document doc, Element e, HashMap&lt;String, Object&gt; resultmap) &#123;</span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            //如果存在子节点</span><br><span class="line">            if (e.getChildren() != null) &#123;</span><br><span class="line">                List&lt;Element&gt; list = e.getChildren();</span><br><span class="line">                //循环输出</span><br><span class="line">                for (Element el : list) &#123;</span><br><span class="line">                    //如果子节点还存在子节点，则递归获取</span><br><span class="line">                    if (el.getChildren().size() &gt; 0) &#123;</span><br><span class="line">                        getChildAllText(doc, el, resultmap);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //将叶子节点值压入map</span><br><span class="line">                        resultmap.put(el.getName(), el.getTextTrim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultmap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq.md</title>
      <link href="/2023/09/09/RabbitMq-md/"/>
      <url>/2023/09/09/RabbitMq-md/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMq"><a href="#RabbitMq" class="headerlink" title="RabbitMq"></a>RabbitMq</h1><p>官网：<a href="https://www.rabbitmq.com/">RabbitMQ: easy to use, flexible messaging and streaming — RabbitMQ</a></p><p>学习链接 ：<a href="https://www.kuangstudy.com/zl/rabbitmq#1365897801984241665">消息队列-RabbitMQ篇章- 专栏 -KuangStudy</a></p><hr><h2 id="RabbitMQ入门及安装"><a href="#RabbitMQ入门及安装" class="headerlink" title="RabbitMQ入门及安装"></a>RabbitMQ入门及安装</h2><h2 id="01、概述"><a href="#01、概述" class="headerlink" title="01、概述"></a>01、概述</h2><p>官网：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a><br>什么是RabbitMQ,官方给出来这样的解释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RabbitMQ是部署最广泛的开源消息代理。</span><br><span class="line">RabbitMQ拥有成千上万的用户，是最受欢迎的开源消息代理之一。从T-Mobile 到Runtastic，RabbitMQ在全球范围内的小型初创企业和大型企业中都得到使用。</span><br><span class="line">RabbitMQ轻巧，易于在内部和云中部署。它支持多种消息传递协议。RabbitMQ可以部署在分布式和联合配置中，以满足大规模，高可用性的要求。</span><br><span class="line">RabbitMQ可在许多操作系统和云环境上运行，并为大多数流行语言提供了广泛的开发人员工具。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">简单概述：</span><br><span class="line">RabbitMQ是一个开源的遵循AMQP协议实现的基于Erlang语言编写，支持多种客户端（语言）。用于在分布式系统中存储消息，转发消息，具有高可用，高可扩性，易用性等特征。</span><br></pre></td></tr></table></figure><h2 id="02、安装RabbitMQ"><a href="#02、安装RabbitMQ" class="headerlink" title="02、安装RabbitMQ"></a>02、安装RabbitMQ</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：下载地址：https://www.rabbitmq.com/download.html</span><br><span class="line">2：环境准备：CentOS7.x+ / Erlang</span><br><span class="line">RabbitMQ是采用Erlang语言开发的，所以系统环境必须提供Erlang环境，第一步就是安装Erlang。</span><br><span class="line"></span><br><span class="line">&gt; erlang和RabbitMQ版本的按照比较: https://www.rabbitmq.com/which-erlang.html</span><br></pre></td></tr></table></figure></blockquote><h2 id="03、-Erlang安装"><a href="#03、-Erlang安装" class="headerlink" title="03、 Erlang安装"></a>03、 Erlang安装</h2><p>查看系统版本号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@iZm5eauu5f1ulwtdgwqnsbZ ~]# lsb_release -a</span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">Release:7.6.1810</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><h4 id="3-1-安装下载"><a href="#3-1-安装下载" class="headerlink" title="3-1:安装下载"></a>3-1:安装下载</h4><p>参考地址：<a href="https://www.erlang-solutions.com/downloads/">https://www.erlang-solutions.com/downloads/</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://packages.erlang-solutions.com/erlang-solutions-2.0-1.noarch.rpm</span><br><span class="line">rpm -Uvh erlang-solutions-2.0-1.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="3-2：安装成功"><a href="#3-2：安装成功" class="headerlink" title="3-2：安装成功"></a>3-2：安装成功</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y erlang</span><br></pre></td></tr></table></figure><h4 id="3-3：安装成功"><a href="#3-3：安装成功" class="headerlink" title="3-3：安装成功"></a>3-3：安装成功</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">erl -v</span><br></pre></td></tr></table></figure><h2 id="04、安装socat"><a href="#04、安装socat" class="headerlink" title="04、安装socat"></a>04、安装socat</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y socat</span><br></pre></td></tr></table></figure><h3 id="05、安装rabbitmq"><a href="#05、安装rabbitmq" class="headerlink" title="05、安装rabbitmq"></a>05、安装rabbitmq</h3><p>下载地址：<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p><h4 id="5-1-下载rabbitmq"><a href="#5-1-下载rabbitmq" class="headerlink" title="5-1:下载rabbitmq"></a>5-1:下载rabbitmq</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.13/rabbitmq-server-3.8.13-1.el8.noarch.rpm</span><br><span class="line">&gt; rpm -Uvh rabbitmq-server-3.8.13-1.el8.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="5-2-启动rabbitmq服务"><a href="#5-2-启动rabbitmq服务" class="headerlink" title="5-2:启动rabbitmq服务"></a>5-2:启动rabbitmq服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动服务&gt; systemctl start rabbitmq-server</span><br><span class="line"># 查看服务状态&gt; systemctl status rabbitmq-server</span><br><span class="line"># 停止服务&gt; systemctl stop rabbitmq-server</span><br><span class="line"># 开机启动服务&gt; systemctl enable rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="06、RabbitMQ的配置"><a href="#06、RabbitMQ的配置" class="headerlink" title="06、RabbitMQ的配置"></a>06、RabbitMQ的配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RabbitMQ默认情况下有一个配置文件，定义了RabbitMQ的相关配置信息，默认情况下能够满足日常的开发需求。如果需要修改需要，需要自己创建一个配置文件进行覆盖。</span><br><span class="line">参考官网：</span><br><span class="line">1:https://www.rabbitmq.com/documentation.html</span><br><span class="line">2:https://www.rabbitmq.com/configure.html</span><br><span class="line">3:https://www.rabbitmq.com/configure.html#config-items</span><br><span class="line">4：https://github.com/rabbitmq/rabbitmq-server/blob/add-debug-messages-to-quorum_queue_SUITE/docs/rabbitmq.conf.example</span><br></pre></td></tr></table></figure><h3 id="06-1、相关端口"><a href="#06-1、相关端口" class="headerlink" title="06-1、相关端口"></a>06-1、相关端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5672:RabbitMQ的通讯端口</span><br><span class="line">25672:RabbitMQ的节点间的CLI通讯端口是</span><br><span class="line">15672:RabbitMQ HTTP_API的端口，管理员用户才能访问，用于管理RabbitMQ,需要启动Management插件。</span><br><span class="line">1883，8883：MQTT插件启动时的端口。</span><br><span class="line">61613、61614：STOMP客户端插件启用的时候的端口。</span><br><span class="line">15674、15675：基于webscoket的STOMP端口和MOTT端口</span><br></pre></td></tr></table></figure><p>一定要注意：RabbitMQ 在安装完毕以后，会绑定一些端口，如果你购买的是阿里云或者腾讯云相关的服务器一定要在安全组中把对应的端口添加到防火墙。</p><hr><h2 id="RabbitMQWeb管理界面及授权操作"><a href="#RabbitMQWeb管理界面及授权操作" class="headerlink" title="RabbitMQWeb管理界面及授权操作"></a>RabbitMQWeb管理界面及授权操作</h2><h3 id="01-1：默认情况下，rabbitmq是没有安装web端的客户端插件，需要安装才可以生效"><a href="#01-1：默认情况下，rabbitmq是没有安装web端的客户端插件，需要安装才可以生效" class="headerlink" title="01-1：默认情况下，rabbitmq是没有安装web端的客户端插件，需要安装才可以生效"></a>01-1：默认情况下，rabbitmq是没有安装web端的客户端插件，需要安装才可以生效</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><blockquote><p>说明：rabbitmq有一个默认账号和密码是：<code>guest</code> 默认情况只能在localhost本机下访问，所以需要添加一个远程登录的用户。</p></blockquote><h3 id="01-2：安装完毕以后，重启服务即可"><a href="#01-2：安装完毕以后，重启服务即可" class="headerlink" title="01-2：安装完毕以后，重启服务即可"></a>01-2：安装完毕以后，重启服务即可</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><blockquote><p>一定要记住，在对应服务器(阿里云，腾讯云等)的安全组中开放<code>15672</code>的端口。</p></blockquote><h3 id="01-3：在浏览器访问"><a href="#01-3：在浏览器访问" class="headerlink" title="01-3：在浏览器访问"></a>01-3：在浏览器访问</h3><h2 id="02、授权账号和密码"><a href="#02、授权账号和密码" class="headerlink" title="02、授权账号和密码"></a>02、授权账号和密码</h2><h3 id="2-1：新增用户"><a href="#2-1：新增用户" class="headerlink" title="2-1：新增用户"></a>2-1：新增用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user admin admin</span><br></pre></td></tr></table></figure><h3 id="2-2-设置用户分配操作权限"><a href="#2-2-设置用户分配操作权限" class="headerlink" title="2-2:设置用户分配操作权限"></a>2-2:设置用户分配操作权限</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p>用户级别：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、administrator 可以登录控制台、查看所有信息、可以对rabbitmq进行管理</span><br><span class="line"></span><br><span class="line">2、monitoring 监控者 登录控制台，查看所有信息</span><br><span class="line"></span><br><span class="line">3、policymaker 策略制定者 登录控制台,指定策略</span><br><span class="line"></span><br><span class="line">4、managment 普通管理员 登录控制台</span><br></pre></td></tr></table></figure><h3 id="2-3：为用户添加资源权限"><a href="#2-3：为用户添加资源权限" class="headerlink" title="2-3：为用户添加资源权限"></a>2-3：为用户添加资源权限</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl.bat set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><h2 id="03、小结："><a href="#03、小结：" class="headerlink" title="03、小结："></a>03、小结：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user 账号 密码</span><br><span class="line">rabbitmqctl set_user_tags 账号 administratorrabbitmqctl </span><br><span class="line">change_password Username Newpassword 修改密码</span><br><span class="line">rabbitmqctl delete_user Username 删除用户</span><br><span class="line">rabbitmqctl list_users 查看用户清单</span><br><span class="line">rabbitmqctl set_permissions -p / 用户名 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; 为用户设置administrator角色</span><br><span class="line">rabbitmqctl set_permissions -p / root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><h2 id="RabbitMQ之Docker安装"><a href="#RabbitMQ之Docker安装" class="headerlink" title="RabbitMQ之Docker安装"></a>RabbitMQ之Docker安装</h2><h2 id="01、Docker安装RabbitMQ"><a href="#01、Docker安装RabbitMQ" class="headerlink" title="01、Docker安装RabbitMQ"></a>01、Docker安装RabbitMQ</h2><h3 id="1-1、虚拟化容器技术—Docker的安装"><a href="#1-1、虚拟化容器技术—Docker的安装" class="headerlink" title="1-1、虚拟化容器技术—Docker的安装"></a>1-1、虚拟化容器技术—Docker的安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）yum 包更新到最新</span><br><span class="line">&gt; yum update</span><br><span class="line">（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span><br><span class="line">&gt; yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">（3）设置yum源为阿里云</span><br><span class="line">&gt; yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">（4）安装docker</span><br><span class="line">&gt; yum install docker-ce -y</span><br><span class="line">（5）安装后查看docker版本</span><br><span class="line">&gt; docker -v </span><br><span class="line">(6) 安装加速镜像 sudo mkdir -p /etc/docker </span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27; </span><br><span class="line">&#123;  </span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://0wrdwnn6.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125; </span><br><span class="line">EOF </span><br><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="1-2、docker的相关命令"><a href="#1-2、docker的相关命令" class="headerlink" title="1-2、docker的相关命令"></a>1-2、docker的相关命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动docker：systemctl start docker</span><br><span class="line"># 停止docker：systemctl stop docker</span><br><span class="line"># 重启docker：systemctl restart docker</span><br><span class="line"># 查看docker状态：systemctl status docker</span><br><span class="line"># 开机启动：  systemctl enable dockersystemctl unenable docker</span><br><span class="line"># 查看docker概要信息docker info</span><br><span class="line"># 查看docker帮助文档docker --help</span><br></pre></td></tr></table></figure><h3 id="1-3、安装rabbitmq"><a href="#1-3、安装rabbitmq" class="headerlink" title="1-3、安装rabbitmq"></a>1-3、安装rabbitmq</h3><p>参考网站：<br>1：<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a><br>2：<a href="https://registry.hub.docker.com/_/rabbitmq/">https://registry.hub.docker.com/_/rabbitmq/</a></p><h3 id="1-4、获取rabbit镜像："><a href="#1-4、获取rabbit镜像：" class="headerlink" title="1-4、获取rabbit镜像："></a>1-4、获取rabbit镜像：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure><h3 id="1-5、创建并运行容器"><a href="#1-5、创建并运行容器" class="headerlink" title="1-5、创建并运行容器"></a>1-5、创建并运行容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di --name=myrabbit -p 15672:15672 rabbitmq:management</span><br></pre></td></tr></table></figure><p>—hostname：指定容器主机名称<br>—name:指定容器名称<br>-p:将mq端口号映射到本地<br>或者运行时设置用户和密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management</span><br></pre></td></tr></table></figure><p>说明</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5672:RabbitMQ的通讯端口</span><br><span class="line">25672:RabbitMQ的节点间的CLI通讯端口是</span><br><span class="line">15672:RabbitMQ HTTP_API的端口，管理员用户才能访问，用于管理RabbitMQ,需要启动Management插件。</span><br><span class="line">1883，8883：MQTT插件启动时的端口。</span><br><span class="line">61613、61614：STOMP客户端插件启用的时候的端口。</span><br><span class="line">15674、15675：基于webscoket的STOMP端口和MOTT端口</span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -f myrabbit</span><br></pre></td></tr></table></figure><h3 id="1-6、容器运行正常"><a href="#1-6、容器运行正常" class="headerlink" title="1-6、容器运行正常"></a>1-6、容器运行正常</h3><p>使用 <code>http://你的IP地址:15672</code> 访问rabbit控制台</p><h2 id="02、额外Linux相关排查命令"><a href="#02、额外Linux相关排查命令" class="headerlink" title="02、额外Linux相关排查命令"></a>02、额外Linux相关排查命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; more xxx.log  查看日记信息</span><br><span class="line">&gt; netstat -naop | grep 5672 查看端口是否被占用</span><br><span class="line">&gt; ps -ef | grep 5672  查看进程</span><br><span class="line">&gt; systemctl stop 服务</span><br></pre></td></tr></table></figure><hr><h1 id="RabbitMQ的角色分类"><a href="#RabbitMQ的角色分类" class="headerlink" title="RabbitMQ的角色分类"></a>RabbitMQ的角色分类</h1><h2 id="01、RabbitMQ的角色分类"><a href="#01、RabbitMQ的角色分类" class="headerlink" title="01、RabbitMQ的角色分类"></a>01、RabbitMQ的角色分类</h2><h3 id="1：none："><a href="#1：none：" class="headerlink" title="1：none："></a>1：none：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不能访问management plugin</span><br></pre></td></tr></table></figure><h3 id="2：management：查看自己相关节点信息"><a href="#2：management：查看自己相关节点信息" class="headerlink" title="2：management：查看自己相关节点信息"></a>2：management：查看自己相关节点信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列出自己可以通过AMQP登入的虚拟机</span><br><span class="line">- 查看自己的虚拟机节点 virtual hosts的queues,exchanges和bindings信息</span><br><span class="line">- 查看和关闭自己的channels和connections</span><br><span class="line">- 查看有关自己的虚拟机节点virtual hosts的统计信息。包括其他用户在这个节点virtual hosts中的活动信息。</span><br></pre></td></tr></table></figure><h3 id="3：Policymaker"><a href="#3：Policymaker" class="headerlink" title="3：Policymaker"></a>3：Policymaker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 包含management所有权限</span><br><span class="line">- 查看和创建和删除自己的virtual hosts所属的policies和parameters信息。</span><br></pre></td></tr></table></figure><h3 id="4：Monitoring"><a href="#4：Monitoring" class="headerlink" title="4：Monitoring"></a>4：Monitoring</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 包含management所有权限</span><br><span class="line">- 罗列出所有的virtual hosts，包括不能登录的virtual hosts。</span><br><span class="line">- 查看其他用户的connections和channels信息</span><br><span class="line">- 查看节点级别的数据如clustering和memory使用情况</span><br><span class="line">- 查看所有的virtual hosts的全局统计信息。</span><br></pre></td></tr></table></figure><h3 id="5：Administrator"><a href="#5：Administrator" class="headerlink" title="5：Administrator"></a>5：Administrator</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 最高权限</span><br><span class="line">- 可以创建和删除virtual hosts</span><br><span class="line">- 可以查看，创建和删除users</span><br><span class="line">- 查看创建permisssions</span><br><span class="line">- 关闭所有用户的connections</span><br></pre></td></tr></table></figure><hr><h1 id="RabbitMQ入门案例-Simple-简单模式"><a href="#RabbitMQ入门案例-Simple-简单模式" class="headerlink" title="RabbitMQ入门案例 - Simple 简单模式"></a>RabbitMQ入门案例 - Simple 简单模式</h1><h2 id="01、实现步骤"><a href="#01、实现步骤" class="headerlink" title="01、实现步骤"></a>01、实现步骤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：jdk1.8</span><br><span class="line">2：构建一个maven工程</span><br><span class="line">3：导入rabbitmq的maven依赖</span><br><span class="line">4：启动rabbitmq-server服务</span><br><span class="line">5：定义生产者</span><br><span class="line">6：定义消费者</span><br><span class="line">7：观察消息的在rabbitmq-server服务中的过程</span><br></pre></td></tr></table></figure><h2 id="02、构建一个maven工程"><a href="#02、构建一个maven工程" class="headerlink" title="02、构建一个maven工程"></a>02、构建一个maven工程</h2><h2 id="03、导入rabbitmq的maven依赖"><a href="#03、导入rabbitmq的maven依赖" class="headerlink" title="03、导入rabbitmq的maven依赖"></a>03、导入rabbitmq的maven依赖</h2><h3 id="03-1：Java原生依赖"><a href="#03-1：Java原生依赖" class="headerlink" title="03-1：Java原生依赖"></a>03-1：Java原生依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.10.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="03-2：spring依赖"><a href="#03-2：spring依赖" class="headerlink" title="03-2：spring依赖"></a>03-2：spring依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-amqp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="03-3、springboot依赖"><a href="#03-3、springboot依赖" class="headerlink" title="03-3、springboot依赖"></a>03-3、springboot依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/huzecom/article/details/103578310">SpringBoot整合RabbitMQ超级详细教程_springboot rabbitmq 教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/u010786653/article/details/119182289">Springboot整合Rabbitmq(史上最详细)_springboot整合rabitmq代码-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43606226/article/details/114372349">Springboot+RabbitMq整合使用（含配置详解等）_springboot rabbitmq config-CSDN博客</a></p><p>上面根据自己的项目环境进行选择即可。</p><p>番外：rabbitmq和spring同属一个公司开放的产品，所以他们的支持也是非常完善，这也是为什么推荐使用rabbitmq的一个原因。</p><h2 id="04、启动rabbitmq-server服务"><a href="#04、启动rabbitmq-server服务" class="headerlink" title="04、启动rabbitmq-server服务"></a>04、启动rabbitmq-server服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start rabbitmq-server</span><br><span class="line">或者</span><br><span class="line">docker start myrabbit</span><br></pre></td></tr></table></figure><h2 id="05、定义生产者"><a href="#05、定义生产者" class="headerlink" title="05、定义生产者"></a>05、定义生产者</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.star.rabbitmq.simple;</span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line">/**</span><br><span class="line"> * @author: star</span><br><span class="line"> * @description: Producer 简单队列生产者</span><br><span class="line"> * @Date : 2021/3/2</span><br><span class="line"> */</span><br><span class="line">public class Producer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 1: 创建连接工厂</span><br><span class="line">        ConnectionFactory connectionFactory = new ConnectionFactory();</span><br><span class="line">        // 2: 设置连接属性</span><br><span class="line">        connectionFactory.setHost(&quot;47.104.141.27&quot;);</span><br><span class="line">        connectionFactory.setPort(5672);</span><br><span class="line">        connectionFactory.setVirtualHost(&quot;/&quot;);</span><br><span class="line">        connectionFactory.setUsername(&quot;admin&quot;);</span><br><span class="line">        connectionFactory.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 3: 从连接工厂中获取连接</span><br><span class="line">            connection = connectionFactory.newConnection(&quot;生产者&quot;);</span><br><span class="line">            // 4: 从连接中获取通道channel</span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            // 5: 申明队列queue存储消息</span><br><span class="line">            /*</span><br><span class="line">             *  如果队列不存在，则会创建</span><br><span class="line">             *  Rabbitmq不允许创建两个相同的队列名称，否则会报错。</span><br><span class="line">             *</span><br><span class="line">             *  @params1： queue 队列的名称</span><br><span class="line">             *  @params2： durable 队列是否持久化</span><br><span class="line">             *  @params3： exclusive 是否排他，即是否私有的，如果为true,会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</span><br><span class="line">             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</span><br><span class="line">             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</span><br><span class="line">             * */</span><br><span class="line">            channel.queueDeclare(&quot;queue1&quot;, false, false, false, null);</span><br><span class="line">            // 6： 准备发送消息的内容</span><br><span class="line">            String message = &quot;你好，学相伴！！！&quot;;</span><br><span class="line">            // 7: 发送消息给中间件rabbitmq-server</span><br><span class="line">            // @params1: 交换机exchange</span><br><span class="line">            // @params2: 队列名称/routing</span><br><span class="line">            // @params3: 属性配置</span><br><span class="line">            // @params4: 发送消息的内容</span><br><span class="line">            channel.basicPublish(&quot;&quot;, &quot;queue1&quot;, null, message.getBytes());</span><br><span class="line">            System.out.println(&quot;消息发送成功!&quot;);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            System.out.println(&quot;发送消息出现异常...&quot;);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // 7: 释放连接关闭通道</span><br><span class="line">            if (channel != null &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="06、定义消费者"><a href="#06、定义消费者" class="headerlink" title="06、定义消费者"></a>06、定义消费者</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.star.rabbitmq.simple;</span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import com.rabbitmq.client.Connection;</span><br><span class="line">import com.rabbitmq.client.ConnectionFactory;</span><br><span class="line">/**</span><br><span class="line"> * @author: star</span><br><span class="line"> * @description: Producer 简单队列生产者</span><br><span class="line"> * @Date : 2021/3/2</span><br><span class="line"> */</span><br><span class="line">public class Producer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 1: 创建连接工厂</span><br><span class="line">        ConnectionFactory connectionFactory = new ConnectionFactory();</span><br><span class="line">        // 2: 设置连接属性</span><br><span class="line">        connectionFactory.setHost(&quot;47.104.141.27&quot;);</span><br><span class="line">        connectionFactory.setPort(5672);</span><br><span class="line">        connectionFactory.setVirtualHost(&quot;/&quot;);</span><br><span class="line">        connectionFactory.setUsername(&quot;admin&quot;);</span><br><span class="line">        connectionFactory.setPassword(&quot;admin&quot;);</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        Channel channel = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 3: 从连接工厂中获取连接</span><br><span class="line">            connection = connectionFactory.newConnection(&quot;生产者&quot;);</span><br><span class="line">            // 4: 从连接中获取通道channel</span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            // 5: 申明队列queue存储消息</span><br><span class="line">            /*</span><br><span class="line">             *  如果队列不存在，则会创建</span><br><span class="line">             *  Rabbitmq不允许创建两个相同的队列名称，否则会报错。</span><br><span class="line">             *</span><br><span class="line">             *  @params1： queue 队列的名称</span><br><span class="line">             *  @params2： durable 队列是否持久化</span><br><span class="line">             *  @params3： exclusive 是否排他，即是否私有的，如果为true,会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</span><br><span class="line">             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</span><br><span class="line">             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</span><br><span class="line">             * */</span><br><span class="line">            channel.queueDeclare(&quot;queue1&quot;, false, false, false, null);</span><br><span class="line">            // 6： 准备发送消息的内容</span><br><span class="line">            String message = &quot;你好，学相伴！！！&quot;;</span><br><span class="line">            // 7: 发送消息给中间件rabbitmq-server</span><br><span class="line">            // @params1: 交换机exchange</span><br><span class="line">            // @params2: 队列名称/routing</span><br><span class="line">            // @params3: 属性配置</span><br><span class="line">            // @params4: 发送消息的内容</span><br><span class="line">            channel.basicPublish(&quot;&quot;, &quot;queue1&quot;, null, message.getBytes());</span><br><span class="line">            System.out.println(&quot;消息发送成功!&quot;);</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            System.out.println(&quot;发送消息出现异常...&quot;);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // 7: 释放连接关闭通道</span><br><span class="line">            if (channel != null &amp;&amp; channel.isOpen()) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; catch (Exception ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="07、观察消息的在rabbitmq-server服务中的过程"><a href="#07、观察消息的在rabbitmq-server服务中的过程" class="headerlink" title="07、观察消息的在rabbitmq-server服务中的过程"></a>07、观察消息的在rabbitmq-server服务中的过程</h2><hr><h2 id="什么是AMQP"><a href="#什么是AMQP" class="headerlink" title="什么是AMQP"></a>什么是AMQP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AMQP全称：Advanced Message Queuing Protocol(高级消息队列协议)。是应用层协议的一个开发标准，为面向消息的中间件设计。</span><br></pre></td></tr></table></figure><hr><h2 id="RabbitMQ的核心组成部分"><a href="#RabbitMQ的核心组成部分" class="headerlink" title="RabbitMQ的核心组成部分"></a>RabbitMQ的核心组成部分</h2><h2 id="01、RabbitMQ的核心组成部分"><a href="#01、RabbitMQ的核心组成部分" class="headerlink" title="01、RabbitMQ的核心组成部分"></a>01、RabbitMQ的核心组成部分</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">核心概念：</span><br><span class="line">Server：又称Broker ,接受客户端的连接，实现AMQP实体服务。 安装rabbitmq-server</span><br><span class="line">Connection：连接，应用程序与Broker的网络连接 TCP/IP/ 三次握手和四次挥手</span><br><span class="line">Channel：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立对各Channel，每个Channel代表一个会话任务。</span><br><span class="line">Message :消息：服务与应用程序之间传送的数据，由Properties和body组成，Properties可是对消息进行修饰，比如消息的优先级，延迟等高级特性，Body则就是消息体的内容。</span><br><span class="line">Virtual Host 虚拟地址，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机理由可以有若干个Exhange和Queueu，同一个虚拟主机里面不能有相同名字的Exchange</span><br><span class="line">Exchange：交换机，接受消息，根据路由键发送消息到绑定的队列。(==不具备消息存储的能力==)</span><br><span class="line">Bindings：Exchange和Queue之间的虚拟连接，binding中可以保护多个routing key.</span><br><span class="line">Routing key：是一个路由规则，虚拟机可以用它来确定如何路由一个特定消息。</span><br><span class="line">Queue：队列：也成为Message Queue,消息队列，保存消息并将它们转发给消费者。</span><br></pre></td></tr></table></figure><h2 id="02、RabbitMQ支持消息的模式"><a href="#02、RabbitMQ支持消息的模式" class="headerlink" title="02、RabbitMQ支持消息的模式"></a>02、RabbitMQ支持消息的模式</h2><p>参考官网：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><h3 id="02-1、简单模式-Simple"><a href="#02-1、简单模式-Simple" class="headerlink" title="02-1、简单模式 Simple"></a>02-1、简单模式 Simple</h3><ul><li>参考第12章节</li></ul><h3 id="02-2、工作模式-Work"><a href="#02-2、工作模式-Work" class="headerlink" title="02-2、工作模式 Work"></a>02-2、工作模式 Work</h3><ul><li>web操作查看视频</li><li>类型：无</li><li>特点：分发机制</li></ul><h3 id="02-3、发布订阅模式"><a href="#02-3、发布订阅模式" class="headerlink" title="02-3、发布订阅模式"></a>02-3、发布订阅模式</h3><ul><li>web操作查看视频</li><li>类型：fanout</li><li>特点：Fanout—发布与订阅模式，是一种广播机制，它是没有路由key的模式。</li></ul><h3 id="02-4、路由模式"><a href="#02-4、路由模式" class="headerlink" title="02-4、路由模式"></a>02-4、路由模式</h3><ul><li>web操作查看视频</li><li>类型：direct</li><li>特点：有routing-key的匹配模式</li></ul><h3 id="02-5、主题Topic模式"><a href="#02-5、主题Topic模式" class="headerlink" title="02-5、主题Topic模式"></a>02-5、主题Topic模式</h3><ul><li>web操作查看视频</li><li>类型：topic</li><li>特点：模糊的routing-key的匹配模式</li></ul><h3 id="02-6、参数模式"><a href="#02-6、参数模式" class="headerlink" title="02-6、参数模式"></a>02-6、参数模式</h3><ul><li>web操作查看视频</li><li>类型：headers</li><li>特点：参数匹配模式</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmq发送消息一定有一个交换机</span><br><span class="line"></span><br><span class="line">如果么有制定交换机，那么他会默认绑定默认交换机</span><br></pre></td></tr></table></figure><hr><p><a href="https://blog.csdn.net/qq_39240270/article/details/94202815">RabbitMQ的四种交换机模式_mq的四种模式-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二、RabbitMQ的四种交换机</span><br><span class="line">直连交换机：Direct exchange</span><br><span class="line">扇形交换机：Fanout exchange</span><br><span class="line">主体交换机：Topic exchange</span><br><span class="line">首部交换机：Headers exchange</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、直连交换机</span><br><span class="line">直连交换机是一种带路由功能的交换机，一个队列会和一个交换机绑定，除此之外再绑定一个routing_key，当消息被发送的时候，需要指定一个binding_key，这个消息被送达交换机的时候，就会被这个交换机送到指定的队列里面去。同样的一个binding_key也是支持应用到多个队列中的。</span><br><span class="line">这样当一个交换机绑定多个队列时，就会被送到对应的队列去处理。</span><br><span class="line"></span><br><span class="line">2、扇形交换机</span><br><span class="line">扇形交换机是最基本的交换机类型，它能做的事非常简单——广播消息，扇形交换机会把能接收到的消息全部发送给绑定在自己身上的队列。因为广播不需要&quot;思考&quot;，所以扇形交换机处理消息的速度也是所有的交换机类型里面最快的。</span><br><span class="line"></span><br><span class="line">3、主题交换机</span><br><span class="line">直连交换机的routing_key方法非常简单，如果希望将一条消息发送给多个队列，那么这个交换机需要绑定非常多的routing_key，这样的话消息的管理就会非常的困难。</span><br><span class="line">所以RabbitMQ提供了一种主题交换机，发送到主题交换机上的消息需要携带制定规则的routing_key，主题交换机会根据这个规则将数据发送到对应的队列上。</span><br><span class="line"></span><br><span class="line">4、首部交换机</span><br><span class="line">首部交换机是忽略routing_key的一种路由方式。路由器和交换机路由的规则是通过Headers信息来交换的，这个有点像HTTP请求中的请求头。将一个交换机声明成首部交换机，绑定一个队列的时候，定义一个Hash的数据结构，消息发送的时候，会携带一组hash数据结构的信息，当Hash内容匹配上的时候，消息就会被写入队列。</span><br><span class="line">绑定交换机和队列的时候，Hash结构中要求携带一个键&quot;x-match&quot;，这个键的Value可以是any或者all，这代表消息携带的Hash是需要全部匹配(all)，还是仅仅匹配一个键(any)就可以了。相比较直连交换机，首部交换机的优势是匹配的规则不被限定为字符串(string)。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RabbitMq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目整合RabbitMq.md</title>
      <link href="/2023/09/09/springboot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88RabbitMq-md/"/>
      <url>/2023/09/09/springboot%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88RabbitMq-md/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot项目整合RabbitMq"><a href="#springboot项目整合RabbitMq" class="headerlink" title="springboot项目整合RabbitMq"></a>springboot项目整合RabbitMq</h1><p>参考</p><p><a href="https://blog.csdn.net/u010786653/article/details/119182289">Springboot整合Rabbitmq(史上最详细)_springboot整合rabitmq代码-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43606226/article/details/114372349">Springboot+RabbitMq整合使用（含配置详解等）_springboot rabbitmq config-CSDN博客</a></p><p><a href="https://blog.csdn.net/huzecom/article/details/103578310">SpringBoot整合RabbitMQ超级详细教程_springboot rabbitmq 教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/ystyaoshengting/article/details/105267542">Spring-RabbitMq 参数配置详解_spring.rabbitmq.addresses-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_40722827/article/details/125825983?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125825983%22,%22source%22:%22unlogin%22%7D">Spring项目整合 RabbitMQ消息队列，动态创建队列与交换机_rabbitmq动态创建队列-CSDN博客</a></p><p><a href="https://mbd.baidu.com/ug_share/mbox/4a83aa9e65/share?product=smartapp&tk=db30eab8f0dfbe22a9e4b72f2aacdbe7&share_url=https://yebd1h.smartapps.cn/pages/blog/index?blogId=120736743&_swebfr=1&_swebFromHost=baiduboxapp&domain=mbd.baidu.com">Springboot项目整合Rabbitmq详细教程-CSDN博客 (baidu.com)</a></p><p><a href="https://blog.csdn.net/niugang0920/article/details/116275748">Spring中@Primary注解-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/911d987b5f11">RabbitMQ：@RabbitListener 与 @RabbitHandler 及 消息序列化 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/pan_junbiao/article/details/112956537">RabbitMQ消息确认机制（ACK）_rabbitmq ack-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_38085977/article/details/108209677">RabbitMq 配置 消费者和 ReturnCallback 和 ConfirmCallback_rabbittemplate.setconfirmcallback-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_39240270/article/details/94202815">RabbitMQ的四种交换机模式_mq的四种模式-CSDN博客</a></p><hr><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">添加RabbitMQ的起步依赖</span><br><span class="line">在application.yml中配置RabbitMQ的信息</span><br><span class="line">创建一个rabbitMQ配置类</span><br><span class="line">创建生产者</span><br><span class="line">消费者工程</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_43606226/article/details/114372349">Springboot+RabbitMq整合使用（含配置详解等）_springboot rabbitmq config-CSDN博客</a></p><h4 id="1、引入springboot整合amqp的依赖"><a href="#1、引入springboot整合amqp的依赖" class="headerlink" title="1、引入springboot整合amqp的依赖"></a>1、引入springboot整合amqp的依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、application-yml-配置"><a href="#2、application-yml-配置" class="headerlink" title="2、application.yml 配置"></a>2、application.yml 配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 应用服务 WEB 访问端口</span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">#rabbitmq</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: rabbitmq-producer</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: 39.108.121.100</span><br><span class="line">    port: 5672</span><br><span class="line">    username: star</span><br><span class="line">    password: star</span><br><span class="line">    virtual-host: /</span><br><span class="line">    publisher-confirms: true</span><br><span class="line">    publisher-returns: true</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">    template:</span><br><span class="line">      mandatory: true</span><br></pre></td></tr></table></figure><h4 id="3、RabbitConfig-java-（自定义Rabbitmq配置类）"><a href="#3、RabbitConfig-java-（自定义Rabbitmq配置类）" class="headerlink" title="3、RabbitConfig.java （自定义Rabbitmq配置类）"></a>3、RabbitConfig.java （自定义<a href="https://so.csdn.net/so/search?q=Rabbitmq&spm=1001.2101.3001.7020">Rabbitmq</a>配置类）</h4><p><strong>配置详细解释都写在注解上了</strong></p><p>RabbitConfig.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.star.rabbitmq.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.AcknowledgeMode;</span><br><span class="line">import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;</span><br><span class="line">import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;</span><br><span class="line">import org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line">import org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line">import org.springframework.amqp.rabbit.retry.RejectAndDontRequeueRecoverer;</span><br><span class="line">import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.autoconfigure.amqp.RabbitProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.retry.RetryCallback;</span><br><span class="line">import org.springframework.retry.RetryContext;</span><br><span class="line">import org.springframework.retry.RetryListener;</span><br><span class="line">import org.springframework.retry.backoff.ExponentialBackOffPolicy;</span><br><span class="line">import org.springframework.retry.policy.SimpleRetryPolicy;</span><br><span class="line">import org.springframework.retry.support.RetryTemplate;</span><br><span class="line"></span><br><span class="line">//常用的三个配置如下</span><br><span class="line">//1---设置手动应答（acknowledge-mode: manual）</span><br><span class="line">// 2---设置生产者消息发送的确认回调机制 (  #这个配置是保证提供者确保消息推送到交换机中，不管成不成功，都会回调</span><br><span class="line">//    publisher-confirm-type: correlated</span><br><span class="line">//    #保证交换机能把消息推送到队列中</span><br><span class="line">//    publisher-returns: true</span><br><span class="line">//     template:</span><br><span class="line">//      #以下是rabbitmqTemplate配置</span><br><span class="line">//      mandatory: true)</span><br><span class="line">// 3---设置重试</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ConnectionFactory rabbitConnectionFactory;</span><br><span class="line"></span><br><span class="line">    //@Bean  缓存连接池</span><br><span class="line">    //public CachingConnectionFactory rabbitConnectionFactory</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitProperties properties;</span><br><span class="line"></span><br><span class="line">    //这里因为使用自动配置的connectionFactory，所以把自定义的connectionFactory注解掉</span><br><span class="line">    // 存在此名字的bean 自带的连接工厂会不加载（也就是说yml中rabbitmq下一级不生效），如果想自定义来区分开 需要改变bean 的名称</span><br><span class="line">//    @Bean</span><br><span class="line">//    public ConnectionFactory connectionFactory() throws Exception &#123;</span><br><span class="line">//        //创建工厂类</span><br><span class="line">//        CachingConnectionFactory cachingConnectionFactory=new CachingConnectionFactory();</span><br><span class="line">//        //用户名</span><br><span class="line">//        cachingConnectionFactory.setUsername(&quot;gust&quot;);</span><br><span class="line">//        //密码</span><br><span class="line">//        cachingConnectionFactory.setPassword(&quot;gust&quot;);</span><br><span class="line">//        //rabbitMQ地址</span><br><span class="line">//        cachingConnectionFactory.setHost(&quot;127.0.0.1&quot;);</span><br><span class="line">//        //rabbitMQ端口</span><br><span class="line">//        cachingConnectionFactory.setPort(Integer.parseInt(&quot;5672&quot;));</span><br><span class="line">//</span><br><span class="line">//        //设置发布消息后回调</span><br><span class="line">//        cachingConnectionFactory.setPublisherReturns(true);</span><br><span class="line">//        //设置发布后确认类型，此处确认类型为交互</span><br><span class="line">//        cachingConnectionFactory.setPublisherConfirmType(CachingConnectionFactory.ConfirmType.CORRELATED);</span><br><span class="line">//</span><br><span class="line">//        cachingConnectionFactory.setCacheMode(CachingConnectionFactory.CacheMode.CHANNEL);</span><br><span class="line">//        return  cachingConnectionFactory;</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 存在此名字的bean 自带的容器工厂会不加载（yml下rabbitmq下的listener下的simple配置），如果想自定义来区分开 需要改变bean 的名称</span><br><span class="line">    @Bean</span><br><span class="line">    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory() &#123;</span><br><span class="line">        SimpleRabbitListenerContainerFactory containerFactory = new SimpleRabbitListenerContainerFactory();</span><br><span class="line">        containerFactory.setConnectionFactory(rabbitConnectionFactory);</span><br><span class="line"></span><br><span class="line">        // 并发消费者数量</span><br><span class="line">        containerFactory.setConcurrentConsumers(1);</span><br><span class="line">        containerFactory.setMaxConcurrentConsumers(20);</span><br><span class="line">        // 预加载消息数量 -- QOS</span><br><span class="line">        containerFactory.setPrefetchCount(1);</span><br><span class="line">        // 应答模式（此处设置为手动）</span><br><span class="line">        containerFactory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        //消息序列化方式</span><br><span class="line">        containerFactory.setMessageConverter(new Jackson2JsonMessageConverter());</span><br><span class="line">        // 设置通知调用链 （这里设置的是重试机制的调用链）</span><br><span class="line">        containerFactory.setAdviceChain(</span><br><span class="line">                RetryInterceptorBuilder</span><br><span class="line">                        .stateless()</span><br><span class="line">                        .recoverer(new RejectAndDontRequeueRecoverer())</span><br><span class="line">                        .retryOperations(rabbitRetryTemplate())</span><br><span class="line">                        .build()</span><br><span class="line">        );</span><br><span class="line">        return containerFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 存在此名字的bean 自带的容器工厂会不加载（yml下rabbitmq下的template的配置），如果想自定义来区分开 需要改变bean 的名称</span><br><span class="line">    @Bean</span><br><span class="line">    public RabbitTemplate rabbitTemplate()&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate=new RabbitTemplate(rabbitConnectionFactory);</span><br><span class="line">        //默认是用jdk序列化</span><br><span class="line">        //数据转换为json存入消息队列，方便可视化界面查看消息数据</span><br><span class="line">        rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter());</span><br><span class="line">        //设置开启Mandatory,才能触发回调函数,无论消息推送结果怎么样都强制调用回调函数</span><br><span class="line">        rabbitTemplate.setMandatory(true);</span><br><span class="line">        //此处设置重试template后，会再生产者发送消息的时候，调用该template中的调用链</span><br><span class="line">        rabbitTemplate.setRetryTemplate(rabbitRetryTemplate());</span><br><span class="line">        //CorrelationData correlationData, boolean b, String s</span><br><span class="line">        rabbitTemplate.setConfirmCallback(</span><br><span class="line">                (correlationData, b, s) -&gt; &#123;</span><br><span class="line">                    System.out.println(&quot;ConfirmCallback     &quot;+&quot;相关数据：&quot;+  correlationData);</span><br><span class="line">                    System.out.println(&quot;ConfirmCallback     &quot;+&quot;确认情况：&quot;+b);</span><br><span class="line">                    System.out.println(&quot;ConfirmCallback     &quot;+&quot;原因：&quot;+s);</span><br><span class="line">                &#125;);</span><br><span class="line">        //Message message, int i, String s, String s1, String s2</span><br><span class="line">        rabbitTemplate.setReturnCallback((message, i, s, s1, s2) -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;ReturnCallback：     &quot;+&quot;消息：&quot;+message);</span><br><span class="line">            System.out.println(&quot;ReturnCallback：     &quot;+&quot;回应码：&quot;+i);</span><br><span class="line">            System.out.println(&quot;ReturnCallback：     &quot;+&quot;回应消息：&quot;+s);</span><br><span class="line">            System.out.println(&quot;ReturnCallback：     &quot;+&quot;交换机：&quot;+s1);</span><br><span class="line">            System.out.println(&quot;ReturnCallback：     &quot;+&quot;路由键：&quot;+s2);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(&quot;RabbitTemplate配置成功&quot;);</span><br><span class="line">        return rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //重试的Template</span><br><span class="line">    @Bean</span><br><span class="line">    public RetryTemplate rabbitRetryTemplate() &#123;</span><br><span class="line">        RetryTemplate retryTemplate = new RetryTemplate();</span><br><span class="line">        // 设置监听  调用重试处理过程</span><br><span class="line">        retryTemplate.registerListener(new RetryListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public &lt;T, E extends Throwable&gt; boolean open(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback) &#123;</span><br><span class="line">                // 执行之前调用 （返回false时会终止执行）</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public &lt;T, E extends Throwable&gt; void close(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback, Throwable throwable) &#123;</span><br><span class="line">                // 重试结束的时候调用 （最后一次重试 ）</span><br><span class="line">                System.out.println(&quot;---------------最后一次调用&quot;);</span><br><span class="line"></span><br><span class="line">                return ;</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public &lt;T, E extends Throwable&gt; void onError(RetryContext retryContext, RetryCallback&lt;T, E&gt; retryCallback, Throwable throwable) &#123;</span><br><span class="line">                //  异常 都会调用</span><br><span class="line">                System.err.println(&quot;-----第&#123;&#125;次调用&quot;+retryContext.getRetryCount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        retryTemplate.setBackOffPolicy(backOffPolicyByProperties());</span><br><span class="line">        retryTemplate.setRetryPolicy(retryPolicyByProperties());</span><br><span class="line">        return retryTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ExponentialBackOffPolicy backOffPolicyByProperties() &#123;</span><br><span class="line">        ExponentialBackOffPolicy backOffPolicy = new ExponentialBackOffPolicy();</span><br><span class="line">        long maxInterval = properties.getListener().getSimple().getRetry().getMaxInterval().getSeconds();</span><br><span class="line">        long initialInterval = properties.getListener().getSimple().getRetry().getInitialInterval().getSeconds();</span><br><span class="line">        double multiplier = properties.getListener().getSimple().getRetry().getMultiplier();</span><br><span class="line">        // 重试间隔</span><br><span class="line">        backOffPolicy.setInitialInterval(initialInterval * 1000);</span><br><span class="line">        // 重试最大间隔</span><br><span class="line">        backOffPolicy.setMaxInterval(maxInterval * 1000);</span><br><span class="line">        // 重试间隔乘法策略</span><br><span class="line">        backOffPolicy.setMultiplier(multiplier);</span><br><span class="line">        return backOffPolicy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public SimpleRetryPolicy retryPolicyByProperties() &#123;</span><br><span class="line">        SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();</span><br><span class="line">        int maxAttempts = properties.getListener().getSimple().getRetry().getMaxAttempts();</span><br><span class="line">        retryPolicy.setMaxAttempts(maxAttempts);</span><br><span class="line">        return retryPolicy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、在程序中创建交换机，队列，并且绑定"><a href="#4、在程序中创建交换机，队列，并且绑定" class="headerlink" title="4、在程序中创建交换机，队列，并且绑定"></a>4、在程序中创建交换机，队列，并且绑定</h4><p>DirectRabbitConfig.java（创建direct类型的交换机）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.star.rabbitmq.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.Binding;</span><br><span class="line">import org.springframework.amqp.core.BindingBuilder;</span><br><span class="line">import org.springframework.amqp.core.DirectExchange;</span><br><span class="line">import org.springframework.amqp.core.Queue;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class DirectRabbitConfig &#123;</span><br><span class="line">    //创建一个名为TestDirectQueue的队列</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue TestDirectQueue()&#123;</span><br><span class="line">        // durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span><br><span class="line">        // exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span><br><span class="line">        // autoDelete:是否自动删除，有消息者订阅本队列，然后所有消费者都解除订阅此队列，会自动删除。</span><br><span class="line">        // arguments：队列携带的参数，比如设置队列的死信队列，消息的过期时间等等。</span><br><span class="line">        return new Queue(&quot;queues1&quot;,true);</span><br><span class="line">    &#125;</span><br><span class="line">    //创建一个名为TestDirectExchange的Direct类型的交换机</span><br><span class="line">    @Bean</span><br><span class="line">    DirectExchange TestDirectExchange()&#123;</span><br><span class="line">        // durable:是否持久化,默认是false,持久化交换机。</span><br><span class="line">        // autoDelete:是否自动删除，交换机先有队列或者其他交换机绑定的时候，然后当该交换机没有队列或其他交换机绑定的时候，会自动删除。</span><br><span class="line">        // arguments：交换机设置的参数，比如设置交换机的备用交换机（Alternate Exchange），当消息不能被路由到该交换机绑定的队列上时，会自动路由到备用交换机</span><br><span class="line">        return new DirectExchange(&quot;direct_exchange&quot;,true,false);</span><br><span class="line">    &#125;</span><br><span class="line">    //绑定交换机和队列</span><br><span class="line">    @Bean</span><br><span class="line">    Binding bindingDirect()&#123;</span><br><span class="line">        //bind队列to交换机中with路由key（routing key）</span><br><span class="line">        return BindingBuilder.bind(TestDirectQueue()).to(TestDirectExchange()).with(&quot;testQueues1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5、创建生产者测试"><a href="#5、创建生产者测试" class="headerlink" title="5、创建生产者测试"></a>5、创建生产者测试</h4><p>ProducerController.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.star.rabbitmq.test;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line">import org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/rabbitmq&quot;)</span><br><span class="line">public class ProducerController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/send&quot;)</span><br><span class="line">    public Map send() &#123;</span><br><span class="line">        String messageId = UUID.randomUUID().toString();</span><br><span class="line">         String messageData = &quot;test fanout_exchange to send queues1&quot;;</span><br><span class="line">        String current = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date());</span><br><span class="line">        Map&lt;String,Object&gt; map = new HashMap();</span><br><span class="line">        map.put(&quot;messageId&quot;,messageId);</span><br><span class="line">        map.put(&quot;data&quot;,messageData);</span><br><span class="line">        map.put(&quot;current&quot;,current);</span><br><span class="line">        rabbitTemplate.convertAndSend(&quot;fanout_exchange&quot;,&quot;&quot;,map,new CorrelationData(UUID.randomUUID().toString()));</span><br><span class="line">        Map&lt;String,Object&gt; resultData = new HashMap();</span><br><span class="line">        resultData.put(&quot;code&quot;,200);</span><br><span class="line">        resultData.put(&quot;data&quot;,&quot;发送信息成功:&quot;+messageData);</span><br><span class="line">        resultData.put(&quot;current&quot;,current);</span><br><span class="line">        System.out.println(resultData);</span><br><span class="line">        return resultData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS: </span><br><span class="line">当exchange 和 routingKey相绑定时，消息通过exchange 和 routingKey进入相对应的队列中则只会触发ConfirmCallback 不会触发ReturnCallback</span><br><span class="line">因为 exchange 和 routingKey不相互绑定所以消息无法进入队列，消费者自然也收不到消息。当时exchange是真正存在的所以消息还是会进入 exchange所以还是会触发ConfirmCallback 并且因为无法找到对应的队列所以也会触发ReturnCallback。</span><br></pre></td></tr></table></figure><h4 id="6、访问localhost-8080-rabbitmq-send推送消息到消息队列中。"><a href="#6、访问localhost-8080-rabbitmq-send推送消息到消息队列中。" class="headerlink" title="6、访问localhost:8080&#x2F;rabbitmq&#x2F;send推送消息到消息队列中。"></a>6、访问localhost:8080&#x2F;rabbitmq&#x2F;send推送消息到消息队列中。</h4><p>由于设置了消息发送确认，所以控制台会输出回调函数调用的内容。</p><p>登录RabbitMq后台查看消息情况。</p><h4 id="7、创建一个消费者，来消费队列中的消息。"><a href="#7、创建一个消费者，来消费队列中的消息。" class="headerlink" title="7、创建一个消费者，来消费队列中的消息。"></a>7、创建一个消费者，来消费队列中的消息。</h4><p>Consumer.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.star.rabbitmq.test;</span><br><span class="line"></span><br><span class="line">import com.rabbitmq.client.Channel;</span><br><span class="line">import org.springframework.amqp.core.Message;</span><br><span class="line">import org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class Consumer &#123;</span><br><span class="line"></span><br><span class="line">    @RabbitListener(bindings = &#123;@QueueBinding(</span><br><span class="line">            value = @Queue(name = &quot;queues1&quot;, durable = &quot;true&quot;),</span><br><span class="line">            exchange = @Exchange(name = &quot;fanout_exchange&quot;, durable = &quot;true&quot;, type = &quot;fanout&quot;)</span><br><span class="line">    )&#125;)</span><br><span class="line">//    @RabbitListener(queues = &quot;queues1&quot;)</span><br><span class="line">    @RabbitHandler</span><br><span class="line">    public void process(Map map , Channel channel, Message message) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;消费者接收到的消息是&quot;+map.toString());</span><br><span class="line">        //由于配置设置了手动应答，所以这里要进行一个手动应答。注意：如果设置了自动应答，这里又进行手动应答，会出现double ack，那么程序会报错。</span><br><span class="line">        /**</span><br><span class="line">        * basicAck 方法用于确认当前消息</span><br><span class="line">        * boolean multiple：是否批处理，当该参数为 true 时，则可以一次性确认 delivery_tag 小于等于传入值的所有消息。</span><br><span class="line">        * 当一个消费者向 RabbitMQ 注册后，会建立起一个 Channel ，RabbitMQ 会用 basic.deliver 方法向消费者推送消息，这个方法携带了一个 delivery tag，</span><br><span class="line">        * 它代表了 RabbitMQ 向该 Channel 投递的这条消息的唯一标识 ID，是一个单调递增的正整数，delivery tag 的范围仅限于 Channel。</span><br><span class="line">        * boolean multiple：是否批处理，当该参数为 true 时，则可以一次性确认 delivery_tag 小于等于传入值的所有消息。</span><br><span class="line">        * */</span><br><span class="line">         channel.basicAck(message.getMessageProperties().getDeliveryTag(),false);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">        * basicNack 方法用于否定当前消息。 由于 basicReject 方法一次只能拒绝一条消息，如果想批量拒绝消息，则可以使用 basicNack 方法。消费者客户端可以使用 channel.basicNack 方法来实现</span><br><span class="line">        *long deliveryTag：唯一标识 ID。</span><br><span class="line">        *boolean multiple：上面已经解释。</span><br><span class="line">        * boolean requeue：如果 requeue 参数设置为 true，则 RabbitMQ 会重新将这条消息存入队列，以便发送给下一个订阅的消费者； 如果 requeue 参数设置为 false，则 RabbitMQ 立即会还把消息从队列中移除，而不会把它发送给新的消费者。</span><br><span class="line">        */</span><br><span class="line">        //  channel.basicNack(message.getMessageProperties().getDeliveryTag(),false,false);</span><br><span class="line">        /**</span><br><span class="line">         * basicReject 方法用于明确拒绝当前的消息而不是确认。 RabbitMQ 在 2.0.0 版本开始引入 Basic.Reject 命令，消费者客户端可以调用与其对应的 channel.basicReject 方法来告诉 RabbitMQ 拒绝这个消息。</span><br><span class="line">         *long deliveryTag：唯一标识 ID。</span><br><span class="line">         * boolean requeue：上面已经解释。</span><br><span class="line">         * 如果 requeue 参数设置为 true，则 RabbitMQ 会重新将这条消息存入队列，以便发送给下一个订阅的消费者； 如果 requeue 参数设置为 false，则 RabbitMQ 立即会还把消息从队列中移除，而不会把它发送给新的消费者。</span><br><span class="line">         */</span><br><span class="line">        //  channel.basicReject(message.getMessageProperties().getDeliveryTag(),false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">消息接收确认</span><br><span class="line">消费者确认发生在监听队列的消费者处理业务失败，如：发生了异常，不符合要求的数据等，这些场景我们就需要手动处理，比如重新发送或者丢弃。</span><br><span class="line"></span><br><span class="line">RabbitMQ 消息确认机制（ACK）默认是自动确认的，自动确认会在消息发送给消费者后立即确认，但存在丢失消息的可能，如果消费端消费逻辑抛出异常，假如你用回滚了也只是保证了数据的一致性，但是消息还是丢了，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息。</span><br><span class="line"></span><br><span class="line">消息确认模式有：</span><br><span class="line"></span><br><span class="line">AcknowledgeMode.NONE：自动确认。</span><br><span class="line">AcknowledgeMode.AUTO：根据情况确认。</span><br><span class="line">AcknowledgeMode.MANUAL：手动确认。</span><br><span class="line">消费者收到消息后，手动调用 Basic.Ack 或 Basic.Nack 或 Basic.Reject 后，RabbitMQ 收到这些消息后，才认为本次投递完成。</span><br><span class="line"></span><br><span class="line">Basic.Ack 命令：用于确认当前消息。</span><br><span class="line">Basic.Nack 命令：用于否定当前消息（注意：这是AMQP 0-9-1的RabbitMQ扩展） 。</span><br><span class="line">Basic.Reject 命令：用于拒绝当前消息。</span><br><span class="line">3.1 basicAck 方法</span><br><span class="line">basicAck 方法用于确认当前消息，Channel 类中的 basicAck 方法定义如下：</span><br><span class="line"></span><br><span class="line">void basicAck(long deliveryTag, boolean multiple) throws IOException;</span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">long deliveryTag：唯一标识 ID，当一个消费者向 RabbitMQ 注册后，会建立起一个 Channel ，RabbitMQ 会用 basic.deliver 方法向消费者推送消息，这个方法携带了一个 delivery tag， 它代表了 RabbitMQ 向该 Channel 投递的这条消息的唯一标识 ID，是一个单调递增的正整数，delivery tag 的范围仅限于 Channel。</span><br><span class="line"></span><br><span class="line">boolean multiple：是否批处理，当该参数为 true 时，则可以一次性确认 delivery_tag 小于等于传入值的所有消息。</span><br><span class="line"></span><br><span class="line">3.2 basicNack 方法</span><br><span class="line">basicNack 方法用于否定当前消息。 由于 basicReject 方法一次只能拒绝一条消息，如果想批量拒绝消息，则可以使用 basicNack 方法。消费者客户端可以使用 channel.basicNack 方法来实现，方法定义如下：</span><br><span class="line"></span><br><span class="line">void basicNack(long deliveryTag, boolean multiple, boolean requeue) throws IOException;</span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">long deliveryTag：唯一标识 ID。</span><br><span class="line"></span><br><span class="line">boolean multiple：上面已经解释。</span><br><span class="line"></span><br><span class="line">boolean requeue：如果 requeue 参数设置为 true，则 RabbitMQ 会重新将这条消息存入队列，以便发送给下一个订阅的消费者； 如果 requeue 参数设置为 false，则 RabbitMQ 立即会还把消息从队列中移除，而不会把它发送给新的消费者。</span><br><span class="line"></span><br><span class="line">3.3 basicReject 方法</span><br><span class="line">basicReject 方法用于明确拒绝当前的消息而不是确认。 RabbitMQ 在 2.0.0 版本开始引入 Basic.Reject 命令，消费者客户端可以调用与其对应的 channel.basicReject 方法来告诉 RabbitMQ 拒绝这个消息。</span><br><span class="line"></span><br><span class="line">Channel 类中的basicReject 方法定义如下：</span><br><span class="line"></span><br><span class="line">void basicReject(long deliveryTag, boolean requeue) throws IOException;</span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">long deliveryTag：唯一标识 ID。</span><br><span class="line"></span><br><span class="line">boolean requeue：上面已经解释。</span><br><span class="line"></span><br><span class="line">【示例】消费者客户端实现消息接收确认。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总结：</span><br><span class="line"></span><br><span class="line">在Exchange中，有三种模式：Direct，Fanout，Topic。</span><br><span class="line">Direct模式只会将消息转发到符合绑定routing key的队列中，如果没有符合routing key的队列，那么消息会丢失。而且Direct发送的消息是唯一的，也就是说再Direct中的一个消息，最后只会发送到一个队列中被消费。</span><br><span class="line">Fanout模式会无视routing key，会把消息转发到所有绑定到该交换机上的队列中。所以Fanout中的一个消息，会转发到所有的队列中，也就是如果绑定了多个队列，那么一个相同的消息会在多个队列中。</span><br><span class="line">Topic模式有一套转发的routing key规则，只会把消息转发到符合routing key 的队列中。所以在Topic中的一个消息有可能也会被转发到多个队列中进行消费。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> RabbitMq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式调度XXL-JOB</title>
      <link href="/2023/08/15/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B0%83%E5%BA%A6XXL-JOB/"/>
      <url>/2023/08/15/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B0%83%E5%BA%A6XXL-JOB/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式调度XXL-JOB"><a href="#分布式调度XXL-JOB" class="headerlink" title="分布式调度XXL-JOB"></a>分布式调度XXL-JOB</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1什么是任务调度"><a href="#1-1什么是任务调度" class="headerlink" title="1.1什么是任务调度"></a>1.1什么是任务调度</h3><p>我们可以思考一下下面业务场景的解决方案:</p><ul><li>某电商平台需要每天上午10点，下午3点，晚上8点发放一批优惠券</li><li>某银行系统需要在信用卡到期还款日的前三天进行短信提醒</li><li>某财务系统需要在每天凌晨0:10分结算前一天的财务数据，统计汇总</li></ul><p>以上场景就是任务调度所需要解决的问题</p><p><strong>任务调度是为了自动完成特定任务，在约定的特定时刻去执行任务的过程</strong></p><h3 id="1-2-为什么需要分布式调度"><a href="#1-2-为什么需要分布式调度" class="headerlink" title="1.2 为什么需要分布式调度"></a>1.2 为什么需要分布式调度</h3><p>使用Spring中提供的注解@Scheduled，也能实现调度的功能</p><p>在业务类中方法中贴上这个注解,然后在启动类上贴上<code>@EnableScheduling</code>注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = &quot;0/20 * * * * ? &quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">//doSomething   </span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>感觉Spring给我们提供的这个注解可以完成任务调度的功能，好像已经完美解决问题了，为什么还需要分布式呢?</p><p>主要有如下这几点原因:</p><ol><li>高可用：单机版的定式任务调度只能在一台机器上运行，如果程序或者系统出现异常就会导致功能不可用。</li><li>防止重复执行: 在单机模式下，定时任务是没什么问题的。但当我们部署了多台服务，同时又每台服务又有定时任务时，若不进行合理的控制在同一时间，只有一个定时任务启动执行，这时，定时执行的结果就可能存在混乱和错误了</li><li>单机处理极限：原本1分钟内需要处理1万个订单，但是现在需要1分钟内处理10万个订单；原来一个统计需要1小时，现在业务方需要10分钟就统计出来。你也许会说，你也可以多线程、单机多进程处理。的确，多线程并行处理可以提高单位时间的处理效率，但是单机能力毕竟有限（主要是CPU、内存和磁盘），始终会有单机处理不过来的情况。</li></ol><h3 id="1-3-XXL-JOB介绍"><a href="#1-3-XXL-JOB介绍" class="headerlink" title="1.3 XXL-JOB介绍"></a>1.3 XXL-JOB介绍</h3><p>XXL-Job：是大众点评的分布式任务调度平台，是一个轻量级分布式任务调度平台, 其核心设计目标是开发迅速、学习简单、轻量级、易扩展</p><p>大众点评目前已接入XXL-JOB，该系统在内部已调度约100万次，表现优异。</p><p>目前已有多家公司接入xxl-job，包括比较知名的大众点评，京东，优信二手车，360金融 (360)，联想集团 (联想)，易信 (网易)等等</p><p>官网地址 <a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></p><p><strong>系统架构图</strong></p><p><strong>设计思想</strong></p><p>将调度行为抽象形成“调度中心”公共平台，而平台自身并不承担业务逻辑，“调度中心”负责发起调度请求。</p><p>将任务抽象成分散的JobHandler，交由“执行器”统一管理，“执行器”负责接收调度请求并执行对应的JobHandler中业务逻辑。</p><p>因此，“调度”和“任务”两部分可以相互解耦，提高系统整体稳定性和扩展性；</p><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h2><h3 id="2-1-下载源码"><a href="#2-1-下载源码" class="headerlink" title="2.1 下载源码"></a>2.1 下载源码</h3><p><strong>源码下载地址:</strong></p><p><a href="https://github.com/xuxueli/xxl-job">https://github.com/xuxueli/xxl-job</a></p><p><a href="https://gitee.com/xuxueli0323/xxl-job">https://gitee.com/xuxueli0323/xxl-job</a></p><h3 id="2-1-初始化调度数据库"><a href="#2-1-初始化调度数据库" class="headerlink" title="2.1 初始化调度数据库"></a>2.1 初始化调度数据库</h3><p>请下载项目源码并解压，获取 “调度数据库初始化SQL脚本” 并执行即可。</p><p>“调度数据库初始化SQL脚本” 位置为:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/xxl-job/doc/db/tables_xxl_job.sql</span><br></pre></td></tr></table></figure><h3 id="2-2-编译源码"><a href="#2-2-编译源码" class="headerlink" title="2.2 编译源码"></a>2.2 编译源码</h3><p>解压源码,按照maven格式将源码导入IDE, 使用maven进行编译即可，源码结构如下：</p><h3 id="2-3-配置部署调度中心"><a href="#2-3-配置部署调度中心" class="headerlink" title="2.3 配置部署调度中心"></a>2.3 配置部署调度中心</h3><h4 id="2-3-1-调度中心配置"><a href="#2-3-1-调度中心配置" class="headerlink" title="2.3.1 调度中心配置"></a>2.3.1 调度中心配置</h4><p>修改<code>xxl-job-admin</code>项目的配置文件<code>application.properties</code>,把数据库账号密码配置上</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### web</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/xxl-job-admin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### actuator</span></span><br><span class="line"><span class="attr">management.server.servlet.context-path</span>=<span class="string">/actuator</span></span><br><span class="line"><span class="attr">management.health.mail.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### resources</span></span><br><span class="line"><span class="attr">spring.mvc.servlet.load-on-startup</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br><span class="line"><span class="attr">spring.resources.static-locations</span>=<span class="string">classpath:/static/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### freemarker</span></span><br><span class="line"><span class="attr">spring.freemarker.templateLoaderPath</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="attr">spring.freemarker.suffix</span>=<span class="string">.ftl</span></span><br><span class="line"><span class="attr">spring.freemarker.charset</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="attr">spring.freemarker.request-context-attribute</span>=<span class="string">request</span></span><br><span class="line"><span class="attr">spring.freemarker.settings.number_format</span>=<span class="string">0.##########</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### mybatis</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mybatis-mapper/*Mapper.xml</span></span><br><span class="line"><span class="comment">#mybatis.type-aliases-package=com.xxl.job.admin.core.model</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, datasource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://192.168.202.200:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">WolfCode_2017</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### datasource-pool</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.minimum-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.auto-commit</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.idle-timeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.pool-name</span>=<span class="string">HikariCP</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.max-lifetime</span>=<span class="string">900000</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.connection-timeout</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.connection-test-query</span>=<span class="string">SELECT 1</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.validation-timeout</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, email</span></span><br><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="attr">spring.mail.port</span>=<span class="string">25</span></span><br><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.from</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">xxx</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, access token</span></span><br><span class="line"><span class="attr">xxl.job.accessToken</span>=<span class="string">default_token</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, i18n (default is zh_CN, and you can choose &quot;zh_CN&quot;, &quot;zh_TC&quot; and &quot;en&quot;)</span></span><br><span class="line"><span class="attr">xxl.job.i18n</span>=<span class="string">zh_CN</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## xxl-job, triggerpool max size</span></span><br><span class="line"><span class="attr">xxl.job.triggerpool.fast.max</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">xxl.job.triggerpool.slow.max</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, log retention days</span></span><br><span class="line"><span class="attr">xxl.job.logretentiondays</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-部署项目"><a href="#2-3-2-部署项目" class="headerlink" title="2.3.2 部署项目"></a>2.3.2 部署项目</h4><p>运行<code>XxlJobAdminApplication</code>程序即可.</p><p>调度中心访问地址: <a href="http://localhost:8080/xxl-job-admin">http://localhost:8080/xxl-job-admin</a></p><p>默认登录账号 “admin&#x2F;123456”, 登录后运行界面如下图所示。</p><p>至此“调度中心”项目已经部署成功。</p><h3 id="2-4-配置部署执行器项目"><a href="#2-4-配置部署执行器项目" class="headerlink" title="2.4 配置部署执行器项目"></a>2.4 配置部署执行器项目</h3><h4 id="2-4-1-添加Maven依赖"><a href="#2-4-1-添加Maven依赖" class="headerlink" title="2.4.1 添加Maven依赖"></a>2.4.1 添加Maven依赖</h4><p>创建SpringBoot项目并且添加如下依赖:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-执行器配置"><a href="#2-4-2-执行器配置" class="headerlink" title="2.4.2 执行器配置"></a>2.4.2 执行器配置</h4><p>在配置文件中添加如下配置:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 调度中心部署根地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；</span></span><br><span class="line"><span class="attr">xxl.job.admin.addresses</span>=<span class="string">http://127.0.0.1:8080/xxl-job-admin</span></span><br><span class="line"><span class="comment">### 执行器通讯TOKEN [选填]：非空时启用；</span></span><br><span class="line"><span class="attr">xxl.job.accessToken</span>=<span class="string">default_token</span></span><br><span class="line"><span class="comment">### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span><br><span class="line"><span class="attr">xxl.job.executor.appname</span>=<span class="string">xxl-job-executor-sample</span></span><br><span class="line"><span class="comment">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span><br><span class="line"><span class="attr">xxl.job.executor.address</span>=<span class="string"></span></span><br><span class="line"><span class="comment">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span></span><br><span class="line"><span class="attr">xxl.job.executor.ip</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment">### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span></span><br><span class="line"><span class="attr">xxl.job.executor.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="comment">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span><br><span class="line"><span class="attr">xxl.job.executor.logpath</span>=<span class="string">/data/applogs/xxl-job/jobhandler</span></span><br><span class="line"><span class="comment">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span><br><span class="line"><span class="attr">xxl.job.executor.logretentiondays</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure><h4 id="2-4-3-添加执行器配置"><a href="#2-4-3-添加执行器配置" class="headerlink" title="2.4.3 添加执行器配置"></a>2.4.3 添加执行器配置</h4><p>创建<code>XxlJobConfig</code>配置对象:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxlJobConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String adminAddresses;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appname;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String logPath;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> logRetentionDays;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> XxlJobSpringExecutor <span class="title function_">xxlJobExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">XxlJobSpringExecutor</span> <span class="variable">xxlJobSpringExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XxlJobSpringExecutor</span>();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line">        <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-添加任务处理类"><a href="#2-4-4-添加任务处理类" class="headerlink" title="2.4.4 添加任务处理类"></a>2.4.4 添加任务处理类</h4><p>添加任务处理类，交给Spring容器管理，在处理方法上贴上<code>@XxlJob</code>注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleXxlJob</span> &#123;</span><br><span class="line">    <span class="meta">@XxlJob(&quot;demoJobHandler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demoJobHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行定时任务,执行时间:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-运行HelloWorld程序"><a href="#2-5-运行HelloWorld程序" class="headerlink" title="2.5 运行HelloWorld程序"></a>2.5 运行HelloWorld程序</h3><h4 id="2-5-1-任务配置-触发执行"><a href="#2-5-1-任务配置-触发执行" class="headerlink" title="2.5.1 任务配置&amp;触发执行"></a>2.5.1 任务配置&amp;触发执行</h4><p>登录调度中心,在任务管理中新增任务,配置内容如下:</p><p>新增后界面如下:</p><p>接着启动定时调度任务</p><h4 id="2-5-2-查看日志"><a href="#2-5-2-查看日志" class="headerlink" title="2.5.2 查看日志"></a>2.5.2 查看日志</h4><p>在调度中心的调度日志中就可以看到，任务的执行结果.</p><p>管控台也可以看到任务的执行信息.</p><h3 id="2-6-GLUE模式-Java"><a href="#2-6-GLUE模式-Java" class="headerlink" title="2.6 GLUE模式(Java)"></a>2.6 GLUE模式(Java)</h3><p>任务以源码方式维护在调度中心，支持通过Web IDE在线更新，实时编译和生效，因此不需要指定JobHandler。</p><p>（ “GLUE模式(Java)” 运行模式的任务实际上是一段继承自IJobHandler的Java类代码，它在执行器项目中运行，可使用<a href="https://github.com/Resource">@Resource</a>&#x2F;<a href="https://github.com/Autowire">@Autowire</a>注入执行器里中的其他服务.</p><p><strong>添加Service</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行MethodA的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行MethodB的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加任务配置</strong></p><p><strong>通过GLUE IDE在线编辑代码</strong></p><hr><p>编写内容如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxl.job.service.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wolfcode.xxljobdemo.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.IJobHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoGlueJobHandler</span> <span class="keyword">extends</span> <span class="title class_">IJobHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        helloService.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动并执行程序</strong></p><h3 id="2-6-执行器集群"><a href="#2-6-执行器集群" class="headerlink" title="2.6 执行器集群"></a>2.6 执行器集群</h3><h4 id="2-6-1-集群环境搭建"><a href="#2-6-1-集群环境搭建" class="headerlink" title="2.6.1 集群环境搭建"></a>2.6.1 集群环境搭建</h4><p>在IDEA中设置SpringBoot项目运行开启多个集群</p><p>启动两个SpringBoot程序,需要修改Tomcat端口和执行器端口</p><ul><li><p>Tomcat端口8090程序的命令行参数如下:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Dserver.port=8090 -Dxxl.job.executor.port=9998</span><br></pre></td></tr></table></figure></li><li><p>Tomcat端口8090程序的命令行参数如下:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-Dserver.port=8091 -Dxxl.job.executor.port=9999</span><br></pre></td></tr></table></figure></li></ul><p>在任务管理中，修改路由策略，修改成<code>轮询</code></p><p>重新启动,我们可以看到效果是,定时任务会在这两台机器中进行轮询的执行</p><ul><li><p>8090端口的控制台日志如下:</p></li><li><p>8091端口的控制台日志如下:</p></li></ul><h4 id="2-6-2-调度路由算法讲解"><a href="#2-6-2-调度路由算法讲解" class="headerlink" title="2.6.2 调度路由算法讲解"></a>2.6.2 调度路由算法讲解</h4><p>当执行器集群部署时，提供丰富的路由策略，包括:</p><ol><li><p><code>FIRST（第一个）：固定选择第一个机器</code></p></li><li><p><code>LAST（最后一个）：固定选择最后一个机器；</code></p></li><li><p><code>ROUND（轮询）：依次的选择在线的机器发起调度</code></p></li><li><p><code>RANDOM（随机）：随机选择在线的机器；</code></p></li><li><p><code>CONSISTENT_HASH（一致性HASH）：</code></p><p><code>每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。</code></p></li><li><p><code>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；</code></p></li><li><p><code>LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举；</code></p></li><li><p><code>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；</code></p></li><li><p><code>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</code></p></li><li><p><code>SHARDING_BROADCAST(分片广播)：</code></p><p><code>广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</code></p></li></ol><h2 id="3-分片功能讲解"><a href="#3-分片功能讲解" class="headerlink" title="3. 分片功能讲解"></a>3. 分片功能讲解</h2><h3 id="3-1-案例需求讲解"><a href="#3-1-案例需求讲解" class="headerlink" title="3.1 案例需求讲解"></a>3.1 案例需求讲解</h3><p>需求:我们现在实现这样的需求，在指定节假日，需要给平台的所有用户去发送祝福的短信.</p><h4 id="3-1-1-初始化数据"><a href="#3-1-1-初始化数据" class="headerlink" title="3.1.1 初始化数据"></a>3.1.1 初始化数据</h4><p>在数据库中导入<code>xxl_job_demo.sql</code>数据</p><h4 id="3-1-2-集成Druid-MyBatis"><a href="#3-1-2-集成Druid-MyBatis" class="headerlink" title="3.1.2 集成Druid&amp;MyBatis"></a>3.1.2 集成Druid&amp;MyBatis</h4><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>添加配置</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/xxl_job_demo?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">WolfCode_2017</span></span><br></pre></td></tr></table></figure><p><strong>添加实体类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMobilePlan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;<span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;<span class="comment">//昵称</span></span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">//手机号码</span></span><br><span class="line">    <span class="keyword">private</span> String info;<span class="comment">//备注</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加Mapper处理类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMobilePlanMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user_mobile_plan&quot;)</span></span><br><span class="line">    List&lt;UserMobilePlan&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-业务功能实现"><a href="#3-1-3-业务功能实现" class="headerlink" title="3.1.3 业务功能实现"></a>3.1.3 业务功能实现</h4><p><strong>任务处理方法实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XxlJob(&quot;sendMsgHandler&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsgHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    List&lt;UserMobilePlan&gt; userMobilePlans = userMobilePlanMapper.selectAll();</span><br><span class="line">    System.out.println(<span class="string">&quot;任务开始时间:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>()+<span class="string">&quot;,处理任务数量:&quot;</span>+userMobilePlans.size());</span><br><span class="line">    <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    userMobilePlans.forEach(item-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//模拟发送短信动作</span></span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;任务结束时间:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(<span class="string">&quot;任务耗时:&quot;</span>+(System.currentTimeMillis()-startTime)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任务配置信息</strong></p><h3 id="3-2-分片概念讲解"><a href="#3-2-分片概念讲解" class="headerlink" title="3.2 分片概念讲解"></a>3.2 分片概念讲解</h3><p>比如我们的案例中有2000+条数据，如果不采取分片形式的话，任务只会在一台机器上执行，这样的话需要20+秒才能执行完任务.</p><p>如果采取分片广播的形式的话，一次任务调度将会广播触发对应集群中所有执行器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</p><p>获取分片参数方式:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可参考Sample示例执行器中的示例任务&quot;ShardingJobHandler&quot;了解试用 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">shardIndex</span> <span class="operator">=</span> XxlJobHelper.getShardIndex();</span><br><span class="line"><span class="type">int</span> <span class="variable">shardTotal</span> <span class="operator">=</span> XxlJobHelper.getShardTotal();</span><br></pre></td></tr></table></figure><p>通过这两个参数，我们可以通过求模取余的方式，分别查询，分别执行，这样的话就可以提高处理的速度.</p><p>之前2000+条数据只在一台机器上执行需要20+秒才能完成任务，分片后，有两台机器可以共同完成2000+条数据，每台机器处理1000+条数据，这样的话只需要10+秒就能完成任务</p><h3 id="3-3-案例改造成任务分片"><a href="#3-3-案例改造成任务分片" class="headerlink" title="3.3 案例改造成任务分片"></a>3.3 案例改造成任务分片</h3><p><strong>Mapper增加查询方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMobilePlanMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user_mobile_plan where mod(id,#&#123;shardingTotal&#125;)=#&#123;shardingIndex&#125;&quot;)</span></span><br><span class="line">    List&lt;UserMobilePlan&gt; <span class="title function_">selectByMod</span><span class="params">(<span class="meta">@Param(&quot;shardingIndex&quot;)</span> Integer shardingIndex,<span class="meta">@Param(&quot;shardingTotal&quot;)</span>Integer shardingTotal)</span>;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user_mobile_plan&quot;)</span></span><br><span class="line">    List&lt;UserMobilePlan&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任务类方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@XxlJob(&quot;sendMsgShardingHandler&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsgShardingHandler</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;任务开始时间:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="type">int</span> <span class="variable">shardTotal</span> <span class="operator">=</span> XxlJobHelper.getShardTotal();</span><br><span class="line">    <span class="type">int</span> <span class="variable">shardIndex</span> <span class="operator">=</span> XxlJobHelper.getShardIndex();</span><br><span class="line">    List&lt;UserMobilePlan&gt; userMobilePlans = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(shardTotal==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//如果没有分片就直接查询所有数据</span></span><br><span class="line">        userMobilePlans = userMobilePlanMapper.selectAll();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        userMobilePlans = userMobilePlanMapper.selectByMod(shardIndex,shardTotal);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;处理任务数量:&quot;</span>+userMobilePlans.size());</span><br><span class="line">    <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    userMobilePlans.forEach(item-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">&quot;任务结束时间:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    System.out.println(<span class="string">&quot;任务耗时:&quot;</span>+(System.currentTimeMillis()-startTime)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任务设置</strong></p><h2 id="4-项目集成XXL-JOB"><a href="#4-项目集成XXL-JOB" class="headerlink" title="4. 项目集成XXL-JOB"></a>4. 项目集成XXL-JOB</h2>]]></content>
      
      
      <categories>
          
          <category> XXL-JOB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXL-JOB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT + EMQX消息中间件</title>
      <link href="/2023/07/08/MQTT-EMQX%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2023/07/08/MQTT-EMQX%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>MQTT + EMQX消息中间件</strong></p><p>参考</p><p><a href="https://blog.csdn.net/qq_42001932/article/details/105908465">(76条消息) mqtt协议与emqx相关使用_emqx和 mqtt的关系_Wzzzzzzp的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/5c32059bc05e">EMQX vs Mosquitto | 2023 MQTT Broker 对比 - 简书 (jianshu.com)</a></p><p><strong>emqx集群+nginx负载均衡链接</strong><a href="https://blog.csdn.net/abc_cml/article/details/127801264">https://blog.csdn.net/abc_cml/article/details/127801264</a></p><p>mqtt协议其实就是一个及时通讯协议,跟<a href="https://so.csdn.net/so/search?q=rocketMQ&spm=1001.2101.3001.7020">rocketMQ</a>类似,也可以说是一个消息中间件.</p><p>MQTT (message queuing telemetry transport) 是IBM开发的即时通讯协议，是一种发布&#x2F;订阅极其轻量级的消息传输协议，专门为网络受限设备、低宽带以及高延迟和不可靠的网络而设计的。由于以上轻量级的特点，是实现智能家居的首选传输协议，相比于XMPP，更加轻量级而且占用宽带低。</p><p>作为一个传递消息的协议,mqtt是基于一个”发布者-&gt;代理服务器-&gt;消费者”的一个流程进行的</p><p><strong>发布者 - -&gt;发布（主题）信息给代理–&gt;代理 –&gt; 代理发送信息给（订阅者）订阅了主题客户端 ，有订阅主题的才会接收到信息</strong></p><p>发布者负责消息的发布,定制好对应的消息就可以根据topic来把消息发送到服务器上,然后消费者就可以根据对应的topic来实现消息的读取,这样的一个流程就是mqtt发送消息到接收消费消息的一个过程.</p><p><strong>EMQX</strong><br>emqx是实现mqtt的一个消息中间件,当然还有别的一些实现,笔者这里没有使用过,因此就不做记录,为什么会使用到emqx作为消息中间件呢,因为目前做的一个项目上,涉及到这样一个需求:“设备接入”,外部设备接入到目前开发的系统中,并且设备接入后,要保证设备发送的数据实时存储并更新到后台界面,有一个直观的展示,所以在设备接入完成后,就需要一个渠道来实现消息的发送.我们就采用了emqx作为设备和平台数据交互的一个中间件.<br>平台是基于springboot开发的一个maven项目,关于mqtt和springboot的集成,请自行百度,网上的例子很多,这里就不进行过多的赘述.<br>值得一提的是,关于生成mqtt的bean对象的过程,因为使用了springboot,并且也没有涉及到集群相关的内容,所以直接就把mqtt的初始化对象做成了单例并放入了springboot启动的过程中(springboot启动时就保证mqtt也注册到相应的服务器上),下面给出代码</p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration//使用@Configuration 的注解类表示这个类可以使用 Spring IoC容器作为bean 定义的来源</span><br><span class="line">public class MqttConfig &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代理服务器ip地址</span><br><span class="line">     */</span><br><span class="line">    @Value(&quot;$&#123;mqtt.url&#125;&quot;)//都是直接从配置文件中读数据(不会请自行百度)</span><br><span class="line">    public String MQTT_BROKER_HOST;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * qos</span><br><span class="line">     */</span><br><span class="line">    @Value(&quot;$&#123;mqtt.qos&#125;&quot;)</span><br><span class="line">    public int QOS;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * topic</span><br><span class="line">     */</span><br><span class="line">    private static final String TOPIC = &quot;xxxx/#&quot;;//topic  前缀可自定义  &quot;/&quot;可作为分隔符  &quot;#&quot;代表接收所有的数据</span><br><span class="line"></span><br><span class="line">    @Bean//@Bean注解告诉 Spring,一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean</span><br><span class="line">    public void startMqttPushClient() &#123;</span><br><span class="line">        MqttPushClient.MQTT_HOST = MQTT_BROKER_HOST;</span><br><span class="line">        MqttPushClient.MQTT_CLIENTID = System.currentTimeMillis() + &quot;&quot;;</span><br><span class="line">        MqttPushClient instance = MqttPushClient.getInstance();</span><br><span class="line">        instance.subscribe(TOPIC, QOS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MqttPushClient &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger log = LoggerFactory.getLogger(MqttPushClient.class);</span><br><span class="line">    public static String MQTT_HOST = &quot;&quot;;</span><br><span class="line">    public static String MQTT_CLIENTID = &quot;&quot;;</span><br><span class="line">    public static String MQTT_USERNAME = &quot;&quot;;</span><br><span class="line">    public static String MQTT_PASSWORD = &quot;&quot;;</span><br><span class="line">    public static int MQTT_TIMEOUT = 10;</span><br><span class="line">    public static int MQTT_KEEPALIVE = 10;</span><br><span class="line"></span><br><span class="line">    private MqttClient client;</span><br><span class="line">    private static volatile MqttPushClient mqttClient = null;</span><br><span class="line"></span><br><span class="line">//获得实例(单例)</span><br><span class="line">    public static MqttPushClient getInstance() &#123;</span><br><span class="line">        if (mqttClient == null) &#123;</span><br><span class="line">            synchronized (MqttPushClient.class) &#123;</span><br><span class="line">                if (mqttClient == null) &#123;</span><br><span class="line">                    mqttClient = new MqttPushClient();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return mqttClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private MqttPushClient() &#123;</span><br><span class="line">        log.info(&quot;Connect MQTT: &quot; + this);</span><br><span class="line">        connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void connect() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            client = new MqttClient(MQTT_HOST, MQTT_CLIENTID, new MemoryPersistence());</span><br><span class="line">            MqttConnectOptions option = new MqttConnectOptions();</span><br><span class="line">            option.setCleanSession(true);</span><br><span class="line">            // 设置用户名</span><br><span class="line">//            option.setUserName(MQTT_USERNAME);</span><br><span class="line">            // 设置密码</span><br><span class="line">//            option.setPassword(MQTT_PASSWORD.toCharArray());</span><br><span class="line">            option.setConnectionTimeout(MQTT_TIMEOUT);</span><br><span class="line">            option.setKeepAliveInterval(MQTT_KEEPALIVE);</span><br><span class="line">            option.setAutomaticReconnect(true);</span><br><span class="line">            try &#123;</span><br><span class="line">                client.setCallback(new MqttPushCallback());//回调</span><br><span class="line">                client.connect(option);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 订阅某个主题 qos默认为1</span><br><span class="line">     *</span><br><span class="line">     * @param topic</span><br><span class="line">     */</span><br><span class="line">    public void subscribe(String topic) &#123;</span><br><span class="line">        subscribe(topic, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 订阅某个主题</span><br><span class="line">     *</span><br><span class="line">     * @param topic</span><br><span class="line">     * @param qos</span><br><span class="line">     */</span><br><span class="line">    public void subscribe(String topic, int qos) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            client.subscribe(topic, qos);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="callback-mqtt回调"><a href="#callback-mqtt回调" class="headerlink" title="callback mqtt回调"></a>callback mqtt回调</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MqttPushCallback implements MqttCallback &#123;//一定要实现MqttCallback接口</span><br><span class="line"></span><br><span class="line">    private static final Logger log = LoggerFactory.getLogger(MqttPushCallback.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void connectionLost(Throwable cause) &#123;</span><br><span class="line">        log.info(&quot;连接断开,正在尝试重新连接&quot;);</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void deliveryComplete(IMqttDeliveryToken token) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 处理接收到的消息</span><br><span class="line">     *</span><br><span class="line">     * @param topic</span><br><span class="line">     * @param message</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void messageArrived(String topic, MqttMessage message) throws Exception &#123;</span><br><span class="line">         //接收到订阅的消息+topic  可以在这里进行消息的逻辑处理</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> EMQX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EMQX-mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EMQX在centos 7 安装集群 +nginx 负载均衡</title>
      <link href="/2023/07/05/EMQX%E5%9C%A8centos-7-%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2023/07/05/EMQX%E5%9C%A8centos-7-%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4-nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>EMQX在centos 7 安装集群 +nginx 负载均衡</strong></p><p>EMQX官网文档：<a href="https://docs.emqx.com/zh/enterprise/v4.3/getting-started/command-line.html">基本命令 | EMQX 企业版 4.3 文档</a></p><p>版本安装 ：<a href="https://www.emqx.com/en/downloads/broker">Directory listing for broker: &#x2F; | EMQ (emqx.com)</a></p><p>EMQX开源版不要用企业版<a href="https://www.emqx.com/zh/try?product=broker">免费下载、试用 EMQ 产品 (emqx.com)</a></p><p>参考</p><p><a href="https://blog.csdn.net/qq_17833651/article/details/111884226">(76条消息) Centos7搭建EMQ MQTT服务器_域名18083进不去_Kongbai_w的博客-CSDN博客</a></p><p><a href="https://tool.4xseo.com/a/31808.html">CentOS7安装emq,centos7安装rust - 开发者博客 (4xseo.com)</a></p><p><a href="https://blog.csdn.net/abc_cml/article/details/127801264">(76条消息) emqx集群+nginx负载均衡_emqx nginx_summenger的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/web18224617243/article/details/126601342">(76条消息) 查看Linux系统是UBUNTU还是CentOS的方法_查看linux是centos_普通网友的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/afei8080/article/details/128732770">(76条消息) Linux系统查看版本、位数（32位或64位）、架构（arm或amd）的命令_linux查看arm型号_令狐飞侠的博客-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0、查看是什么系统 cat /etc/issue （centos ,ubuntu）</span><br><span class="line">访问EMQX开源版  https://www.emqx.com/zh/try?product=broker  选择对应版本，点击免费下载，里面有相应安装教程</span><br><span class="line"></span><br><span class="line">https://www.emqx.com/zh/downloads-and-install?product=broker&amp;version=5.0.24&amp;os=Centos7&amp;oslabel=CentOS%207（具体版本的5.0.24）</span><br><span class="line"></span><br><span class="line">1. 下载 emqx-centos7-v4.1.5.x86_64.rpm</span><br><span class="line">wget https://www.emqx.com/zh/downloads/broker/4.1.5/emqx-centos7-v4.1.5.zip</span><br><span class="line">2.安装</span><br><span class="line">unzip emqx-centos7-v4.1.5.zip</span><br><span class="line">3.运行</span><br><span class="line">./emqx/bin/emqx start</span><br><span class="line">4.相关命令</span><br><span class="line">查看状态：   ./emqx/bin/emqx_ctl status</span><br><span class="line">停止服务     ./emqx/bin/emqx stop</span><br><span class="line">启动后会开启18083端口，有两种方式</span><br><span class="line">一种直接关闭防火墙，直接访问（不建议）</span><br><span class="line">二种 在centos 上防火墙开放18083端口，对应服务器也要开放端口</span><br><span class="line">5.打开可视化dashboard</span><br><span class="line">IP：1.12.48.115</span><br><span class="line">地址为: http://1.12.48.115:18083/ (默认账号: admin 密码: public)</span><br><span class="line">成功访问到</span><br><span class="line">6、卸载 </span><br><span class="line">sudo rm -rf /etc/emqx/ /var/log/emqx/</span><br><span class="line">//删除安装包</span><br><span class="line">rm -rf emqx-centos7-v4.1.5.zip</span><br><span class="line">//删除对应的安装的内容</span><br><span class="line">rm -rf emqx</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_37187180/article/details/114880311">(76条消息) emqx集群搭建：加入集群失败？订阅相同主题消息收不到？_emqx 集群接入报错_Monica Jia的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/liujucai/article/details/114867349">(76条消息) emqx 手动搭建emqx集群_emqx 集群只能加入两台_河上街的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_19734597/article/details/92085388">(76条消息) Centos7 EMQ集群搭建_BasicLab基础架构实验室的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> EMQX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EMQX-mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2023/05/01/docker/"/>
      <url>/2023/05/01/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-学习"><a href="#docker-学习" class="headerlink" title="docker 学习"></a>docker 学习</h1><p><a href="https://hub.docker.com/search?q=&type=image&image_filter=official">Explore Docker’s Container Image Repository | Docker Hub</a></p><p>官方文档：<a href="https://docs.docker.com/engine/install/centos/">在 CentOS 上安装 Docker 引擎 |Docker 文档</a></p><h3 id="centos7安装Docker"><a href="#centos7安装Docker" class="headerlink" title="centos7安装Docker"></a>centos7安装Docker</h3><p>参考</p><p><a href="https://blog.csdn.net/u014069688/article/details/100532774">Centos7下安装Docker（详细安装教程）_centos7安装docker-CSDN博客</a></p><p>1，root账户登录，查看内核版本如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# uname -a</span><br><span class="line">Linux localhost.localdomain 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 </span><br><span class="line">x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>2、2，把yum包更新到最新（温馨提示：新环境或测试环境可随意操作，生产环境酌情慎重更新）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常不需要这步，不要更新,会直接更新到Centos8的yum,那玩意已经停止更新了,你还要改配置</span><br><span class="line">[root@localhost ~]# yum update</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: centos.ustc.edu.cn</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.cn99.com</span><br><span class="line">base                                                                                                  | 3.6 kB  00:00:00     </span><br><span class="line">extras                                                                                                | 3.4 kB  00:00:00     </span><br><span class="line">updates                                                                                               | 3.4 kB  00:00:00     </span><br><span class="line">正在解决依赖关系</span><br><span class="line">--&gt; 正在检查事务</span><br><span class="line">---&gt; 软件包 NetworkManager.x86_64.1.1.12.0-6.el7 将被 升级</span><br><span class="line">---&gt; 软件包 NetworkManager.x86_64.1.1.12.0-10.el7_6 将被 更新</span><br></pre></td></tr></table></figure><p>3，安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"></span><br><span class="line"> * base: centos.ustc.edu.cn</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.cn99.com</span><br><span class="line">   软件包 device-mapper-persistent-data-0.7.3-3.el7.x86_64 已安装并且是最新版本</span><br><span class="line">   软件包 7:lvm2-2.02.180-10.el7_6.8.x86_64 已安装并且是最新版本</span><br><span class="line">   正在解决依赖关系</span><br><span class="line">   --&gt; 正在检查事务</span><br><span class="line">   ---&gt; 软件包 yum-utils.noarch.0.1.1.31-50.el7 将被 安装</span><br><span class="line">   --&gt; 正在处理依赖关系 python-kitchen，它被软件包 yum-utils-1.1.31-50.el7.noarch 需要</span><br><span class="line">   ...</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>4，设置yum源（选择其中一个）</p><p>yum-config-manager –add-repo <a href="http://download.docker.com/linux/centos/docker-ce.repo%EF%BC%88%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%EF%BC%89">http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）</a></p><p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo%EF%BC%88%E9%98%BF%E9%87%8C%E4%BB%93%E5%BA%93%EF%BC%89">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum-config-manager --add-repo </span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to </span><br><span class="line">/etc/yum.repos.d/docker-ce.repo</span><br><span class="line">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p>5，可以查看所有仓库中所有docker版本，并选择特定版本安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum list docker-ce --showduplicates | sort -r</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">可安装的软件包</span><br><span class="line"></span><br><span class="line"> * updates: mirrors.cn99.com</span><br><span class="line">   Loading mirror speeds from cached hostfile</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line">   docker-ce.x86_64            3:19.03.2-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:19.03.1-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:19.03.0-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">   docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br></pre></td></tr></table></figure><p>6，安装Docker，命令：yum install docker-ce-版本号，我选的是docker-ce-18.03.1.ce，如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install docker-ce-18.03.1.ce</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: centos.ustc.edu.cn</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.cn99.com</span><br><span class="line">正在解决依赖关系</span><br><span class="line">--&gt; 正在检查事务</span><br><span class="line">---&gt; 软件包 docker-ce.x86_64.0.18.03.1.ce-1.el7.centos 将被 安装</span><br></pre></td></tr></table></figure><p>7， 启动Docker，命令：systemctl start docker，然后加入开机启动，如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start docker</span><br><span class="line">[root@localhost ~]# systemctl enable  docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@localhost ~]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      18.03.1-ce</span><br><span class="line"> API version:  1.37</span><br><span class="line"> Go version:   go1.9.5</span><br><span class="line"> Git commit:   9ee9f40</span><br><span class="line"> Built:        Thu Apr 26 07:20:16 2018</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: false</span><br><span class="line"> Orchestrator: swarm</span><br><span class="line"> </span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:      18.03.1-ce</span><br><span class="line">  API version:  1.37 (minimum version 1.12)</span><br><span class="line">  Go version:   go1.9.5</span><br><span class="line">  Git commit:   9ee9f40</span><br><span class="line">  Built:        Thu Apr 26 07:23:58 2018</span><br><span class="line">  OS/Arch:      linux/amd64</span><br><span class="line">  Experimental: false</span><br></pre></td></tr></table></figure><p>8、doctor命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps 查看当前正在运行的容器</span><br><span class="line"></span><br><span class="line">docker ps -a 查看所有容器的状态</span><br><span class="line"></span><br><span class="line">docker start/stop id/name 启动/停止某个容器</span><br><span class="line"></span><br><span class="line">docker exec -ti id 启动一个伪终端以交互式的方式进入某个容器（使用exit退出后容器不停止运行）</span><br><span class="line"></span><br><span class="line">docker images 查看本地镜像</span><br><span class="line"></span><br><span class="line">docker rm id/name 删除某个容器</span><br><span class="line"></span><br><span class="line">docker rmi id/name 删除某个镜像</span><br><span class="line"></span><br><span class="line">docker run --name test -ti ubuntu /bin/bash  复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash</span><br><span class="line"></span><br><span class="line">docker build -t soar/centos:7.1 .  通过当前目录下的Dockerfile创建一个名为soar/centos:7.1的镜像</span><br><span class="line"></span><br><span class="line">docker run -d -p 2222:22 --name test soar/centos:7.1  以镜像soar/centos:7.1创建名为test的容器，并以后台模式运行，并做端口映射到宿主机2222端口，P参数重启容器宿主机端口会发生改变</span><br></pre></td></tr></table></figure><p>docker images 仓库搜索</p><p><a href="https://www.runoob.com/docker/docker-machine.html">Docker Machine | 菜鸟教程 (runoob.com)</a></p><p><a href="https://blog.csdn.net/weixin_47872288/article/details/120201096">(43条消息) docker出现Error response from daemon: driver failed programming external connectivity on endpoint解决方法_码农研究僧的博客-CSDN博客_utf-8</a></p><p><a href="https://www.jianshu.com/p/b9ac880e143f">基于 Docker 安装 Nginx，启动运行，外网访问，映射配置文件 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/stay_foolish12/article/details/116133822">(43条消息) 如何关闭docker容器里的进程_stay_foolish12的博客-CSDN博客_docker 关闭进程</a></p><p><a href="https://blog.csdn.net/qq_33635385/article/details/103999199">(37条消息) 【Docker】Docker服务外部无法访问_MAXLZ的博客-CSDN博客_docker容器外部无法访问</a></p><p><a href="https://blog.csdn.net/weixin_45496075/article/details/109123709">(37条消息) Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?_凌风少年z的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/tianchenglin/article/details/54375490">(43条消息) CentOs安装Docker，docker machine_走_心的博客-CSDN博客</a></p><p><a href="https://huaweicloud.csdn.net/63311c4ed3efff3090b52712.html?spm=1001.2101.3001.6650.18&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-18-121460691-blog-108691202.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-18-121460691-blog-108691202.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=23">docker容器启动成功外界却无法访问_docker_清人-DevPress官方社区 (csdn.net)</a></p><p><a href="https://blog.csdn.net/LIFENG0402/article/details/117930091">(42条消息) 解决：Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?_番茄牛腩不吃番茄的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/shadow_zed/article/details/103929823">(44条消息) Docker容器端口映射无法访问的问题排查_shadow_zed的博客-CSDN博客_docker端口映射访问不到</a></p><p><a href="https://www.runoob.com/docker/docker-top-command.html">Docker top 命令 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://www.jianshu.com/p/50b635ab05e4">Docker容器运行&#x2F;后台运行、终止、删除、 - 简书 (jianshu.com)</a></p><p>docker 启动        <strong>systemctl start docker</strong></p><p>docker 状态        <strong>systemctl status docker</strong></p><p>开机自启动docker     <strong>systemctl enable docker</strong></p><p><a href="https://blog.csdn.net/qq_24211837/article/details/120549938">(46条消息) 退出Docker后保持继续运行的解决办法 docker结束但不退出 docker退出后继续运行系统__刘文凯_的博客-CSDN博客_docker退出容器保持运行</a></p><p>输入【pgrep 进程名称】即可获取到pid列表。（ 例如：pgrep java）</p><hr><p>使用【ps】命令查看进程pid。（ 例如：ps -ef|grep java</p><p>​      -e：显示所有进程。</p><p>​      -f ：做一个更为完整的输出。</p><p>​      |  管道</p><p>​      grep xxxx 筛选出xxxx的进程。）</p><hr><p>使用【top】命令查看进程pid。</p><p>​      在命令行输入：top 按下回车键即可。</p><p>​      【ctrl+c】是退出top界面。</p><hr><p>通过【ls &#x2F;proc】命令查看进程pid。</p><p>​      Linux在启动一个进程时，系统会在&#x2F;proc下创建一个以PID命名的文件       夹。</p><p>​      每一个数字文件夹就是对应的一个进程pid。</p><hr><p>查出需要关闭的进程ID后，使用命令【pkill -9 进程ID】即可删除关闭进程。</p><p>例如:pkill -9 29944</p><hr><p><a href="https://www.cnblogs.com/vipsoft/p/12447059.html">Docker 删除 images - VipSoft - 博客园 (cnblogs.com)</a></p><p>注意：想要删除镜像，必须要让有用到他的容器先停止，然后再删除，删除完之后确保没有其它容器在用之后，才能去删除镜像</p><p>docker images   查看镜像</p><p>docker ps -a  查看所有容器    看看要删除哪个镜像，然后去容器有谁在用这个</p><p>docker stop 容器的id</p><p>docker rm 容器的id</p><p>最后 docker rmi 镜像的id</p><hr><p><a href="https://www.twle.cn/l/yufei/docker/docker-basic-container-top.html">Docker top 查看容器进程 - Docker 基础教程 - 简单教程，简单编程 (twle.cn)</a></p><hr><p><a href="https://www.jianshu.com/p/b9ac880e143f">基于 Docker 安装 Nginx，启动运行，外网访问，映射配置文件 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/a21e8e8e54dd">CentOS docker 搭建nginx访问宿主机端口报错curl: (56) Recv failure: Connection reset by peer - 简书 (jianshu.com)</a></p><p>[Docker外部访问容器_w3cschool](<a href="https://www.w3cschool.cn/reqsgr/is3f2ozt.html#:~:text=Docker%E5%A4%96%E9%83%A8%E8%AE%BF%E9%97%AE%E5%AE%B9%E5%99%A8">https://www.w3cschool.cn/reqsgr/is3f2ozt.html#:~:text=Docker外部访问容器</a> 2018-08-04 17%3A56 更新 容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或,-p 参数来指定端口映射。 当使用 -P 标记时，Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口。)</p><p>docker 端口暴露问题</p><p>docker run -d –name nginx22 -p 666:80 nginx</p><p>举例 nginx 默认端口是 80   将本机的666端口 映射到 80 端口</p><p>docker ps nginx22</p><p>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES<br>cab9d0fb5511        nginx               “&#x2F;docker-entrypoin…”   27 minutes ago      Up 9 minutes        0.0.0.0:666-&gt;80&#x2F;tcp   nginx22</p><p><em>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</em></p><p><em>当使用 -P 标记时，Docker 会随机映射一个 <code>49000~49900</code> 的端口到内部容器开放的网络端口。</em></p><p><em>使用 <code>docker ps</code> 可以看到，本地主机的 666 被映射到了容器的 80 端口。此时访问本机的666 端口即可访问容器内 web 应用提供的界面。</em></p><p>但是腾讯云阿里云的服务器需要先通过安全组，也就是在服务器的界面上添加一个666可以让人访问的端口，这样子就可以访问了</p><p>服务器的ip是    1.12.48.115</p><p>外部访问则  <a href="http://1.12.48.115:666/">http://1.12.48.115:666/</a></p><p>成功访问到</p><hr><p>docker 启动运行  tomcat</p><p>[Docker安装 Tomcat - 腾讯云开发者社区-腾讯云 (tencent.com)](<a href="https://cloud.tencent.com/developer/article/1907376#:~:text=docker">https://cloud.tencent.com/developer/article/1907376#:~:text=docker</a> pull,tomcat（若不在tomcat后面指定版本默认是最新版本，若需要指定版本则例如：docker pull tomcat%3A9.0）)</p><p><a href="https://blog.csdn.net/bigpenga/article/details/109201421">(46条消息) 解决docker内tomcat容器启动成功后，无法访问tomcat页面(404)问题_bigpenga的博客-CSDN博客</a></p><hr><p><a href="https://blog.csdn.net/weixin_42459563/article/details/80924634">(47条消息) docker部署mysql 实现远程连接_眼沉沉的博客-CSDN博客_docker 连接mysql</a></p><p><a href="https://blog.csdn.net/qq_43781399/article/details/112650755">(47条消息) Docker配置MySQL容器+远程连接（全流程）_卷、就硬卷的博客-CSDN博客_mysql容器远程访问</a></p><p><a href="https://cloud.tencent.com/developer/article/1923521">docker安装mysql - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpClient.md</title>
      <link href="/2023/02/12/HttpClient-md/"/>
      <url>/2023/02/12/HttpClient-md/</url>
      
        <content type="html"><![CDATA[<h1 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h1><p>参考</p><p><a href="https://blog.csdn.net/yangsf_/article/details/124527687">HttpClient基本使用-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq1192360489/article/details/108050253">Java使用代码调用接口(HttpClient详细使用示例)_java httpclient-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/2185684">日常开发必备神器 HttpUtil 分享（超详细）-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><hr><h3 id="一、初识HttpClient"><a href="#一、初识HttpClient" class="headerlink" title="一、初识HttpClient"></a>一、初识HttpClient</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</span><br><span class="line">就是用来发送http请求或者解析http响应的。</span><br></pre></td></tr></table></figure><h3 id="二、HttpClient请求"><a href="#二、HttpClient请求" class="headerlink" title="二、HttpClient请求"></a>二、HttpClient请求</h3><p>当然在使用之前，需要导包，使用maven（不使用maven就要自己取下jar包，apache官网就有）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">往对象中添加相关参数</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpcore&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.4.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">本人引入此依赖的目的是，在后续示例中，会用到“将对象转化为json字符串的功能”，也可以引其他有此功能的依赖。</span><br><span class="line">注：SpringBoot的基本依赖配置，这里就不再多说了。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">包导入之后，一般分为六步：</span><br><span class="line"></span><br><span class="line">创建HttpClient实例</span><br><span class="line">创建某种连接方法的实例</span><br><span class="line">调用HttpClient实例的execute方法来执行请求方法</span><br><span class="line">读取response</span><br><span class="line">释放连接，无论执行方法是否成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * httpclient使用步骤</span><br><span class="line"> * 1、创建一个HttpClient对象;</span><br><span class="line"> * 2、创建一个Http请求对象并设置请求的URL，比如GET请求就创建一个HttpGet对象，POST请求就创建一个HttpPost对象;</span><br><span class="line"> * 3、如果需要可以设置请求对象的请求头参数，也可以往请求对象中添加请求参数;</span><br><span class="line"> * 4、调用HttpClient对象的execute方法执行请求;</span><br><span class="line"> * 5、获取请求响应对象和响应Entity;</span><br><span class="line"> * 6、从响应对象中获取响应状态，从响应Entity中获取响应内容;</span><br><span class="line"> * 7、关闭响应对象;</span><br><span class="line"> * 8、关闭HttpClient.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h4 id="2-1-GET请求"><a href="#2-1-GET请求" class="headerlink" title="2.1 GET请求"></a>2.1 GET请求</h4><p>我们先以GET请求为例</p><ol><li>创建HttpClient实例</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CloseableHttpClient httpClient = HttpClients.createDefault();</span><br></pre></td></tr></table></figure><p>2.创建GET请求方法实例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HttpGet httpGet = new HttpGet(&quot;http://httpbin.org/get&quot;);</span><br></pre></td></tr></table></figure><p>3.调用HttpClient实例执行GET实例，返回response</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CloseableHttpResponse response = httpClient.execute(httpGet);</span><br></pre></td></tr></table></figure><p>4.解析response</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取状态码</span><br><span class="line">int status = response.getStatusLine().getStatusCode();</span><br><span class="line">// 获取实例</span><br><span class="line">HttpEntity entity = response.getEntity();</span><br><span class="line">// 获取html</span><br><span class="line">String html = EntityUtils.toString(entity);</span><br></pre></td></tr></table></figure><p>5.释放连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">response.close();</span><br><span class="line">httpClient.close();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package star;</span><br><span class="line"></span><br><span class="line">import org.apache.http.HttpEntity;</span><br><span class="line">import org.apache.http.HttpResponse;</span><br><span class="line">import org.apache.http.client.ClientProtocolException;</span><br><span class="line">import org.apache.http.client.HttpClient;</span><br><span class="line">import org.apache.http.client.ResponseHandler;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpGet;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.DecompressingHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line">import org.w3c.dom.Document;</span><br><span class="line">import sun.plugin.dom.html.HTMLDocument;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class GetTest &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // 1. 创建HttpClient实例</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        // 2. 创建GET请求方法实例</span><br><span class="line">        HttpGet httpGet = new HttpGet();</span><br><span class="line">        // 创建一个Http请求对象并设置请求的URL，</span><br><span class="line">        URIBuilder uriBuilder = new URIBuilder(&quot;http://test.yangsf.vip&quot;);</span><br><span class="line">        //HttpGet httpGet = new HttpGet(&quot;http://test.yangsf.vip&quot;);</span><br><span class="line">        // 3. 调用HttpClient实例来执行GET请求方法，得到response</span><br><span class="line">        //List&lt;NameValuePair&gt;这个是url后面加参数，例如http://test.yangsf.vip?id=12345&amp;name=John</span><br><span class="line">        List&lt;NameValuePair&gt; nameValuePairList = new ArrayList&lt;&gt;();</span><br><span class="line">        // nameValuePairList.add(new BasicNameValuePair(key.toString(), param.get(key).toString()));</span><br><span class="line">        nameValuePairList.add(new BasicNameValuePair(&quot;id&quot;, &quot;12345&quot;));</span><br><span class="line">        nameValuePairList.add(new BasicNameValuePair(&quot;name&quot;, &quot;John&quot;));</span><br><span class="line">        uriBuilder.addParameters(nameValuePairList);</span><br><span class="line">        HttpRequestBase httpGet = httpGet.createRequest(uriBuilder);</span><br><span class="line">        CloseableHttpResponse response = httpClient.execute(httpGet);</span><br><span class="line">        // 4. 读response，判断是否访问成功 2xx表示 成功。</span><br><span class="line">        int status = response.getStatusLine().getStatusCode();</span><br><span class="line">        if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123;</span><br><span class="line">            // 对得到后的实例可以进行处理，例如读取回复体，读取html</span><br><span class="line">            //5、获取请求响应对象和响应Entity;</span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            System.out.println(response);</span><br><span class="line">            System.out.println(&quot;=======================&quot;);</span><br><span class="line">            //6、从响应对象中获取响应状态，从响应Entity中获取响应内容;</span><br><span class="line">            String html = EntityUtils.toString(entity);</span><br><span class="line">            System.out.println(html);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new ClientProtocolException(&quot;Unexpected response status: &quot; + status);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         //7、关闭响应对象;</span><br><span class="line">         response.close();</span><br><span class="line">         //8、关闭HttpClient.客户端</span><br><span class="line">         httpclient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-2-POST请求"><a href="#2-2-POST请求" class="headerlink" title="2.2 POST请求"></a>2.2 POST请求</h4><p>步骤基本上一模一样，只不过可以设置让post带上参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">httpPost.setEntity(new StringEntity(&quot;this is Post&quot;));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package star;</span><br><span class="line"></span><br><span class="line">import com.sun.xml.internal.ws.api.pipe.ContentType;</span><br><span class="line">import org.apache.http.HttpEntity;</span><br><span class="line">import org.apache.http.client.ClientProtocolException;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpPost;</span><br><span class="line">import org.apache.http.entity.StringEntity;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class PostTest &#123;</span><br><span class="line">        public static void main(String... args) throws IOException &#123;</span><br><span class="line">            // 1. 创建HttpClient实例</span><br><span class="line">            CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">            // 2. 创建HttpPost实例</span><br><span class="line">            HttpPost httpPost = new HttpPost(&quot;http://httpbin.org/post&quot;);</span><br><span class="line">            // 往对象中添加相关参数</span><br><span class="line">            //创建请求体参数</span><br><span class="line">           Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();</span><br><span class="line">           //将请求参数转成StringEntity</span><br><span class="line">            StringEntity stringEntity = new StringEntity(JSON.toJSONString(params),&quot;UTF-8&quot;);</span><br><span class="line">            httpPost.setEntity(stringEntity);</span><br><span class="line"></span><br><span class="line">            // 3. 调用HttpClient实例来执行HttpPost实例</span><br><span class="line">            CloseableHttpResponse response = httpclient.execute(httpPost);</span><br><span class="line">            // 4. 读 response</span><br><span class="line">            int status = response.getStatusLine().getStatusCode();</span><br><span class="line">            if (status &gt;= 200 &amp;&amp; status &lt; 300) &#123;</span><br><span class="line">            //5、获取请求响应对象和响应Entity;</span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line">                System.out.println(response);</span><br><span class="line">                System.out.println(&quot;===================&quot;);</span><br><span class="line">                //6、从响应对象中获取响应状态，从响应Entity中获取响应内容;</span><br><span class="line">                String html = EntityUtils.toString(entity);</span><br><span class="line">                System.out.println(html);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new ClientProtocolException(&quot;Unexpected response status: &quot; + status);</span><br><span class="line">            &#125;</span><br><span class="line">            //7、关闭响应对象;</span><br><span class="line">            response.close();</span><br><span class="line">            //8、关闭HttpClient.客户端</span><br><span class="line">            httpclient.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他请求方法比如put，delete等也是大同小异。</p><h3 id="三、HttpClient提交表单"><a href="#三、HttpClient提交表单" class="headerlink" title="三、HttpClient提交表单"></a>三、HttpClient提交表单</h3><p>提交表单一共就这几步：</p><ol><li>创建http实例</li><li>创建Post请求</li><li>设置表单参数并让Post携带</li><li>执行请求，获取响应</li><li>解析响应</li><li>关闭资源</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.http.Consts;</span><br><span class="line">import org.apache.http.HttpResponse;</span><br><span class="line">import org.apache.http.NameValuePair;</span><br><span class="line">import org.apache.http.client.HttpClient;</span><br><span class="line">import org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpPost;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.message.BasicNameValuePair;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class FormSubmitTest &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // 1. 创建HttpClient实例</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        // 2. 设置表单参数</span><br><span class="line">        List&lt;NameValuePair&gt; kv =  new ArrayList&lt;&gt;();</span><br><span class="line">        kv.add(new BasicNameValuePair(&quot;name&quot;, &quot;root&quot;));</span><br><span class="line">        kv.add(new BasicNameValuePair(&quot;password&quot;, &quot;123456&quot;));</span><br><span class="line"></span><br><span class="line">        // 3. 创建HttpPost实例</span><br><span class="line">        HttpPost httpPost = new HttpPost(&quot;http://httpbin.org/post&quot;);</span><br><span class="line"></span><br><span class="line">        // 4. 让Post携带表单参数</span><br><span class="line">        httpPost.setEntity(new UrlEncodedFormEntity(kv, Consts.UTF_8));</span><br><span class="line"></span><br><span class="line">        // 5. 获取HttpResponse响应</span><br><span class="line">        CloseableHttpResponse response = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">        // 6. 读response</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line"></span><br><span class="line">        // 7. 释放资源</span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HttpClient最基本的用法就是这些。之后可以去官方文档查阅更多的用法，比如HttpClient还可以获取证书，上传文件等等</p><h3 id="工具类1"><a href="#工具类1" class="headerlink" title="工具类1"></a>工具类1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package star.util;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.xinghuo.service.common.util.HttpClientService;</span><br><span class="line">import com.xinghuo.service.common.util.HttpRequestMethedEnum;</span><br><span class="line">import org.apache.http.HttpEntity;</span><br><span class="line">import org.apache.http.HttpEntityEnclosingRequest;</span><br><span class="line">import org.apache.http.NameValuePair;</span><br><span class="line">import org.apache.http.client.config.RequestConfig;</span><br><span class="line">import org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line">import org.apache.http.client.methods.HttpGet;</span><br><span class="line">import org.apache.http.client.methods.HttpRequestBase;</span><br><span class="line">import org.apache.http.client.utils.URIBuilder;</span><br><span class="line">import org.apache.http.entity.StringEntity;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.message.BasicNameValuePair;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.URISyntaxException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author star</span><br><span class="line"> */</span><br><span class="line">public class HttpUtil &#123;</span><br><span class="line">    private static final Logger LOGGER = LoggerFactory.getLogger(HttpClientService.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * httpclient使用步骤</span><br><span class="line">     * 1、创建一个HttpClient对象;</span><br><span class="line">     * 2、创建一个Http请求对象并设置请求的URL，比如GET请求就创建一个HttpGet对象，POST请求就创建一个HttpPost对象;</span><br><span class="line">     * 3、如果需要可以设置请求对象的请求头参数，也可以往请求对象中添加请求参数;</span><br><span class="line">     * 4、调用HttpClient对象的execute方法执行请求;</span><br><span class="line">     * 5、获取请求响应对象和响应Entity;</span><br><span class="line">     * 6、从响应对象中获取响应状态，从响应Entity中获取响应内容;</span><br><span class="line">     * 7、关闭响应对象;</span><br><span class="line">     * 8、关闭HttpClient.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    private static RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">            //从连接池中获取连接的超时时间</span><br><span class="line">            // 要用连接时尝试从连接池中获取，若是在等待了一定的时间后还没有获取到可用连接（比如连接池中没有空闲连接了）则会抛出获取连接超时异常。</span><br><span class="line">            .setConnectionRequestTimeout(15000)</span><br><span class="line">            //与服务器连接超时时间：httpclient会创建一个异步线程用以创建socket连接，此处设置该socket的连接超时时间</span><br><span class="line">            //连接目标url的连接超时时间，即客服端发送请求到与目标url建立起连接的最大时间。超时时间3000ms过后，系统报出异常</span><br><span class="line">            .setConnectTimeout(15000)</span><br><span class="line">            //socket读数据超时时间：从服务器获取响应数据的超时时间</span><br><span class="line">            //连接上一个url后，获取response的返回等待时间 ，即在与目标url建立连接后，等待放回response的最大时间，在规定时间内没有返回响应的话就抛出SocketTimeout。</span><br><span class="line">            .setSocketTimeout(15000)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送http请求</span><br><span class="line">     *</span><br><span class="line">     * @param requestMethod 请求方式（HttpGet、HttpPost、HttpPut、HttpDelete）</span><br><span class="line">     * @param url 请求路径</span><br><span class="line">     * @param params post请求参数</span><br><span class="line">     * @param header 请求头</span><br><span class="line">     * @return 响应文本</span><br><span class="line">     */</span><br><span class="line">    public static String sendHttp(HttpRequestMethedEnum requestMethod, String url, Map&lt;String, Object&gt; params, Map&lt;String, String&gt; header) throws URISyntaxException &#123;</span><br><span class="line">        //1、创建一个HttpClient对象;</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        CloseableHttpResponse httpResponse = null;</span><br><span class="line">        String responseContent = null;</span><br><span class="line">        //2、创建一个Http请求对象并设置请求的URL，比如GET请求就创建一个HttpGet对象，POST请求就创建一个HttpPost对象;</span><br><span class="line">        URIBuilder uriBuilder = new URIBuilder(url);</span><br><span class="line">        if(params != null &amp;&amp; params.size() &gt; 0 &amp;&amp; &quot;HttpGet&quot;.equals(requestMethod.name())) &#123;</span><br><span class="line">            List&lt;NameValuePair&gt; ps = getParams(params);</span><br><span class="line">            uriBuilder.addParameters(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        HttpRequestBase request = requestMethod.createRequest(uriBuilder);</span><br><span class="line">        request.setConfig(requestConfig);</span><br><span class="line">        //3、如果需要可以设置请求对象的请求头参数，也可以往请求对象中添加请求参数;</span><br><span class="line">        if (header != null) &#123;</span><br><span class="line">            for (Map.Entry&lt;String, String&gt; entry : header.entrySet()) &#123;</span><br><span class="line">                request.setHeader(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 往对象中添加相关参数</span><br><span class="line">        try &#123;</span><br><span class="line">            if (params != null &amp;&amp; params.size() &gt; 0 &amp;&amp; &quot;HttpPost&quot;.equals(requestMethod.name())) &#123;</span><br><span class="line">                //StringEntity en = new StringEntity(JSON.toJSONString(params), ContentType.create(&quot;application/json&quot;, &quot;UTF-8&quot;));</span><br><span class="line">                StringEntity en = new StringEntity(JSON.toJSONString(params),&quot;UTF-8&quot;);</span><br><span class="line">                ((HttpEntityEnclosingRequest) request).setEntity(en);</span><br><span class="line">                System.out.println(JSON.toJSONString(params));</span><br><span class="line">            &#125;</span><br><span class="line">            //4、调用HttpClient对象的execute方法执行请求;</span><br><span class="line">            httpResponse = httpClient.execute(request);</span><br><span class="line">            if(httpResponse.getStatusLine().getStatusCode() == 200) &#123;</span><br><span class="line">                //5、获取请求响应对象和响应Entity;</span><br><span class="line">                HttpEntity httpEntity = httpResponse.getEntity();</span><br><span class="line">                //6、从响应对象中获取响应状态，从响应Entity中获取响应内容;</span><br><span class="line">                if (httpEntity != null) &#123;</span><br><span class="line">                    responseContent = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //5、获取请求响应对象和响应Entity;</span><br><span class="line">                HttpEntity httpEntity = httpResponse.getEntity();</span><br><span class="line">                //6、从响应对象中获取响应状态，从响应Entity中获取响应内容;</span><br><span class="line">                if (httpEntity != null) &#123;</span><br><span class="line">                    responseContent = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                throw new NullPointerException(responseContent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //7、关闭响应对象;</span><br><span class="line">                if (httpResponse != null) &#123;</span><br><span class="line">                    httpResponse.close();</span><br><span class="line">                &#125;</span><br><span class="line">                //8、关闭HttpClient.</span><br><span class="line">                if (httpClient != null) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return responseContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static List&lt;NameValuePair&gt; getParams(Map&lt;String, Object&gt; param)&#123;</span><br><span class="line">        /**</span><br><span class="line">         * 校验参数合法性</span><br><span class="line">         */</span><br><span class="line">        boolean flag = param.size() &gt; 0;</span><br><span class="line">        if (flag) &#123;</span><br><span class="line">            List&lt;NameValuePair&gt; nameValuePairList = new ArrayList&lt;&gt;();</span><br><span class="line">            for(Object key: param.keySet())&#123;</span><br><span class="line">                nameValuePairList.add(new BasicNameValuePair(key.toString(), param.get(key).toString()));</span><br><span class="line">            &#125;</span><br><span class="line">            return nameValuePairList;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            LOGGER.error(&quot;HttpClientService-line: &#123;&#125;, errorMsg：&#123;&#125;&quot;, 197, &quot;请求参数为空且参数长度不一致&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>第二种</p><p><a href="https://cloud.tencent.com/developer/article/2185684">日常开发必备神器 HttpUtil 分享（超详细）-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><strong>一、介绍</strong></p><p>最近在工作中需要在后台调用各种上传、下载、以及第三方服务接口，经过研究决定使用 HttpClient，自己封装了一个 HttpClient 工具类，简单轻松的实现get、post、put、delete 以及上传、下载请求，在此分享给大家。</p><h4 id="二、实践应用"><a href="#二、实践应用" class="headerlink" title="二、实践应用"></a><strong>二、实践应用</strong></h4><blockquote><p>本文基于 HttpClient4.5.5 版本进行开发，也是现在最新的版本，之所以要提供版本说明，是因为 HttpClient 3 版本和 HttpClient 4 版本 API 差别还是很多大的，你把 HttpClient 3 版本的代码拿到 HttpClient 4 上面运行不起来，会报错的。所以在使用之前，一定要注意 HtppClient 的版本问题。</p></blockquote><p>话不多说，直接上代码！</p><h5 id="2-1、引用-HttpClient-依赖包"><a href="#2-1、引用-HttpClient-依赖包" class="headerlink" title="2.1、引用 HttpClient  依赖包"></a><strong>2.1、引用 HttpClient  依赖包</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpcore&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.4.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpmime&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.68&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="2-2、编写工具类（重点）"><a href="#2-2、编写工具类（重点）" class="headerlink" title="2.2、编写工具类（重点）"></a><strong>2.2、编写工具类（重点）</strong></h5><p>本次采用单利模式来初始化客户端，并用线程池来管理，同时支持<code>http</code>和<code>https</code>协议，项目启动之后，<strong>无需手动关闭</strong><code>**httpClient**</code><strong>客户端</strong>！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.apache.commons.lang3.exception.ExceptionUtils;</span><br><span class="line">import org.apache.http.HttpEntity;</span><br><span class="line">import org.apache.http.HttpEntityEnclosingRequest;</span><br><span class="line">import org.apache.http.HttpStatus;</span><br><span class="line">import org.apache.http.client.config.RequestConfig;</span><br><span class="line">import org.apache.http.client.methods.*;</span><br><span class="line">import org.apache.http.client.utils.HttpClientUtils;</span><br><span class="line">import org.apache.http.config.Registry;</span><br><span class="line">import org.apache.http.config.RegistryBuilder;</span><br><span class="line">import org.apache.http.conn.socket.ConnectionSocketFactory;</span><br><span class="line">import org.apache.http.conn.socket.PlainConnectionSocketFactory;</span><br><span class="line">import org.apache.http.conn.ssl.NoopHostnameVerifier;</span><br><span class="line">import org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line">import org.apache.http.conn.ssl.TrustStrategy;</span><br><span class="line">import org.apache.http.entity.ContentType;</span><br><span class="line">import org.apache.http.entity.StringEntity;</span><br><span class="line">import org.apache.http.entity.mime.HttpMultipartMode;</span><br><span class="line">import org.apache.http.entity.mime.MultipartEntityBuilder;</span><br><span class="line">import org.apache.http.entity.mime.content.StringBody;</span><br><span class="line">import org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line">import org.apache.http.impl.client.HttpClients;</span><br><span class="line">import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line">import org.apache.http.ssl.SSLContexts;</span><br><span class="line">import org.apache.http.util.EntityUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">public class HttpUtils &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger log = LoggerFactory.getLogger(HttpUtils.class);</span><br><span class="line"></span><br><span class="line">    private HttpUtils() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    //多线程共享实例</span><br><span class="line">    private static CloseableHttpClient httpClient;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        SSLContext sslContext = createSSLContext();</span><br><span class="line">        SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext, NoopHostnameVerifier.INSTANCE);</span><br><span class="line">        // 注册http套接字工厂和https套接字工厂</span><br><span class="line">        Registry&lt;ConnectionSocketFactory&gt; socketFactoryRegistry = RegistryBuilder.&lt;ConnectionSocketFactory&gt; create()</span><br><span class="line">                .register(&quot;http&quot;, PlainConnectionSocketFactory.INSTANCE)</span><br><span class="line">                .register(&quot;https&quot;, sslsf)</span><br><span class="line">                .build();</span><br><span class="line">        // 连接池管理器</span><br><span class="line">        PoolingHttpClientConnectionManager connMgr = new PoolingHttpClientConnectionManager(socketFactoryRegistry);</span><br><span class="line">        connMgr.setMaxTotal(300);//连接池最大连接数</span><br><span class="line">        connMgr.setDefaultMaxPerRoute(300);//每个路由最大连接数，设置的过小，无法支持大并发</span><br><span class="line">        connMgr.setValidateAfterInactivity(5 * 1000); //在从连接池获取连接时，连接不活跃多长时间后需要进行一次验证</span><br><span class="line">        // 请求参数配置管理器</span><br><span class="line">        RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(60000)</span><br><span class="line">                .setSocketTimeout(60000)</span><br><span class="line">                .setConnectionRequestTimeout(60000)</span><br><span class="line">                .build();</span><br><span class="line">        // 获取httpClient客户端</span><br><span class="line">        httpClient = HttpClients.custom()</span><br><span class="line">                .setConnectionManager(connMgr)</span><br><span class="line">                .setDefaultRequestConfig(requestConfig)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * GET请求</span><br><span class="line">     * @param url</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getUrl(String url) &#123;</span><br><span class="line">        return sendHttp(HttpMethod.GET, url, null, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * GET请求/带头部的信息</span><br><span class="line">     * @param url</span><br><span class="line">     * @param header</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getUrl(String url, Map&lt;String, String&gt; header) &#123;</span><br><span class="line">        return sendHttp(HttpMethod.GET, url, header, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * POST请求/无参数</span><br><span class="line">     * @param url</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postJson(String url) &#123;</span><br><span class="line">        return postJson(url, null, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * POST请求/有参数</span><br><span class="line">     * @param url</span><br><span class="line">     * @param param</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postJson(String url, String param) &#123;</span><br><span class="line">        return postJson(url, null, param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * POST请求/无参数带头部</span><br><span class="line">     * @param url</span><br><span class="line">     * @param header</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postJson(String url, Map&lt;String, String&gt; header) &#123;</span><br><span class="line">        return postJson(url, header, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * POST请求/有参数带头部</span><br><span class="line">     * @param url</span><br><span class="line">     * @param header</span><br><span class="line">     * @param params</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String postJson(String url, Map&lt;String, String&gt; header, String params) &#123;</span><br><span class="line">        return sendHttp(HttpMethod.POST, url, header, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传文件流</span><br><span class="line">     * @param url</span><br><span class="line">     * @param header</span><br><span class="line">     * @param param</span><br><span class="line">     * @param fileName</span><br><span class="line">     * @param inputStream</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static RequestResult postUploadFileStream(String url, Map&lt;String, String&gt; header, Map&lt;String, String&gt; param, String fileName, InputStream inputStream) &#123;</span><br><span class="line">        byte[] stream = inputStream2byte(inputStream);</span><br><span class="line">        return postUploadFileStream(url, header, param, fileName, stream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传文件</span><br><span class="line">     * @param url 上传地址</span><br><span class="line">     * @param header 请求头部</span><br><span class="line">     * @param param 请求表单</span><br><span class="line">     * @param fileName 文件名称</span><br><span class="line">     * @param stream 文件流</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static RequestResult postUploadFileStream(String url, Map&lt;String, String&gt; header, Map&lt;String, String&gt; param, String fileName, byte[] stream) &#123;</span><br><span class="line">        String infoMessage =  new StringBuilder().append(&quot;request postUploadFileStream，url:&quot;).append(url).append(&quot;，header:&quot;).append(header.toString()).append(&quot;，param:&quot;).append(JSONObject.toJSONString(param)).append(&quot;，fileName:&quot;).append(fileName).toString();</span><br><span class="line">        log.info(infoMessage);</span><br><span class="line">        RequestResult result = new RequestResult();</span><br><span class="line">        if(StringUtils.isBlank(fileName))&#123;</span><br><span class="line">            log.warn(&quot;上传文件名称为空&quot;);</span><br><span class="line">            throw new RuntimeException(&quot;上传文件名称为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(Objects.isNull(stream))&#123;</span><br><span class="line">            log.warn(&quot;上传文件流为空&quot;);</span><br><span class="line">            throw new RuntimeException(&quot;上传文件流为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseableHttpResponse response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            ContentType contentType = ContentType.MULTIPART_FORM_DATA.withCharset(&quot;UTF-8&quot;);</span><br><span class="line">            HttpPost httpPost = new HttpPost(url);</span><br><span class="line">            if (Objects.nonNull(header) &amp;&amp; !header.isEmpty()) &#123;</span><br><span class="line">                for (Map.Entry&lt;String, String&gt; entry : header.entrySet()) &#123;</span><br><span class="line">                    httpPost.setHeader(entry.getKey(), entry.getValue());</span><br><span class="line">                    if(log.isDebugEnabled())&#123;</span><br><span class="line">                        log.debug(entry.getKey() + &quot;:&quot; + entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            MultipartEntityBuilder builder = MultipartEntityBuilder.create();</span><br><span class="line">            builder.setCharset(Charset.forName(&quot;UTF-8&quot;));//使用UTF-8</span><br><span class="line">            builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);//设置浏览器兼容模式</span><br><span class="line">            if (Objects.nonNull(param) &amp;&amp; !param.isEmpty()) &#123;</span><br><span class="line">                for (Map.Entry&lt;String, String&gt; entry : param.entrySet()) &#123;</span><br><span class="line">                    if (log.isDebugEnabled()) &#123;</span><br><span class="line">                        log.debug(entry.getKey() + &quot;:&quot; + entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                    builder.addPart(entry.getKey(), new StringBody(entry.getValue(), contentType));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            builder.addBinaryBody(&quot;file&quot;,  stream, contentType, fileName);//封装上传文件</span><br><span class="line">            httpPost.setEntity(builder.build());</span><br><span class="line">            //请求执行，获取返回对象</span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            log.info(&quot;postUploadFileStream response status:&#123;&#125;&quot;, response.getStatusLine());</span><br><span class="line">            int statusCode = response.getStatusLine().getStatusCode();</span><br><span class="line">            if (statusCode == HttpStatus.SC_OK || statusCode == HttpStatus.SC_NO_CONTENT) &#123;</span><br><span class="line">                result.setSuccess(true);</span><br><span class="line">            &#125;</span><br><span class="line">            HttpEntity httpEntity = response.getEntity();</span><br><span class="line">            if (Objects.nonNull(httpEntity)) &#123;</span><br><span class="line">                String content = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">                log.info(&quot;postUploadFileStream response body:&#123;&#125;&quot;, content);</span><br><span class="line">                result.setMsg(content);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(infoMessage + &quot; failure&quot;, e);</span><br><span class="line">            result.setMsg(&quot;请求异常&quot;);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            HttpClientUtils.closeQuietly(response);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从下载地址获取文件流(如果链接出现双斜杠，请用OKHttp)</span><br><span class="line">     * @param url</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static ByteArrayOutputStream getDownloadFileStream(String url) &#123;</span><br><span class="line">        String infoMessage = new StringBuilder().append(&quot;request getDownloadFileStream，url:&quot;).append(url).toString();</span><br><span class="line">        log.info(infoMessage);</span><br><span class="line">        ByteArrayOutputStream byteOutStream = null;</span><br><span class="line">        CloseableHttpResponse response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = httpClient.execute(new HttpGet(url));</span><br><span class="line">            log.info(&quot;getDownloadFileStream response status:&#123;&#125;&quot;, response.getStatusLine());</span><br><span class="line">            int statusCode = response.getStatusLine().getStatusCode();</span><br><span class="line">            if (statusCode == HttpStatus.SC_OK) &#123;</span><br><span class="line">                //请求成功</span><br><span class="line">                HttpEntity entity = response.getEntity();</span><br><span class="line">                if (entity != null &amp;&amp; entity.getContent() != null) &#123;</span><br><span class="line">                    //复制输入流</span><br><span class="line">                    byteOutStream = cloneInputStream(entity.getContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(infoMessage + &quot; failure&quot;, e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            HttpClientUtils.closeQuietly(response);</span><br><span class="line">        &#125;</span><br><span class="line">        return byteOutStream;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 表单请求</span><br><span class="line">     * @param url 地址</span><br><span class="line">     * @param header 请求头部</span><br><span class="line">     * @param param 请求表单</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static RequestResult sendPostForm(String url, Map&lt;String, String&gt; header, Map&lt;String, String&gt; param) &#123;</span><br><span class="line">        String infoMessage =  new StringBuilder().append(&quot;request postForm，url:&quot;).append(url).append(&quot;，header:&quot;).append(JacksonUtils.toJson(header)).append(&quot;，param:&quot;).append(JacksonUtils.toJson(param)).toString();</span><br><span class="line">        if(log.isDebugEnabled())&#123;</span><br><span class="line">            log.debug(infoMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        RequestResult result = new RequestResult();</span><br><span class="line">        CloseableHttpResponse response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            HttpPost httpPost = new HttpPost(url);</span><br><span class="line">            httpPost.addHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">            if (Objects.nonNull(header) &amp;&amp; !header.isEmpty()) &#123;</span><br><span class="line">                for (Map.Entry&lt;String, String&gt; entry : header.entrySet()) &#123;</span><br><span class="line">                    httpPost.setHeader(entry.getKey(), entry.getValue());</span><br><span class="line">                    if(log.isDebugEnabled())&#123;</span><br><span class="line">                        log.debug(entry.getKey() + &quot;:&quot; + entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;&gt;();</span><br><span class="line">            if (Objects.nonNull(param) &amp;&amp; !param.isEmpty()) &#123;</span><br><span class="line">                for (Map.Entry&lt;String, String&gt; entry : param.entrySet()) &#123;</span><br><span class="line">                    if (log.isDebugEnabled()) &#123;</span><br><span class="line">                        log.debug(entry.getKey() + &quot;:&quot; + entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                    nameValuePairs.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, Charset.forName(&quot;UTF-8&quot;)));</span><br><span class="line">            //请求执行，获取返回对象</span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            if(log.isDebugEnabled())&#123;</span><br><span class="line">                log.debug(&quot;postForm response status:&#123;&#125;&quot;, response.getStatusLine());</span><br><span class="line">            &#125;</span><br><span class="line">            int statusCode = response.getStatusLine().getStatusCode();</span><br><span class="line">            if (statusCode == HttpStatus.SC_OK || statusCode == HttpStatus.SC_NO_CONTENT) &#123;</span><br><span class="line">                result.setSuccess(true);</span><br><span class="line">            &#125;</span><br><span class="line">            HttpEntity httpEntity = response.getEntity();</span><br><span class="line">            if (Objects.nonNull(httpEntity)) &#123;</span><br><span class="line">                String content = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">                if(log.isDebugEnabled())&#123;</span><br><span class="line">                    log.debug(&quot;postForm response body:&#123;&#125;&quot;, content);</span><br><span class="line">                &#125;</span><br><span class="line">                result.setMsg(content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(infoMessage + &quot; failure&quot;, e);</span><br><span class="line">            result.setMsg(&quot;请求异常&quot;);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            HttpClientUtils.closeQuietly(response);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送http请求(通用方法)</span><br><span class="line">     * @param httpMethod 请求方式（GET、POST、PUT、DELETE）</span><br><span class="line">     * @param url        请求路径</span><br><span class="line">     * @param header     请求头</span><br><span class="line">     * @param params     请求body（json数据）</span><br><span class="line">     * @return 响应文本</span><br><span class="line">     */</span><br><span class="line">    public static String sendHttp(HttpMethod httpMethod, String url, Map&lt;String, String&gt; header, String params) &#123;</span><br><span class="line">        String infoMessage = new StringBuilder().append(&quot;request sendHttp，url:&quot;).append(url).append(&quot;，method:&quot;).append(httpMethod.name()).append(&quot;，header:&quot;).append(JSONObject.toJSONString(header)).append(&quot;，param:&quot;).append(params).toString();</span><br><span class="line">        log.info(infoMessage);</span><br><span class="line">        //返回结果</span><br><span class="line">        String result = null;</span><br><span class="line">        CloseableHttpResponse response = null;</span><br><span class="line">        long beginTime = System.currentTimeMillis();</span><br><span class="line">        try &#123;</span><br><span class="line">            ContentType contentType = ContentType.APPLICATION_JSON.withCharset(&quot;UTF-8&quot;);</span><br><span class="line">            HttpRequestBase request = buildHttpMethod(httpMethod, url);</span><br><span class="line">            if (Objects.nonNull(header) &amp;&amp; !header.isEmpty()) &#123;</span><br><span class="line">                for (Map.Entry&lt;String, String&gt; entry : header.entrySet()) &#123;</span><br><span class="line">                    //打印头部信息</span><br><span class="line">                    if(log.isDebugEnabled())&#123;</span><br><span class="line">                        log.debug(entry.getKey() + &quot;:&quot; + entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                    request.setHeader(entry.getKey(), entry.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.isNotEmpty(params)) &#123;</span><br><span class="line">                if(HttpMethod.POST.equals(httpMethod) || HttpMethod.PUT.equals(httpMethod))&#123;</span><br><span class="line">                    ((HttpEntityEnclosingRequest) request).setEntity(new StringEntity(params, contentType));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            response = httpClient.execute(request);</span><br><span class="line">            HttpEntity httpEntity = response.getEntity();</span><br><span class="line">            log.info(&quot;sendHttp response status:&#123;&#125;&quot;, response.getStatusLine());</span><br><span class="line">            if (Objects.nonNull(httpEntity)) &#123;</span><br><span class="line">                result = EntityUtils.toString(httpEntity, &quot;UTF-8&quot;);</span><br><span class="line">                log.info(&quot;sendHttp response body:&#123;&#125;&quot;, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(infoMessage + &quot; failure&quot;, e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            HttpClientUtils.closeQuietly(response);//关闭返回对象</span><br><span class="line">        &#125;</span><br><span class="line">        long endTime = System.currentTimeMillis();</span><br><span class="line">        log.info(&quot;request sendHttp response time cost:&quot; + (endTime - beginTime) + &quot; ms&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 请求方法（全大些）</span><br><span class="line">     */</span><br><span class="line">    public enum HttpMethod &#123;</span><br><span class="line">        GET, POST, PUT, DELETE</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传返回结果封装</span><br><span class="line">     */</span><br><span class="line">    public static class RequestResult&#123;</span><br><span class="line">        private boolean isSuccess;//是否成功</span><br><span class="line">        private String msg;//消息</span><br><span class="line"></span><br><span class="line">        public boolean isSuccess() &#123;</span><br><span class="line">            return isSuccess;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public RequestResult setSuccess(boolean success) &#123;</span><br><span class="line">            isSuccess = success;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getMsg() &#123;</span><br><span class="line">            return msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public RequestResult setMsg(String msg) &#123;</span><br><span class="line">            this.msg = msg;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public RequestResult() &#123;</span><br><span class="line">            this.isSuccess = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 构建请求方法</span><br><span class="line">     * @param method</span><br><span class="line">     * @param url</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static HttpRequestBase buildHttpMethod(HttpMethod method, String url) &#123;</span><br><span class="line">        if (HttpMethod.GET.equals(method)) &#123;</span><br><span class="line">            return new HttpGet(url);</span><br><span class="line">        &#125; else if (HttpMethod.POST.equals(method)) &#123;</span><br><span class="line">            return new HttpPost(url);</span><br><span class="line">        &#125; else if (HttpMethod.PUT.equals(method)) &#123;</span><br><span class="line">            return new HttpPut(url);</span><br><span class="line">        &#125; else if (HttpMethod.DELETE.equals(method)) &#123;</span><br><span class="line">            return new HttpDelete(url);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置证书</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static SSLContext createSSLContext()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //信任所有,支持导入ssl证书</span><br><span class="line">            TrustStrategy acceptingTrustStrategy = (cert, authType) -&gt; true;</span><br><span class="line">            SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();</span><br><span class="line">            return sslContext;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;初始化ssl配置失败&quot;, e);</span><br><span class="line">            throw new RuntimeException(&quot;初始化ssl配置失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 复制文件流</span><br><span class="line">     * @param input</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static ByteArrayOutputStream cloneInputStream(InputStream input) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream();</span><br><span class="line">            byte[] buffer = new byte[1024];</span><br><span class="line">            int len;</span><br><span class="line">            while ((len = input.read(buffer)) &gt; -1) &#123;</span><br><span class="line">                byteOutStream.write(buffer, 0, len);</span><br><span class="line">            &#125;</span><br><span class="line">            byteOutStream.flush();</span><br><span class="line">            return byteOutStream;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.warn(&quot;copy InputStream error，&#123;&#125;&quot;, ExceptionUtils.getStackTrace(e));</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 输入流转字节流</span><br><span class="line">     * @param in</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static byte[] inputStream2byte(InputStream in) &#123;</span><br><span class="line">        ByteArrayOutputStream bos = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            bos = new ByteArrayOutputStream();</span><br><span class="line">            byte[] b = new byte[1024];</span><br><span class="line">            int n;</span><br><span class="line">            while ((n = in.read(b)) != -1) &#123;</span><br><span class="line">                bos.write(b, 0, n);</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            byte[] buffer = bos.toByteArray();</span><br><span class="line">            return buffer;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.warn(&quot;inputStream transfer byte error，&#123;&#125;&quot;, ExceptionUtils.getStackTrace(e));</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (in != null) &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                log.error(&quot;clone inputStream error&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (bos != null) &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                log.error(&quot;clone outputStream error&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String url = &quot;https://101.231.204.80:5000/gateway/api/queryTrans.do&quot;;</span><br><span class="line">        String result = postJson(url);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了上传、下载请求之外，默认封装的请求参数格式都是<code>application/json</code>，如果不够，可以根据自己的业务场景进行封装处理！</p><p>其中<code>sendHttp</code>是一个支持<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>请求的通用方法，上面介绍的<code>getUrl</code>、<code>postJosn</code>等方法，最终都会调用到这个方法！</p><h5 id="2-3、接口请求示例"><a href="#2-3、接口请求示例" class="headerlink" title="2.3、接口请求示例"></a><strong>2.3、接口请求示例</strong></h5><p>工具包封装完成之后，在代码中使用起来也非常简单，直接采用工具类方法就可以直接使用，例如下面以<code>post</code>方式请求某个接口！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    String url = &quot;https://101.231.204.80:5000/gateway/api/queryTrans.do&quot;;</span><br><span class="line">    String result= HttpUtils.postJson(url);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a><strong>三、小结</strong></h4><p>在编写工具类的时候，需要注意的地方是，尽可能保证<code>httpClient</code>客户端全局唯一，也就是采用单利模式，如果我们每次请求都初始化一个客户端，结束之后又将其关闭，在高并发的接口请求场景下，性能效率急剧下降！</p><p><code>HttpClients</code>客户端的初始化参数配置非常丰富，本文默认初始化的线程池为<code>300</code>，在实际的业务开发中，大家还可以结合自己的业务场景进行调优，具体的配置可以参考官网文档，地址：Apache HttpComponents</p>]]></content>
      
      
      <categories>
          
          <category> HttpClient </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HttpClient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot 整合 Okhttp3 并封装请求工具.md</title>
      <link href="/2023/02/12/Spring-boot-%E6%95%B4%E5%90%88-Okhttp3-%E5%B9%B6%E5%B0%81%E8%A3%85%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7-md/"/>
      <url>/2023/02/12/Spring-boot-%E6%95%B4%E5%90%88-Okhttp3-%E5%B9%B6%E5%B0%81%E8%A3%85%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7-md/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-boot-整合-Okhttp3-并封装请求工具"><a href="#Spring-boot-整合-Okhttp3-并封装请求工具" class="headerlink" title="Spring boot 整合 Okhttp3 并封装请求工具"></a>Spring boot 整合 Okhttp3 并封装请求工具</h1><p>参考：</p><p><a href="https://blog.csdn.net/hongchen006/article/details/132577012">Spring boot 整合 Okhttp3 并封装请求工具_springboot okhttp 实现http请求 工具类-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/1845545">Java封装OkHttp3工具类，用着贼舒服-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><hr><h3 id="一、-为什么要使用okHttp"><a href="#一、-为什么要使用okHttp" class="headerlink" title="一、 为什么要使用okHttp"></a>一、 为什么要使用okHttp</h3><p>OkHttp是一个高效、灵活、易于使用的HTTP客户端库，优势如下：</p><p>性能更高：OkHttp在网络请求处理上采用了异步模型，并将连接池、压缩、网络协议等多种技术应用到其中，从而提高了网络请求的效率和处理速度。</p><p>功能更强大：OkHttp支持HTTP&#x2F;2协议，可以进行数据流复用以及服务器推送。同时，OkHttp还支持GZIP压缩、连接超时设置、缓存、重试等功能，提供了非常丰富的API接口，方便开发者进行扩展和个性化定制。</p><p>使用更简单：OkHttp具有良好的API设计，可以轻松地实现网络请求的发送和响应处理。其内置了许多预定义的请求类型，如Get, Post, Head, Put, Delete等，使得开发者可以快速地进行开发。</p><p>兼容性更好：OkHttp的代码精简，运行效率高，并且兼容Android平台和Java平台，可以在各种场景下进行使用。</p><p>OkHttp作为一款成熟、稳定、易用的HTTP客户端库，拥有较高的性能和多样化的功能，已被广泛应用于移动应用开发、Web服务端开发等领域。</p><h3 id="二、-准备工作"><a href="#二、-准备工作" class="headerlink" title="二、 准备工作"></a>二、 <strong>准备工作</strong></h3><p>Maven项目在pom文件中引入jar包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- okhttp3 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.10.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.60&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>引入json是因为工具类中有些地方用到了，现在通信都流行使用json传输，也少不了要这个jar包</p><h3 id="三、-配置"><a href="#三、-配置" class="headerlink" title="三、 配置"></a>三、 配置</h3><ol><li>使用okhttp3 是很简单的，但是需要配置连接池，缓存代理等</li><li>项目配置，application.yml 文件配置</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ok:</span><br><span class="line">  http:</span><br><span class="line">    connect-timeout: 60</span><br><span class="line">    read-timeout: 60</span><br><span class="line">    write-timeout: 60</span><br><span class="line">    # 连接池中整体的空闲连接的最大数量</span><br><span class="line">    max-idle-connections: 200</span><br><span class="line">    # 连接空闲时间最多为 300 秒</span><br><span class="line">    keep-alive-duration: 300</span><br></pre></td></tr></table></figure><p>​3、添加 配置应用，连接池，缓存，代理等开启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import okhttp3.ConnectionPool;</span><br><span class="line">import okhttp3.OkHttpClient;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import javax.net.ssl.SSLContext;</span><br><span class="line">import javax.net.ssl.SSLSocketFactory;</span><br><span class="line">import javax.net.ssl.TrustManager;</span><br><span class="line">import javax.net.ssl.X509TrustManager;</span><br><span class="line">import java.security.KeyManagementException;</span><br><span class="line">import java.security.NoSuchAlgorithmException;</span><br><span class="line">import java.security.SecureRandom;</span><br><span class="line">import java.security.cert.CertificateException;</span><br><span class="line">import java.security.cert.X509Certificate;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author star</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class OkHttpConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;ok.http.connect-timeout&#125;&quot;)</span><br><span class="line">    private Integer connectTimeout;</span><br><span class="line">    @Value(&quot;$&#123;ok.http.read-timeout&#125;&quot;)</span><br><span class="line">    private Integer readTimeout;</span><br><span class="line">    @Value(&quot;$&#123;ok.http.write-timeout&#125;&quot;)</span><br><span class="line">    private Integer writeTimeout;</span><br><span class="line">    @Value(&quot;$&#123;ok.http.max-idle-connections&#125;&quot;)</span><br><span class="line">    private Integer maxIdleConnections;</span><br><span class="line">    @Value(&quot;$&#123;ok.http.keep-alive-duration&#125;&quot;)</span><br><span class="line">    private Long keepAliveDuration;</span><br><span class="line">    @Bean</span><br><span class="line">    public OkHttpClient okHttpClient() &#123;</span><br><span class="line">        return new OkHttpClient.Builder()</span><br><span class="line">                .sslSocketFactory(sslSocketFactory(), x509TrustManager())</span><br><span class="line">                // 是否开启缓存</span><br><span class="line">                .retryOnConnectionFailure(false)</span><br><span class="line">                .connectionPool(pool())</span><br><span class="line">                .connectTimeout(connectTimeout, TimeUnit.SECONDS)</span><br><span class="line">                .readTimeout(readTimeout, TimeUnit.SECONDS)</span><br><span class="line">                .writeTimeout(writeTimeout,TimeUnit.SECONDS)</span><br><span class="line">                .hostnameVerifier((hostname, session) -&gt; true)</span><br><span class="line">                // 设置代理</span><br><span class="line">                // .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&quot;127.0.0.1&quot;, 8888)))</span><br><span class="line">                // 拦截器</span><br><span class="line">                // .addInterceptor()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public X509TrustManager x509TrustManager() &#123;</span><br><span class="line">        return new X509TrustManager() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void checkClientTrusted(X509Certificate[] chain, String authType)</span><br><span class="line">                    throws CertificateException &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void checkServerTrusted(X509Certificate[] chain, String authType)</span><br><span class="line">                    throws CertificateException &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                return new X509Certificate[0];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public SSLSocketFactory sslSocketFactory() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 信任任何链接</span><br><span class="line">            SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);</span><br><span class="line">            sslContext.init(null, new TrustManager[]&#123;x509TrustManager()&#125;, new SecureRandom());</span><br><span class="line">            return sslContext.getSocketFactory();</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException | KeyManagementException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public ConnectionPool pool() &#123;</span><br><span class="line">        return new ConnectionPool(maxIdleConnections, keepAliveDuration, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、配置创建工具类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package star.util;</span><br><span class="line"></span><br><span class="line">import jakarta.annotation.PostConstruct;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import okhttp3.*;</span><br><span class="line">import org.apache.commons.lang3.exception.ExceptionUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author luoqifeng</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class OkHttpClientUtil &#123;</span><br><span class="line">    private static final MediaType JSON = MediaType.parse(&quot;application/json; charset=utf-8&quot;);</span><br><span class="line">    private static final MediaType XML = MediaType.parse(&quot;application/xml; charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">    private static OkHttpClient okHttpClient;</span><br><span class="line"></span><br><span class="line">    // 为使用静态调用异步注入</span><br><span class="line">    @Autowired</span><br><span class="line">    private OkHttpClient getOkHttpClient;</span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        okHttpClient = getOkHttpClient;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * get 请求</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @return string</span><br><span class="line">     * */</span><br><span class="line">    public static String doGet(String url) &#123;</span><br><span class="line">        return doGet(url, null, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] doGetByte(String url) &#123;</span><br><span class="line">        return doGetByte(url, null, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String doPost(String url) &#123;</span><br><span class="line">        return doPost(url, null, null);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * get 请求</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @param params 请求参数 map</span><br><span class="line">     * @return string</span><br><span class="line">     * */</span><br><span class="line">    public static String doGetToParams(String url, Map&lt;String, String&gt; params) &#123;</span><br><span class="line">        return doGet(url, params, null);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * get 请求</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @param headers 请求头字段 &#123;k1, v1 k2, v2, ...&#125;</span><br><span class="line">     * @return string</span><br><span class="line">     * */</span><br><span class="line">    public static String doGetToHeaders(String url, Map&lt;String, String&gt; headers) &#123;</span><br><span class="line">        return doGet(url, null, headers);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * get 请求</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @param params 请求参数 map</span><br><span class="line">     * @param headers 请求头字段 &#123;k1, v1 k2, v2, ...&#125;</span><br><span class="line">     * @return string</span><br><span class="line">     * */</span><br><span class="line">    public static String doGet(String url, Map&lt;String, String&gt; params, Map&lt;String, String&gt; headers) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder(url);</span><br><span class="line">        if (params != null &amp;&amp; params.keySet().size() &gt; 0) &#123;</span><br><span class="line">            boolean firstFlag = true;</span><br><span class="line">            for (String key : params.keySet()) &#123;</span><br><span class="line">                if (firstFlag) &#123;</span><br><span class="line">                    sb.append(&quot;?&quot;).append(key).append(&quot;=&quot;).append(params.get(key));</span><br><span class="line">                    firstFlag = false;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    sb.append(&quot;&amp;&quot;).append(key).append(&quot;=&quot;).append(params.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request.Builder builder = new Request.Builder();</span><br><span class="line">        if (headers != null &amp;&amp; !headers.isEmpty()) &#123;</span><br><span class="line">            for (String header:headers.keySet())&#123;</span><br><span class="line">                builder.addHeader(header, headers.get(header));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request request = builder.url(sb.toString()).build();</span><br><span class="line">        log.info(&quot;do get request and url[&#123;&#125;]&quot;, sb.toString());</span><br><span class="line">        return executeBody(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static byte[] doGetByte(String url, Map&lt;String, String&gt; params, Map&lt;String, String&gt; headers) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder(url);</span><br><span class="line">        if (params != null &amp;&amp; params.keySet().size() &gt; 0) &#123;</span><br><span class="line">            boolean firstFlag = true;</span><br><span class="line">            for (String key : params.keySet()) &#123;</span><br><span class="line">                if (firstFlag) &#123;</span><br><span class="line">                    sb.append(&quot;?&quot;).append(key).append(&quot;=&quot;).append(params.get(key));</span><br><span class="line">                    firstFlag = false;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    sb.append(&quot;&amp;&quot;).append(key).append(&quot;=&quot;).append(params.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request.Builder builder = new Request.Builder();</span><br><span class="line">        if (headers != null &amp;&amp; !headers.isEmpty()) &#123;</span><br><span class="line">            for (String header:headers.keySet())&#123;</span><br><span class="line">                builder.addHeader(header, headers.get(header));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request request = builder.url(sb.toString()).build();</span><br><span class="line">        log.info(&quot;do get request and url[&#123;&#125;]&quot;, sb.toString());</span><br><span class="line">        return executeByte(request);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * post 请求</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @param params 请求参数 map</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static String doPostForm(String url, Map&lt;String, String&gt; params) &#123;</span><br><span class="line">        FormBody.Builder builder = new FormBody.Builder();</span><br><span class="line">        if (params != null &amp;&amp; params.keySet().size() &gt; 0) &#123;</span><br><span class="line">            for (String key : params.keySet()) &#123;</span><br><span class="line">                builder.add(key, params.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request request = new Request.Builder().url(url).post(builder.build()).build();</span><br><span class="line">        log.info(&quot;do post request and url[&#123;&#125;]&quot;, url);</span><br><span class="line">        return execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * post 请求</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @param params 请求参数 map</span><br><span class="line">     * @param headers 请求头字段 &#123;k1:v1, k2: v2, ...&#125;</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static String doPost(String url, Map&lt;String, String&gt; params, Map&lt;String, String&gt; headers) &#123;</span><br><span class="line">        FormBody.Builder builder = new FormBody.Builder();</span><br><span class="line">        if (params != null &amp;&amp; params.keySet().size() &gt; 0) &#123;</span><br><span class="line">            for (String key : params.keySet()) &#123;</span><br><span class="line">                builder.add(key, params.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request.Builder requestBuilder = new Request.Builder();</span><br><span class="line">        if (headers != null &amp;&amp; !headers.isEmpty()) &#123;</span><br><span class="line">            for (String header:headers.keySet())&#123;</span><br><span class="line">                requestBuilder.addHeader(header, headers.get(header));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request request = requestBuilder.url(url).post(builder.build()).build();</span><br><span class="line">        log.info(&quot;do post request and url[&#123;&#125;]&quot;, url);</span><br><span class="line">        return execute(request);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * post 请求, 请求数据为 json 的字符串</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @param json  请求数据, json 字符串</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static String doPostJson(String url, String json) &#123;</span><br><span class="line">        log.info(&quot;do post request and url[&#123;&#125;]&quot;, url);</span><br><span class="line">        return executePost(url, json, JSON);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * post 请求, 请求数据为 json 的字符串</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @param json  请求数据, json 字符串</span><br><span class="line">     * @param headers 请求头字段 &#123;k1, v1 k2, v2, ...&#125;</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static String doPostJson(String url, String json, Map&lt;String, String&gt; headers) &#123;</span><br><span class="line">        log.info(&quot;do post request and url[&#123;&#125;]&quot;, url);</span><br><span class="line"></span><br><span class="line">        RequestBody requestBody = RequestBody.create(json, JSON);</span><br><span class="line">        Request.Builder builder = new Request.Builder();</span><br><span class="line">        if (headers != null &amp;&amp; !headers.isEmpty()) &#123;</span><br><span class="line">            for (String header:headers.keySet())&#123;</span><br><span class="line">                builder.addHeader(header, headers.get(header));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request request = builder.url(url).post(requestBody).build();</span><br><span class="line">        return execute(request);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * post 请求, 请求数据为 xml 的字符串</span><br><span class="line">     * @param url  请求url地址</span><br><span class="line">     * @param xml  请求数据, xml 字符串</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static String doPostXml(String url, String xml) &#123;</span><br><span class="line">        log.info(&quot;do post request and url[&#123;&#125;]&quot;, url);</span><br><span class="line">        return executePost(url, xml, XML);</span><br><span class="line">    &#125;</span><br><span class="line">    private static String executePost(String url, String data, MediaType contentType) &#123;</span><br><span class="line">        RequestBody requestBody = RequestBody.create(data ,contentType);</span><br><span class="line">        Request request = new Request.Builder().url(url).post(requestBody).build();</span><br><span class="line">        return execute(request);</span><br><span class="line">    &#125;</span><br><span class="line">    private static String execute(Request request) &#123;</span><br><span class="line">        Response response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = okHttpClient.newCall(request).execute();</span><br><span class="line">            if (response.isSuccessful()) &#123;</span><br><span class="line">                return response.body().string();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(ExceptionUtils.getStackTrace(e));</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (response != null) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String executeBody(Request request) &#123;</span><br><span class="line">        Response response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = okHttpClient.newCall(request).execute();</span><br><span class="line">            if (response.body() != null) &#123;</span><br><span class="line">                return response.body().string();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(ExceptionUtils.getStackTrace(e));</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (response != null) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static byte[] executeByte(Request request) &#123;</span><br><span class="line">        Response response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = okHttpClient.newCall(request).execute();</span><br><span class="line">            if (response.isSuccessful()) &#123;</span><br><span class="line">                return response.body().bytes();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(ExceptionUtils.getStackTrace(e));</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (response != null) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、-测试"><a href="#四、-测试" class="headerlink" title="四、 测试"></a>四、 测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author star</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;test&quot;)</span><br><span class="line">public class testController &#123;</span><br><span class="line">    </span><br><span class="line">    @GetMapping(&quot;testOkhttp&quot;)</span><br><span class="line">    public String testOkhttp()&#123;</span><br><span class="line">        String s = OkHttpClientUtil.doGet(&quot;https://www.baidu.com&quot;);</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此已经完成基本的<strong>Spring Boot整合 okhttp3</strong> 的示例。并使用okhttp3来发送HTTP请求，然后返回HTTP响应。</p>]]></content>
      
      
      <categories>
          
          <category> Okhttp3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Okhttp3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的表无法修改、删除等操作，卡死、锁死情况的处理办法.md</title>
      <link href="/2023/02/10/Mysql%E7%9A%84%E8%A1%A8%E6%97%A0%E6%B3%95%E4%BF%AE%E6%94%B9%E3%80%81%E5%88%A0%E9%99%A4%E7%AD%89%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%8D%A1%E6%AD%BB%E3%80%81%E9%94%81%E6%AD%BB%E6%83%85%E5%86%B5%E7%9A%84%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95-md/"/>
      <url>/2023/02/10/Mysql%E7%9A%84%E8%A1%A8%E6%97%A0%E6%B3%95%E4%BF%AE%E6%94%B9%E3%80%81%E5%88%A0%E9%99%A4%E7%AD%89%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%8D%A1%E6%AD%BB%E3%80%81%E9%94%81%E6%AD%BB%E6%83%85%E5%86%B5%E7%9A%84%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95-md/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/zss123yq/article/details/110230683">Mysql的表无法修改、删除等操作，卡死、锁死情况的处理办法_mysql删除表卡死-CSDN博客</a></p><p>产生”假锁”原因<br>MySQL如果频繁的修改一个表的数据，那么这么表会被锁死。造成假死现象。在网上试过很多种解决方法,重启mysql服务,重连数据库都没有用。</p><p>温馨提示：如果网上搜索的这些方法试过都没有效果，静置1天它就好了。。。。</p><p>当然！这是最最差的解决方案了哈，下面我分享个人项目中的解决方案，供大家参考。</p><p>解决办法<br><strong>首先执行：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show processlist; //列出当前的操作process</span><br></pre></td></tr></table></figure><p>展示所有进程，一般会看到很多Command&#x3D;sleep的process，其中会有状态Command是Query的进程，获取到该进程的id。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">kill 进程id;</span><br></pre></td></tr></table></figure><p>这时，你可能会报错，因为我就是。这种情况下，有可能是正在执行的事务线程一直在查询导致的。</p><p><strong>2第二次尝试</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询正在执行的事务：</span><br><span class="line">SELECT * FROM information_schema.INNODB_TRX</span><br><span class="line">根据这个事务的线程ID（trx_mysql_thread_id）:</span><br><span class="line">从上图看出对应的mysql 线程：一个94362 （第二个正在等待锁）另一个是93847(第一个update 正在执行 没有提交事务)</span><br><span class="line"></span><br><span class="line">可以使用mysql命令：kill 线程id 杀掉线程</span><br><span class="line"></span><br><span class="line">期间如果并未杀掉持有锁的线程：则第二个update语句提示等待锁超时</span><br><span class="line"></span><br><span class="line">查看正在锁的事务</span><br><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS; </span><br><span class="line"></span><br><span class="line">查看等待锁的事务</span><br><span class="line">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 批量更新 update join.md</title>
      <link href="/2023/02/10/mysql-%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0-update-join-md/"/>
      <url>/2023/02/10/mysql-%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0-update-join-md/</url>
      
        <content type="html"><![CDATA[<h1 id="批量更新关联的sql"><a href="#批量更新关联的sql" class="headerlink" title="批量更新关联的sql"></a>批量更新关联的sql</h1><p>参考：</p><p><a href="https://blog.csdn.net/moshowgame/article/details/109809642">mysql之关联更新(update join，用b表更新a表记录)-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_42008012/article/details/105442968">MySQL中,关联多张表批量更新-update join on set,关联删除-CSDN博客</a></p><p><a href="https://www.cnblogs.com/princessd8251/articles/5551651.html">MySQL多表关联数据同时删除sql语句 - princessd8251 - 博客园 (cnblogs.com)</a></p><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关联更新</span><br><span class="line">先说方法</span><br><span class="line">update table1</span><br><span class="line">join table2 on table1.关联字段=table2.关联字段</span><br><span class="line">set table1.要改变的字段=table2.对应的字段</span><br><span class="line"></span><br><span class="line">这个table2经常是一张表的聚合后的查询结果</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用场景</span><br><span class="line">项目中经常会有多张表的各种关联,一对多,多对多等关系很多,导致查询一张表格的东西要关联很多表,速度很慢;</span><br><span class="line">这时候考虑添加一个冗余字段,减少查询时表的关联;但是已经有的数据,需要更新一下,一个个更新肯定要累死,所以这时候就需要批量关联更新</span><br></pre></td></tr></table></figure><p>举个栗子<br>有两张表:<br>dept:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `dept` (</span><br><span class="line">  `dept_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `emp_count` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`dept_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><p>employee</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `employee` (</span><br><span class="line">  `emp_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `dept_id` int(11) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`emp_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><p>dept中的数据:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+---------+--------+-----------+</span><br><span class="line">| dept_id | name   | emp_count |</span><br><span class="line">+---------+--------+-----------+</span><br><span class="line">|       1 | 开发   |      NULL |</span><br><span class="line">|       2 | 测试   |      NULL |</span><br><span class="line">|       3 | 销售   |      NULL |</span><br><span class="line">+---------+--------+-----------+</span><br></pre></td></tr></table></figure><p>employee中的数据:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from employee;</span><br><span class="line">+--------+---------+--------+</span><br><span class="line">| emp_id | dept_id | name   |</span><br><span class="line">+--------+---------+--------+</span><br><span class="line">|      1 |       1 | 小白   |</span><br><span class="line">|      2 |       1 | 中白   |</span><br><span class="line">|      3 |       1 | 大白   |</span><br><span class="line">|      4 |       2 | 小黑   |</span><br><span class="line">|      5 |       2 | 中黑   |</span><br><span class="line">|      6 |       3 | 大黄   |</span><br><span class="line">+--------+---------+--------+</span><br></pre></td></tr></table></figure><p>现在想根据各部门的员工数量,如果部门很多,一个一个更新怕是要累死<br>批量更新到部门表的emp_count字段上,就需要这么做:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update dept </span><br><span class="line">join (select COUNT(emp_id) as n,dept_id from employee GROUP BY dept_id) as e</span><br><span class="line">on e.dept_id = dept.dept_id</span><br><span class="line">set emp_count = e.n;</span><br></pre></td></tr></table></figure><p>关联删除<br>有了关联更新,肯定有时候也想关联删除了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from t1 where 条件</span><br><span class="line">delete t1 from t1 where 条件</span><br><span class="line">delete t1 from t1,t2 where 条件</span><br><span class="line">delete t1,t2 from t1,t2 where 条件</span><br></pre></td></tr></table></figure><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete A</span><br><span class="line">from A</span><br><span class="line">inner join B</span><br><span class="line">on A.CID=B.CID</span><br><span class="line">where B.cp = 2 and A.x=xx;</span><br></pre></td></tr></table></figure><p>我自己这边使用的例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update  schedule_detail a</span><br><span class="line">INNER JOIN (select schedule_code,material_code,move_out from schedule_detail  where schedule_code=&#x27;ANE24A0014&#x27;  and move_out&gt;0) b </span><br><span class="line">on b.material_code=a.material_code </span><br><span class="line">set a.move_in = b.move_out</span><br><span class="line">where a.schedule_code=&#x27;ANE24A0012-1&#x27;  and move_in&lt;0</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据重复需要如何删除掉重复的数据.md</title>
      <link href="/2023/02/10/mysql%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%9C%80%E8%A6%81%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E6%8E%89%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE-md/"/>
      <url>/2023/02/10/mysql%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%9C%80%E8%A6%81%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E6%8E%89%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE-md/</url>
      
        <content type="html"><![CDATA[<p><strong>mysql数据重复需要如何删除掉重复的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL是一种关系型数据库管理系统，是目前世界上最流行的开放源代码数据库之一。在实际工作中，我们经常会遇到数据重复的情况，针对这种情况，我们需要进行数据清洗和去重，MySQL提供了多种方法来删除重复的数据。本文将介绍几种常用的去除重复数据的技巧。</span><br><span class="line">一、使用DISTINCT删除重复数据</span><br><span class="line">MySQL提供了DISTINCT关键字，它能够去除结果集中的重复行。可以将DISTINCT关键字和SELECT语句一起使用，例如：</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT column1,column2,column3 FROM table_name;</span><br><span class="line"></span><br><span class="line">该语句将返回一个由column1、column2、column3组成的不重复结果集。但是，该方法仅能去除完全相同的行，如果表中有两行数据大部分相同，只有少数列不同，那么DISTINCT方法就无法去除重复数据。此时需要使用GROUP BY方法。</span><br><span class="line">二、使用GROUP BY删除重复数据</span><br><span class="line">GROUP BY是MySQL中聚合函数的重要组成部分，它在对数据进行分组时也可帮助删除重复数据。在使用GROUP BY时，需要指定一个或多个列作为分组依据，例如：</span><br><span class="line"></span><br><span class="line">SELECT column1,column2 FROM table_name GROUP BY column1,column2;</span><br><span class="line"></span><br><span class="line">该语句将返回一个由column1和column2组成的不重复结果集。GROUP BY一般会和聚合函数COUNT、SUM、AVG等一起使用，来对分组后的数据进行统计分析。</span><br><span class="line">三、使用HAVING删除重复数据</span><br><span class="line">HAVING是MySQL中 GROUP BY语句的扩展函数，它允许我们在分组后对数据进行过滤。有时候我们需要删除某个列中只重复出现一次的数据，可以通过HAVING语句实现。</span><br><span class="line"></span><br><span class="line">SELECT column1,COUNT(column2) FROM table_name GROUP BY column1 HAVING COUNT(column2) &gt; 1;</span><br><span class="line"></span><br><span class="line">该语句将返回由column1和column2组成的结果集，其中column2中的数据出现次数大于1。通过COUNT函数，我们可以统计某个列中每个元素的出现次数，然后通过HAVING将不符合条件的数据过滤掉，达到删除重复数据的目的。</span><br><span class="line">四、使用子查询删除重复数据</span><br><span class="line">子查询是MySQL中解决复杂查询问题的一种有效方法。在删除重复数据时，我们也可以使用子查询的方式，例如：</span><br><span class="line"></span><br><span class="line">DELETE FROM table_name WHERE column1 IN (SELECT column1 FROM table_name GROUP BY column1 HAVING COUNT(*) &gt; 1);</span><br><span class="line">这里要注意会报错You can‘t specify target table for update in FROM clause</span><br><span class="line">只需要在SELECT column1 FROM table_name GROUP BY column1 HAVING COUNT(*) &gt; 1 套个子查询就可以了</span><br><span class="line">select a.column1 from </span><br><span class="line">(SELECT column1 FROM table_name GROUP BY column1 HAVING COUNT(*) &gt; 1) a</span><br><span class="line"></span><br><span class="line">该语句将删除column1中只出现过一次的数据。首先，子查询中通过GROUP BY和HAVING语句筛选出了column1出现次数大于1的数据，然后通过IN关键字指定要删除的数据范围进行删除操作。需要注意的是，删除操作是直接删除表中数据，无法恢复，应慎重操作。</span><br><span class="line">总结：</span><br><span class="line">通过本文的介绍，我们了解了MySQL中去除重复数据的几种方法，包括使用DISTINCT、GROUP BY、HAVING和子查询等。在实际工作中，我们需要根据具体场景选择合适的方法，对重复数据进行清洗和去重操作，以提高数据质量和处理效率。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zzddada/article/details/112665298">MySQL 报错 You can‘t specify target table for update in FROM clause解决办法_you can’t specify target table ‘’ for update in fr_大东子来搬砖的博客-CSDN博客</a></p><p><strong>举例mysql</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select inventory_order,lot_code from inventory_check_detail </span><br><span class="line">37000</span><br><span class="line"></span><br><span class="line">select DISTINCT inventory_order,lot_code,loc_code,qty from inventory_check_detail </span><br><span class="line">36779</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete from inventory_check_detail where id  in (</span><br><span class="line">(select a.id from </span><br><span class="line">(select id from inventory_check_detail  GROUP BY inventory_order,lot_code,loc_code,qty HAVING count(*) &gt;1) a);</span><br><span class="line"></span><br><span class="line">select * from inventory_check_detail where id in (select a.id from </span><br><span class="line">(select id from inventory_check_detail  GROUP BY inventory_order,lot_code,loc_code,qty HAVING count(*) &gt;1) a)</span><br><span class="line"></span><br><span class="line">select * from inventory_check_detail where inventory_order=&#x27;IC20231027-0015&#x27; and  lot_code=&#x27;ZD230819039#001&#x27;</span><br><span class="line"></span><br><span class="line">select a.id from </span><br><span class="line">(select id from inventory_check_detail  GROUP BY inventory_order,lot_code,loc_code,qty HAVING count(*) &gt;1) a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select id from inventory_check_detail  GROUP BY inventory_order,lot_code,loc_code,qty HAVING count(*) &gt;1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 自定义函数的写法.md</title>
      <link href="/2023/02/10/mysql-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%86%99%E6%B3%95-md/"/>
      <url>/2023/02/10/mysql-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%9A%84%E5%86%99%E6%B3%95-md/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-自定义函数的写法"><a href="#mysql-自定义函数的写法" class="headerlink" title="mysql 自定义函数的写法"></a>mysql 自定义函数的写法</h1><p>参考：</p><p><a href="https://www.knowledgedict.com/tutorial/mysql-functions.html">MySQL 内置函数及自定义函数详解 | 程序员笔记 (knowledgedict.com)</a></p><p><a href="https://blog.csdn.net/Artificial_idiots/article/details/106754297">MySQL创建自定义函数教程_mysql中创建一个函数,根据学生学号和课程名返回该学生的课程分数,如果课程分数不-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhangminghui/p/4113160.html">MySQL之自定义函数 - 叼烟斗的纤夫 - 博客园 (cnblogs.com)</a></p><p>[mysql创建函数报1064错误的解决方案_mysql 创建函数一直报1064-CSDN博客](<a href="https://blog.csdn.net/tuolingss/article/details/121234411#:~:text=%231064">https://blog.csdn.net/tuolingss/article/details/121234411#:~:text=%231064</a> – You have an error in your,syntax to use near ” at line 4在mysql中默认分号（%3B）为分隔符，也就是说，遇到分号，就认为你输入完了，需要系统执行了。)</p><hr><h2 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create function 函数名([参数列表]) returns 数据类型</span><br><span class="line">begin</span><br><span class="line"> sql语句;</span><br><span class="line"> return 值;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多参数时</span><br><span class="line">create function 函数名(</span><br><span class="line">xxx VARCHAR ( 100 ),</span><br><span class="line">zzz VARCHAR ( 100 ),</span><br><span class="line">yyy VARCHAR ( 100 ) ) returns 数据类型</span><br><span class="line">begin</span><br><span class="line"> sql语句;</span><br><span class="line"> return 值;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>注意:还有要注意的是参数不要跟表的字段名称一样，不然虽然不会报错，但是查出来的数据会有异常</p><h3 id="创建方法拼接SQL"><a href="#创建方法拼接SQL" class="headerlink" title="创建方法拼接SQL"></a>创建方法拼接SQL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">DROP FUNCTION IF EXISTS genPerson$$</span><br><span class="line">CREATE FUNCTION genPerson(name varchar(20)) RETURNS varchar(50)</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE str VARCHAR(50) DEFAULT &#x27;&#x27;;</span><br><span class="line">  SET @tableName=name;</span><br><span class="line">  SET str=CONCAT(&#x27;create table &#x27;, @tableName,&#x27;(id int, name varchar(20));&#x27;);</span><br><span class="line">  return str;</span><br><span class="line">END $$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）DELIMITER $$ 定义结束符。MySQL默认的结束符是分号，但是函数体中可能用到分号。为了避免冲突，需要另外定义结束符。</span><br><span class="line"></span><br><span class="line">（2）DROP FUNCTION IF EXISTS genPerson$$ 如果函数genPerson已经存在了，就删除掉。</span><br><span class="line"></span><br><span class="line">（3）CREATE FUNCTION 创建函数genPerson，函数的参数是name，返回值是varchar(50)。</span><br><span class="line"></span><br><span class="line">（4）函数体放在BEGIN 与 END之间。</span><br><span class="line"></span><br><span class="line">（5）DECLARE 声明变量，str类型是varchar(50)，默认值是空。</span><br><span class="line"></span><br><span class="line">（6）CONCAT连接多个字符串。</span><br><span class="line"></span><br><span class="line">（7）RETURN 返回拼接后的字符串str。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">DROP FUNCTION IF EXISTS getNthHighestSalary$$</span><br><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">SET N = N -1;</span><br><span class="line">  RETURN (</span><br><span class="line">      select ifnull((select distinct id from user order by id desc limit 1 OFFSET n),null)</span><br><span class="line">  );</span><br><span class="line">END</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select genPerson(&#x27;student&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select getNthHighestSalary(2)</span><br></pre></td></tr></table></figure><h4 id="配置问题："><a href="#配置问题：" class="headerlink" title="配置问题："></a>配置问题：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果创建自定义函数时遇到下面这种报错：</span><br><span class="line"></span><br><span class="line">Error Code : 1418 This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you might want to use the less safe log_bin_trust_function_creators variable)</span><br><span class="line"></span><br><span class="line">原因分析：</span><br><span class="line">导致该错误的原因可能是一个安全设置方面的配置，查手册log_bin_trust_function_creators参数缺省0，是不允许function的同步的，一般我们在配置repliaction的时候，都忘记关注这个参数，这样在master更新funtion后，slave就会报告错误，然后slave stoped。</span><br><span class="line">解决办法可以参考这里：</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Artificial_idiots/article/details/106752583">MySQL ERROR 1418 的解决方法（自定义函数）_mysql自定义函数1418-CSDN博客</a></p><hr><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>一定要有分割符不然有些创建函数的时候执行不了，我自己就当时创建没加分割符就一直提示报错1064</p><p>[mysql创建函数报1064错误的解决方案_mysql 创建函数一直报1064-CSDN博客](<a href="https://blog.csdn.net/tuolingss/article/details/121234411#:~:text=%231064">https://blog.csdn.net/tuolingss/article/details/121234411#:~:text=%231064</a> – You have an error in your,syntax to use near ” at line 4在mysql中默认分号（%3B）为分隔符，也就是说，遇到分号，就认为你输入完了，需要系统执行了。)</p><p>注意:还有要注意的是参数不要跟表的字段名称一样，不然虽然不会报错，但是查出来的数据会有异常</p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">DROP FUNCTION IF EXISTS fun_get_pick_loc_code$$</span><br><span class="line">CREATE FUNCTION fun_get_pick_loc_code(</span><br><span class="line">schedulecode VARCHAR ( 100 ),</span><br><span class="line">materialnum VARCHAR ( 100 ),</span><br><span class="line">lotcode VARCHAR ( 100 )</span><br><span class="line">) RETURNS varchar(100) CHARSET utf8</span><br><span class="line">BEGIN</span><br><span class="line">SET @num1 =(</span><br><span class="line">SELECT</span><br><span class="line">IFNULL( loc_code, &quot;&quot; ) </span><br><span class="line">FROM</span><br><span class="line">inventory_log </span><br><span class="line">WHERE</span><br><span class="line">inventory_type = &#x27;delivery&#x27; </span><br><span class="line">AND order_type = &#x27;picking&#x27; </span><br><span class="line">AND lot_code = lotcode </span><br><span class="line">AND material_num = materialnum </span><br><span class="line">AND order_num = ( SELECT preparation_order FROM preparation_master WHERE schedule_code = schedulecode AND preparation_type = &#x27;0&#x27; LIMIT 1 ) </span><br><span class="line">LIMIT 1 </span><br><span class="line">);</span><br><span class="line">RETURN ( @num1 );</span><br><span class="line">END $$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">rd.return_order,</span><br><span class="line">rd.schedlule_code,</span><br><span class="line">rd.material_code,</span><br><span class="line">rd.lot_code,</span><br><span class="line">fun_get_pick_loc_code ( rd.schedlule_code, rd.material_code, rd.lot_code ) loc_code </span><br><span class="line">FROM</span><br><span class="line">return_detail rd </span><br><span class="line">WHERE</span><br><span class="line">rd.is_shelves =0</span><br></pre></td></tr></table></figure><hr><h3 id="创建的各种函数例子（创建时都需要加分隔符和判断是否存在，以下省略了这个步骤，使用时注意看清楚）"><a href="#创建的各种函数例子（创建时都需要加分隔符和判断是否存在，以下省略了这个步骤，使用时注意看清楚）" class="headerlink" title="创建的各种函数例子（创建时都需要加分隔符和判断是否存在，以下省略了这个步骤，使用时注意看清楚）"></a>创建的各种函数例子（创建时都需要加分隔符和判断是否存在，以下省略了这个步骤，使用时注意看清楚）</h3><h5 id="1、fun-get-iqc-qty"><a href="#1、fun-get-iqc-qty" class="headerlink" title="1、fun_get_iqc_qty"></a>1、fun_get_iqc_qty</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` FUNCTION `fun_get_iqc_qty`(rdid int) RETURNS int(11)</span><br><span class="line">BEGIN </span><br><span class="line"> RETURN (select FLOOR(IFNULL(sum(real_qty),0)) from receipt_detail_lot where receipt_det_id=rdid);</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="2、fun-vendordate"><a href="#2、fun-vendordate" class="headerlink" title="2、fun_vendordate"></a>2、fun_vendordate</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` FUNCTION `fun_vendordate`(lotcode VARCHAR(50)) RETURNS varchar(50) CHARSET utf8</span><br><span class="line">BEGIN </span><br><span class="line"> RETURN (SELECT  DATE_FORMAT(Input_Date,&#x27;%y%m%d&#x27;) from a_iqc where Barcode=left(lotcode,16));</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="3、fun-vendorcode"><a href="#3、fun-vendorcode" class="headerlink" title="3、fun_vendorcode"></a>3、fun_vendorcode</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` FUNCTION `fun_vendorcode`(lotcode VARCHAR(50)) RETURNS varchar(50) CHARSET utf8</span><br><span class="line">BEGIN </span><br><span class="line"> RETURN (SELECT  Manufacturer from a_iqc where Barcode=left(lotcode,16));</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="4、fun-get-unit-qty"><a href="#4、fun-get-unit-qty" class="headerlink" title="4、fun_get_unit_qty"></a>4、fun_get_unit_qty</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` FUNCTION `fun_get_unit_qty`(bomcode VARCHAR(50)) RETURNS float(22,9)</span><br><span class="line">BEGIN </span><br><span class="line">  set @num1=IFNULL((select sum(use_qty) from bom_detail where bom_code=bomcode),0);</span><br><span class="line">set @num2=IFNULL((select sum(use_qty) from bom_replace where bom_code=bomcode),0);</span><br><span class="line"> RETURN (@num1+@num2);</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="5、fun-get-stack"><a href="#5、fun-get-stack" class="headerlink" title="5、fun_get_stack"></a>5、fun_get_stack</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` FUNCTION `fun_get_stack`(sch_code VARCHAR(30)) RETURNS varchar(100) CHARSET utf8</span><br><span class="line">BEGIN </span><br><span class="line">  set @num1=(select GROUP_CONCAT(distinct stack_code) from schedule_stack where schedule_code=sch_code); </span><br><span class="line"> RETURN (@num1);</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="6、fun-get-materialtype"><a href="#6、fun-get-materialtype" class="headerlink" title="6、fun_get_materialtype"></a>6、fun_get_materialtype</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` FUNCTION `fun_get_materialtype`(materialcode VARCHAR(50)) RETURNS varchar(30) CHARSET utf8</span><br><span class="line">BEGIN </span><br><span class="line">   if(left(materialcode,4)=&#x27;AM31&#x27;) THEN</span><br><span class="line">set @scode=&#x27;SMT-PG&#x27;;</span><br><span class="line">else</span><br><span class="line">set @scode=&#x27;SMT&#x27;;</span><br><span class="line"> end if;</span><br><span class="line"> RETURN @scode;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="7、fun-get-pick-qty"><a href="#7、fun-get-pick-qty" class="headerlink" title="7、fun_get_pick_qty"></a>7、fun_get_pick_qty</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BEGIN </span><br><span class="line">if(schedulecode=&#x27;&#x27;) then    </span><br><span class="line">SET @i= 99999;</span><br><span class="line">ELSE</span><br><span class="line"> SET @i= (select IFNULL(sum(qty),0)</span><br><span class="line">from inventory_log where inventory_type=&#x27;delivery&#x27; and order_type=&#x27;picking&#x27;</span><br><span class="line">and material_num = materialcode </span><br><span class="line">and order_num = (select preparation_order from preparation_master  where schedule_code=schedulecode and  preparation_type=&#x27;0&#x27; LIMIT 1 ));</span><br><span class="line">end if;</span><br><span class="line">RETURN (@i);</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h5 id="8、fun-get-pick-loc-code"><a href="#8、fun-get-pick-loc-code" class="headerlink" title="8、fun_get_pick_loc_code"></a>8、fun_get_pick_loc_code</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DEFINER=`root`@`localhost` FUNCTION `fun_get_pick_loc_code`(</span><br><span class="line">schedulecode VARCHAR ( 100 ),</span><br><span class="line">materialnum VARCHAR ( 100 ),</span><br><span class="line">lotcode VARCHAR ( 100 )) RETURNS varchar(100) CHARSET utf8</span><br><span class="line">BEGIN</span><br><span class="line">SET @num1 =(</span><br><span class="line">SELECT</span><br><span class="line">IFNULL( loc_code, &quot;&quot; ) </span><br><span class="line">FROM</span><br><span class="line">inventory_log </span><br><span class="line">WHERE</span><br><span class="line">inventory_type = &#x27;delivery&#x27; </span><br><span class="line">AND order_type = &#x27;picking&#x27; </span><br><span class="line">AND lot_code = lotcode </span><br><span class="line">AND material_num = materialnum </span><br><span class="line">AND order_num = ( SELECT preparation_order FROM preparation_master WHERE schedule_code = schedulecode AND preparation_type = &#x27;0&#x27; LIMIT 1 ) </span><br><span class="line">LIMIT 1 </span><br><span class="line">);</span><br><span class="line">RETURN ( @num1 );</span><br><span class="line">END</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引.md</title>
      <link href="/2023/02/10/mysql%E7%B4%A2%E5%BC%95-md/"/>
      <url>/2023/02/10/mysql%E7%B4%A2%E5%BC%95-md/</url>
      
        <content type="html"><![CDATA[<p>mysql 索引</p><p><a href="https://blog.csdn.net/qq_42108331/article/details/131076422">MySQL数据库给表添加索引_mysql建表添加索引_何中应的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_41908456/article/details/127126587">MYSQL查询当前表存在哪些索引_爱若执炬迎风的博客-CSDN博客</a></p><p><a href="https://www.dbs724.com/147315.html">MySQL索引查询方法：怎样查询MySQL索引（mysql如何查看索引）-数据库运维技术服务 (dbs724.com)</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如何创建索引呢？可以通过以下方式创建：</span><br><span class="line"></span><br><span class="line">ALTER TABLE table_name ADD INDEX index_name(column_name);</span><br><span class="line"></span><br><span class="line">其中，table_name为需要创建索引的表名，index_name为索引名称，column_name为需要创建索引的列名。如：</span><br><span class="line"></span><br><span class="line">ALTER TABLE my_table ADD INDEX my_index(username);</span><br><span class="line"></span><br><span class="line">创建索引后，我们也会遇到删除索引的情况。那么，我们应该如何删除索引呢？可以通过以下语句：</span><br><span class="line"></span><br><span class="line">ALTER TABLE table_name DROP INDEX index_name;</span><br><span class="line"></span><br><span class="line">其中，table_name为需要删除索引的表名，index_name为需要删除索引的名称。例如：</span><br><span class="line"></span><br><span class="line">ALTER TABLE my_table DROP INDEX my_index;</span><br><span class="line"></span><br><span class="line">四、MySQL索引优化建议</span><br><span class="line"></span><br><span class="line">为了充分发挥MySQL索引的优势，这里给出一些MySQL索引的优化建议：</span><br><span class="line"></span><br><span class="line">1. 对于经常被查询的列，可以创建索引。</span><br><span class="line"></span><br><span class="line">2. 尽量使用最短的索引，减少占用空间。</span><br><span class="line"></span><br><span class="line">3. 索引列类型应该尽量小（如TINYINT、SMALLINT等）。</span><br><span class="line"></span><br><span class="line">4. 确保表中的数据保持完整，不要让索引中出现无效数据。</span><br><span class="line"></span><br><span class="line">5. 避免在查询时使用不等于（!=、）操作符，这会导致查询优化器无法使用索引。</span><br><span class="line"></span><br><span class="line">6. 避免在查询时使用函数，例如LEFT()和SUBSTR()。</span><br><span class="line"></span><br><span class="line">7. 避免使用LIKE操作符前导通配符（%开头的LIKE语句），因为这种查询无法使用索引。</span><br><span class="line"></span><br><span class="line">总之，优化MySQL索引可以帮助我们更快速地查找数据，提升系统的性能和应用的实用性。本篇文章提供了MySQL索引查询方法与相关代码，同时也为大家介绍其创建与删除的基本语句，并提出了一些优化建议供读者参考。希望能够帮助大家更好地理解和掌握MySQL索引技术。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看表存在的索引：</span><br><span class="line"></span><br><span class="line">show index from table_name(表名)</span><br><span class="line">--结果列表中各字段的含义：</span><br><span class="line"></span><br><span class="line">Non_unique：如果索引不能包括重复词，则为0。如果可以，则为1。</span><br><span class="line">Key_name：索引名称。</span><br><span class="line">Seq_in_index：索引中的列序列号，从1开始。</span><br><span class="line">Column_name：列名称。</span><br><span class="line">Collation：列以什么方式存储在索引中。在MySQL中，有值‘A’(升序)或NULL(无分类)。</span><br><span class="line">Cardinality：索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机 会就越大。</span><br><span class="line">Sub_part ：如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。</span><br><span class="line">Packed：指示关键字如何被压缩。如果没有被压缩，则为NULL。</span><br><span class="line">Null：如果列含有NULL，则含有YES。如果没有，则该列含有NO。</span><br><span class="line">Index_type：用过的索引方法(BTREE, FULLTEXT, HASH, RTREE)。</span><br><span class="line">例子：</span><br><span class="line"></span><br><span class="line"> 原文：https://www.csdn.net/tags/NtDacgwsODY4NTAtYmxvZwO0O0OO0O0O.html</span><br></pre></td></tr></table></figure><p>索引需要注意的问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL是一种关系型数据库，它可以通过建立索引来提高查询效率。索引是一种数据结构，它可以让数据库快速地找到满足条件的记录，而不需要扫描整张表。但是，并不是所有的查询都能利用索引，有时候索引会失效，导致查询性能下降。那么，MySQL索引失效的原因有哪些呢？如何避免或解决索引失效的问题呢？本文将从以下七个方面来介绍：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 数据类型不匹配。如果查询条件中的数据类型和索引列的数据类型不一致，MySQL会进行隐式类型转换，这会导致索引失效。例如，如果索引列是varchar类型，而查询条件是数字类型，MySQL会将索引列转换为数字类型进行比较，这样就无法使用索引了。解决方法是保持数据类型的一致性，或者在查询条件中使用显式类型转换。</span><br><span class="line"></span><br><span class="line">2. 模糊查询以%开头。如果查询条件中使用了like关键字，并且模糊匹配的字符串以%开头，那么也会导致索引失效。这是因为以%开头的模糊匹配无法确定索引列的起始位置，所以无法利用索引进行快速查找。解决方法是尽量避免使用以%开头的模糊匹配，或者使用覆盖索引（只包含索引列的查询）。</span><br><span class="line"></span><br><span class="line">3. 索引列使用了函数或运算。如果查询条件中对索引列进行了函数调用或运算，那么也会导致索引失效。这是因为函数或运算会改变索引列的值，使得原来的索引无法使用。解决方法是尽量避免对索引列使用函数或运算，或者建立基于函数或运算的索引（MySQL 5.7及以上版本支持）。</span><br><span class="line"></span><br><span class="line">4. 索引列包含空值。如果索引列中包含空值（NULL），那么在查询条件中使用IS NULL或IS NOT NULL也会导致索引失效。这是因为MySQL在建立索引时不会存储空值，所以无法通过索引来判断是否为空。解决方法是尽量避免让索引列包含空值，或者在建立索引时指定NOT NULL约束。</span><br><span class="line"></span><br><span class="line">5. 查询条件中使用了OR关键字。如果查询条件中使用了OR关键字，并且OR两边的条件涉及到不同的索引列，那么也会导致索引失效。这是因为MySQL无法同时使用多个索引来进行查询优化，所以只能选择全表扫描。解决方法是尽量避免使用OR关键字，或者将OR两边的条件分别用括号括起来，并且在括号内部使用相同的索引列。</span><br><span class="line"></span><br><span class="line">6. 联合索引违反了最左前缀原则。如果建立了联合索引（多个列组成的索引），那么在查询条件中必须遵循最左前缀原则，即从左到右依次使用联合索引中的列，不能跳过任何一列。否则，也会导致索引失效。例如，如果建立了（name, age, gender）的联合索引，那么在查询条件中可以使用name，或者name和age，或者name，age和gender，但是不能只使用age或gender，也不能只使用age和gender。解决方法是尽量按照最左前缀原则来使用联合索引，并且将区分度高的列放在前面。</span><br><span class="line"></span><br><span class="line">7. 全表扫描比使用索引更快。有时候，即使查询条件中完全符合索引的使用条件，MySQL也可能不会使用索引，而是选择全表扫描。这是因为MySQL有一个优化器，它会根据表中的数据量和分布情况，预估使用索引和全表扫描的代价，选择一个更快的方案。例如，如果表中的数据量很小，或者查询条件中的过滤条件很宽松，导致命中的记录很多，那么全表扫描可能比使用索引更快。解决方法是根据实际情况调整查询条件或索引设计，或者强制使用索引（使用FORCE INDEX或USE INDEX提示）。</span><br><span class="line"></span><br><span class="line">总结：MySQL索引失效是一个常见的性能问题，它会导致查询效率下降，甚至影响整个系统的稳定性。因此，我们需要了解索引失效的原因和解决方法，避免在编写SQL语句时犯一些低级错误。同时，我们也需要定期检查和优化索引的设计和使用情况，确保索引能够发挥最大的作用。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_45707610/article/details/131102289">mysql 如何创建索引_mysql添加索引sql语句_xiaoweids的博客-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.添加PRIMARY KEY（主键索引）</span><br><span class="line">mysql&gt;ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` )</span><br><span class="line">2.添加UNIQUE(唯一索引)</span><br><span class="line">mysql&gt;ALTER TABLE `table_name` ADD UNIQUE (</span><br><span class="line">`column`</span><br><span class="line">)</span><br><span class="line">3.添加INDEX(普通索引)</span><br><span class="line">mysql&gt;ALTER TABLE `table_name` ADD INDEX index_name ( `column` )</span><br><span class="line">4.添加FULLTEXT(全文索引)</span><br><span class="line">mysql&gt;ALTER TABLE `table_name` ADD FULLTEXT ( `column`)</span><br><span class="line">5.添加多列索引</span><br><span class="line">mysql&gt;ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )</span><br><span class="line">6.删除索引</span><br><span class="line">ALTER TABLE table_name DROP INDEX index_name;</span><br></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/590513172/answer/2951267200?utm_id=0">mysql 如何添加和删除索引？ - 知乎 (zhihu.com)</a></p><p><a href="https://www.yzktw.com.cn/post/904908.html">mysql中创建索引的sql语句 - 老白网络 (yzktw.com.cn)</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX index_name ON table_name (column_name);</span><br><span class="line">在这个语句中，index_name是要创建的索引的名称，table_name是要创建索引的表的名称，column_name是要索引的列的名称。</span><br><span class="line">-------</span><br><span class="line">CREATE UNIQUE INDEX index_name ON table_name (column_name1，column_name2);</span><br><span class="line">您还可以在CREATE INDEX语句中使用KEYWORDS子句来指定索引的其他属性。例如，您可以使用UNIQUE关键字创建一个唯一索引。唯一索引中的所有值都必须是唯一的，否则该索引将不起作用。</span><br><span class="line">------</span><br><span class="line">CREATE FULLTEXT INDEX index_name ON table_name (column_name);</span><br><span class="line">还可以使用FULLTEXT关键字创建全文索引。全文索引可以帮助您更快地搜索文本数据。全文索引不支持所有数据类型，只支持CHAR、VARCHAR和TEXT类型。</span><br><span class="line">-------</span><br><span class="line">DROP INDEX index_name ON table_name;</span><br><span class="line">删除索引</span><br></pre></td></tr></table></figure><p><a href="https://www.yzktw.com.cn/post/655829.html">MySQL普通索引重复会影响查询速度？ - 老白网络 (yzktw.com.cn)</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql索引数据重复会影响效率吗？</span><br><span class="line"></span><br><span class="line">普通索引是一种最基本的索引类型，它可以加速数据库查询。普通索引可以在一个列上创建，也可以在多个列上创建联合索引。当我们在查询一张表的时候，如果使用了普通索引，MySQL会先在索引中查找匹配的值，然后再去表中查找对应的行。这样可以大大缩短查询的时间。</span><br><span class="line"></span><br><span class="line">但是，如果普通索引中存在重复值，查询速度就会受到影响。因为如果有多个行的索引值相同，MySQL就需要去表中查找这些行，这样就会增加查询的时间。</span><br><span class="line"></span><br><span class="line">那么，如何避免普通索引中的重复值呢？一种方法是使用唯一索引。唯一索引可以保证索引中的值都是唯一的，这样就可以避免重复值的情况。另一种方法是使用前缀索引。前缀索引是指只对索引的前几个字符进行索引，这样可以减少索引中的重复值。</span><br><span class="line"></span><br><span class="line">总之，普通索引是一种非常重要的索引类型，它可以加速数据库查询。但是，如果普通索引中存在重复值，就会影响查询速度。因此，我们应该尽量避免普通索引中的重复值，以提高查询效率。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于docker实现MySQL主从复制.md</title>
      <link href="/2023/02/10/%E5%9F%BA%E4%BA%8Edocker%E5%AE%9E%E7%8E%B0MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-md/"/>
      <url>/2023/02/10/%E5%9F%BA%E4%BA%8Edocker%E5%AE%9E%E7%8E%B0MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-md/</url>
      
        <content type="html"><![CDATA[<h1 id="基于docker实现MySQL主从复制"><a href="#基于docker实现MySQL主从复制" class="headerlink" title="基于docker实现MySQL主从复制"></a>基于docker实现MySQL主从复制</h1><p>参考:</p><p><a href="https://blog.csdn.net/a345203172/article/details/104059139">MySQL 主从分离（读写分离）原理_mysql 读写分离实现原理-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_31491059/article/details/114345011">mysql复制数据兵插入_跟大家聊聊mysql主从复制原理-CSDN博客</a></p><p><a href="https://blog.csdn.net/u010509052/article/details/80449134">windows下mysql主从复制配置_哪个配置设置主从复制方式-CSDN博客</a></p><p><a href="https://www.cnblogs.com/gdjlc/p/12222512.html">Windows下MySQL主从复制的配置 - gdjlc - 博客园 (cnblogs.com)</a></p><h5 id="主从复制的原理："><a href="#主从复制的原理：" class="headerlink" title="主从复制的原理："></a>主从复制的原理：</h5><p>图：</p><p><img src="https://pic.imgdb.cn/item/65ab302b871b83018a5934a8.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行流程说明：</span><br><span class="line">Master 主库进行 update、insert、delete 操作，按照顺序写入 bin log 中。当 Slave 连接到 Master 主库后,Master 主库会为 Slave 开启 binlog dump thread 线程,该线程会去读取 bin log日志</span><br><span class="line">Slave 从库生成两个线程，一个 I/O thread 线程，一个 SQL thread 线程</span><br><span class="line">I/O thread 线程去请求 Master 主库的 big log，请求通过 binlog dump thread 读取 bin log日志，并将得到的 big log 日志写入到 relay log(中继日志)文件中，中继日志记录数据更新的信息</span><br><span class="line">Slave 从库的 SQL thread 线程会实时监控 relay log 日志中内容是否有更新，如果有就会将更新的内容同步到 Slave 从库数据库中，这样就保证了主从的数据的同步</span><br></pre></td></tr></table></figure><h5 id="MySQL-主从复制的作用："><a href="#MySQL-主从复制的作用：" class="headerlink" title="MySQL 主从复制的作用："></a>MySQL 主从复制的作用：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在企业实际的开发中，后端 MySQL 数据库只有一台的时候，会有以下问题：</span><br><span class="line">单台 MySQL 服务故障不可用无法处理大量的并发数据请求数据会有丢失的风险</span><br><span class="line">如果是通过主从复制，它的优点就很明显，如下：</span><br><span class="line"></span><br><span class="line">如果 Master 主节点出现故障，那么我们就直接将服务切到 Slave 从节点，来保证服务立马可用如果并发请求特别大的时候，我们可用进行读写分离操作，让 Master 主库负责写，Slave 从库负责读如果 Master 主库数据丢失，Slave 从库还保存一份，减少数据丢失的风险</span><br></pre></td></tr></table></figure><h2 id="1、通过docker镜像搭建MySQL主从"><a href="#1、通过docker镜像搭建MySQL主从" class="headerlink" title="1、通过docker镜像搭建MySQL主从"></a>1、通过docker镜像搭建MySQL主从</h2><p>我们采用一主二从的方式</p><p>主服务器：容器名star-mysql-master，端口3306</p><p>从服务器：容器名star-mysql-slave1，端口3307</p><p>从服务器：容器名star-mysql-slave2，端口3308</p><h2 id="2、防火墙开放端口，和服务器的安全组也需要开放对应的端口（也可以不开防火墙，省掉防火墙的添加端口的步骤）"><a href="#2、防火墙开放端口，和服务器的安全组也需要开放对应的端口（也可以不开防火墙，省掉防火墙的添加端口的步骤）" class="headerlink" title="2、防火墙开放端口，和服务器的安全组也需要开放对应的端口（也可以不开防火墙，省掉防火墙的添加端口的步骤）"></a>2、防火墙开放端口，和服务器的安全组也需要开放对应的端口（也可以不开防火墙，省掉防火墙的添加端口的步骤）</h2><p>防火墙一系列命令，我们需要添加主从数据库需要的端口3306、3307、3308</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">防火墙设置</span><br><span class="line">查看防火墙状态 </span><br><span class="line">systemctl status firewalld </span><br><span class="line">开启防火墙 </span><br><span class="line">systemctl start firewalld   </span><br><span class="line">关闭防火墙 </span><br><span class="line">systemctl stop firewalld</span><br><span class="line">重启防火墙 </span><br><span class="line">service firewalld start  </span><br><span class="line"></span><br><span class="line">若遇到无法开启 先用：</span><br><span class="line">systemctl unmask firewalld.service  </span><br><span class="line">然后：</span><br><span class="line">systemctl start firewalld.service</span><br><span class="line">查询指定端口是否已开</span><br><span class="line">firewall-cmd --query-port=666/tcp</span><br><span class="line"></span><br><span class="line">开放端口保存</span><br><span class="line">添加指定需要开放的端口： </span><br><span class="line">firewall-cmd --add-port=123/tcp --permanent </span><br><span class="line">重载入添加的端口： </span><br><span class="line">firewall-cmd --reload </span><br><span class="line">查询指定端口是否开启成功： </span><br><span class="line">firewall-cmd --query-port=123/tcp</span><br><span class="line">移除端口</span><br><span class="line">移除指定端口： </span><br><span class="line">firewall-cmd --permanent --remove-port=123/tcp</span><br><span class="line">查询开放的防火墙列表</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line">若开放了端口还是连接不上你想要的端口，</span><br><span class="line">注意：有可能是你阿里云自带安全组策略限制的原因，这种情况需要在阿里云官方云服务器管理控制台手动开放。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看防火墙状态 </span><br><span class="line">systemctl status firewalld </span><br><span class="line">开启防火墙 </span><br><span class="line">systemctl start firewalld</span><br><span class="line">添加3306端口</span><br><span class="line">firewall-cmd --add-port=3306/tcp --permanent </span><br><span class="line">重载入添加的端口： </span><br><span class="line">firewall-cmd --reload </span><br><span class="line">查询开放的防火墙列表</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line">按照以上步骤依次添加3306、3307、3308端口</span><br><span class="line">注意云服务器上的防火墙的安全组也需要开放对应的端口 3306、3307、3308</span><br></pre></td></tr></table></figure><h2 id="3、启动docker"><a href="#3、启动docker" class="headerlink" title="3、启动docker"></a>3、启动docker</h2><p>这里需要你已经有安装docker的情况，如果没有安装docker就自己按照网上直接去安装一个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line">#查看当前docker 镜像</span><br><span class="line">docker images</span><br><span class="line">#查看当前docker容器的运行情况</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h2 id="4、搭建主服务器master-主机中创建slave用户"><a href="#4、搭建主服务器master-主机中创建slave用户" class="headerlink" title="4、搭建主服务器master(主机中创建slave用户)"></a>4、搭建主服务器master(主机中创建slave用户)</h2><p>解释</p><p>-d  是后台运行</p><p>-p 是暴露的端口号</p><p>-v 是我们的数据卷</p><p>–name 这个容器的名称</p><p>-e MYSQL_ROOT_PASSWORD&#x3D;123456 设置密码</p><p>mysql:8.0.31  mysql镜像的版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /home/mysql/master/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /home/mysql/master/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name star-mysql-master \</span><br><span class="line">mysql:8.0.31</span><br></pre></td></tr></table></figure><p>如果docker本地镜像中没有MySQL，会默认去下载镜像</p><p>创建MySQL主服务器配置文件：</p><p>默认情况下MySQL的binlog日志是自动开启的，可以通过如下配置定义一些可选配置</p><h4 id="创建mysql配置文件"><a href="#创建mysql配置文件" class="headerlink" title="创建mysql配置文件"></a>创建mysql配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /home/mysql/master/conf/my.cnf</span><br></pre></td></tr></table></figure><h4 id="配置文件内容："><a href="#配置文件内容：" class="headerlink" title="配置文件内容："></a>配置文件内容：</h4><p>通过vim命令写入到my.cnf即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 服务器唯一id，默认值1</span><br><span class="line">server-id=1</span><br><span class="line"># 设置日志格式，默认值ROW</span><br><span class="line">binlog_format=STATEMENT</span><br><span class="line"># 二进制日志名，默认binlog</span><br><span class="line"># log-bin=binlog</span><br><span class="line"># 设置需要复制的数据库，默认复制全部数据库</span><br><span class="line">#binlog-do-db=mytestdb</span><br><span class="line"># 设置不需要复制的数据库</span><br><span class="line">#binlog-ignore-db=mysql</span><br><span class="line">#binlog-ignore-db=infomation_schema</span><br></pre></td></tr></table></figure><p>解释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主库配置详解</span><br><span class="line">server-id = 1    #服务器 id，随意，但要唯一</span><br><span class="line">log_bin = /var/log/mysql/mysql-bin.log    #二进制文件存放路径</span><br><span class="line">read-only = 0    #[可选] 0（默认）表示读写（主机），1表示只读（从机）</span><br><span class="line">binlog_expire_logs_seconds = 2592000    #设置日志文件保留的时长，单位是秒</span><br><span class="line">max_binlog_size = 100M    #控制单个二进制日志大小。此参数的最大和默认值是1GB</span><br><span class="line">binlog_do_db = test    #待同步的数据库日志</span><br><span class="line">binlog_ignore_db = mysql,sys    #不同步的数据库日志</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：binlog日志</span><br><span class="line"></span><br><span class="line">binlog格式说明：</span><br><span class="line"></span><br><span class="line">binlog_format=STATEMENT：日志记录的是主机数据库的写指令，性能高，但是now()之类的函数以及获取系统参数的操作会出现主从数据不同步的问题。</span><br><span class="line"></span><br><span class="line">binlog_format=ROW（默认）：日志记录的是主机数据库的写后的数据，批量操作时性能较差，解决now()或者 user()或者 @@hostname 等操作在主从机器上不一致的问题。</span><br><span class="line"></span><br><span class="line">binlog_format=MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT，但是无法识别系统变量</span><br><span class="line"></span><br><span class="line">我们此处采用STATEMENT模式</span><br></pre></td></tr></table></figure><h4 id="因为修改了mysql的配置文件，需要重启MySQL容器"><a href="#因为修改了mysql的配置文件，需要重启MySQL容器" class="headerlink" title="因为修改了mysql的配置文件，需要重启MySQL容器"></a>因为修改了mysql的配置文件，需要重启MySQL容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a </span><br><span class="line">找到刚刚跑的3306端口的mysql 找到容器的id</span><br><span class="line">docker restart 容器的id</span><br><span class="line">重启成功后</span><br></pre></td></tr></table></figure><p>到这里如果防火墙关闭关闭（或者是服务器和安全组的防火墙对应端口有开） 就可以通过通过navicati进行远程连接了</p><p>如果访问不了可参考:<a href="https://blog.csdn.net/qq_43781399/article/details/112650755">Docker配置MySQL容器+远程连接（全流程）_连接docker中的mysql-CSDN博客</a></p><p>使用命令行登录MySQL主服务</p><p><a href="https://blog.csdn.net/weixin_44375561/article/details/122131074">mysql5.7与8.0密码加密方式_mysql_native_password-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入容器：env LANG=C.UTF-8 避免容器中显示中文乱码</span><br><span class="line">docker exec -it 3306端口的容器id  env LANG=C.UTF-8 /bin/bash</span><br><span class="line">或者使用 docker exec -it 3306端口的容器id  /bin/bash</span><br><span class="line"></span><br><span class="line">#进入容器内的mysql命令行</span><br><span class="line">mysql -uroot -p</span><br><span class="line"># 如果SQLyog或Navicat测试连接报错，修改默认加密方式</span><br><span class="line">#修改默认密码校验方式</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">因为版本是8.0的，修改密码改成了以上的方式，password()函数已经没用了</span><br><span class="line"></span><br><span class="line">MySql 从8.0开始修改密码有了变化，password字段没了，在user表加了字段authentication_string</span><br><span class="line">select host,user,authentication_string from user;</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+</span><br><span class="line">| host      | user             | authentication_string                                                  |</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+</span><br><span class="line">| %         | root             | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9                              |</span><br><span class="line">| %         | slave            | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9                              |</span><br><span class="line">| localhost | mysql.infoschema | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| localhost | mysql.session    | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| localhost | mysql.sys        | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |</span><br><span class="line">| localhost | root             | $A$005$MZ&gt;~3bCfZCrKL:9Odk5F3onHCfbtidA4VW.FFevMHJRdEHYF/OyuXbsvwM6 |</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line">可以查看到对应的信息</span><br></pre></td></tr></table></figure><h4 id="主机中创建slave用户"><a href="#主机中创建slave用户" class="headerlink" title="主机中创建slave用户"></a>主机中创建slave用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建slave用户</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;slave&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 设置密码</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">-- 授予复制权限</span><br><span class="line"></span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h4 id="主机中查询master状态"><a href="#主机中查询master状态" class="headerlink" title="主机中查询master状态"></a>主机中查询master状态</h4><p>执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure><h5 id="注意-记下File和Position的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。【file和position后续配置从服务器会使用】"><a href="#注意-记下File和Position的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。【file和position后续配置从服务器会使用】" class="headerlink" title="注意:记下File和Position的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。【file和position后续配置从服务器会使用】"></a>注意:记下File和Position的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。【file和position后续配置从服务器会使用】</h5><h2 id="5、搭建从服务器slave1、slave2"><a href="#5、搭建从服务器slave1、slave2" class="headerlink" title="5、搭建从服务器slave1、slave2"></a>5、搭建从服务器slave1、slave2</h2><p>在docker中创建并启动MySQL从服务器</p><p>复制shell会话或者新建两个终端，分别创建slave服务器</p><h4 id="docker中创建并启动MySQL从服务器slave1：端口3307"><a href="#docker中创建并启动MySQL从服务器slave1：端口3307" class="headerlink" title="docker中创建并启动MySQL从服务器slave1：端口3307"></a>docker中创建并启动MySQL从服务器slave1：端口3307</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"></span><br><span class="line">-p 3307:3306 \</span><br><span class="line"></span><br><span class="line">-v /home/mysql/slave1/conf:/etc/mysql/conf.d \</span><br><span class="line"></span><br><span class="line">-v /home/mysql/slave1/data:/var/lib/mysql \</span><br><span class="line"></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line"></span><br><span class="line">--name star-mysql-slave1 \</span><br><span class="line"></span><br><span class="line">mysql:8.0.31</span><br></pre></td></tr></table></figure><h4 id="docker中创建并启动MySQL从服务器slave2：端口3308"><a href="#docker中创建并启动MySQL从服务器slave2：端口3308" class="headerlink" title="docker中创建并启动MySQL从服务器slave2：端口3308"></a>docker中创建并启动MySQL从服务器slave2：端口3308</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"></span><br><span class="line">-p 3308:3306 \</span><br><span class="line"></span><br><span class="line">-v /home/mysql/slave2/conf:/etc/mysql/conf.d \</span><br><span class="line"></span><br><span class="line">-v /home/mysql/slave2/data:/var/lib/mysql \</span><br><span class="line"></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line"></span><br><span class="line">--name star-mysql-slave2 \</span><br><span class="line"></span><br><span class="line">mysql:8.0.31</span><br></pre></td></tr></table></figure><h3 id="创建MySQL从服务器配置文件："><a href="#创建MySQL从服务器配置文件：" class="headerlink" title="创建MySQL从服务器配置文件："></a>创建MySQL从服务器配置文件：</h3><h4 id="slave1："><a href="#slave1：" class="headerlink" title="slave1："></a>slave1：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /home/mysql/slave1/conf/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span><br><span class="line">server-id=2</span><br><span class="line"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span><br><span class="line">#relay-log=relay-bin</span><br></pre></td></tr></table></figure><h4 id="slave2："><a href="#slave2：" class="headerlink" title="slave2："></a>slave2：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /home/mysql/slave2/conf/my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span><br><span class="line">server-id=3</span><br><span class="line"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span><br><span class="line">#relay-log=relay-bin</span><br></pre></td></tr></table></figure><p>解释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id = 2    #服务器 id，随意，但要唯一</span><br><span class="line">log_bin = /var/log/mysql/mysql-bin.log    #二进制文件存放路径</span><br><span class="line">read-only = 1    #[可选] 0（默认）表示读写（主机），1表示只读（从机）</span><br><span class="line">binlog_expire_logs_seconds = 2592000    #设置日志文件保留的时长，单位是秒</span><br><span class="line">max_binlog_size = 100M    #控制单个二进制日志大小。此参数的最大和默认值是1GB</span><br><span class="line">replicate_do_db = test    #待同步的数据库日志</span><br><span class="line">replicate_ignore_db = mysql,sys    #不同步的数据库日志</span><br></pre></td></tr></table></figure><h4 id="重启MySQL容器（slave1、slave2）"><a href="#重启MySQL容器（slave1、slave2）" class="headerlink" title="重启MySQL容器（slave1、slave2）"></a>重启MySQL容器（slave1、slave2）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart 3307端口的从库容器id</span><br><span class="line"></span><br><span class="line">docker restart 3308端口的从库容器id</span><br></pre></td></tr></table></figure><h4 id="使用命令行登录MySQL从服务器："><a href="#使用命令行登录MySQL从服务器：" class="headerlink" title="使用命令行登录MySQL从服务器："></a>使用命令行登录MySQL从服务器：</h4><h4 id="slave1：-1"><a href="#slave1：-1" class="headerlink" title="slave1："></a>slave1：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入容器：</span><br><span class="line"></span><br><span class="line">docker exec -it 3307端口的从库容器id env LANG=C.UTF-8 /bin/bash</span><br><span class="line">或者使用 docker exec -it 3307端口的从库容器id /bin/bash</span><br><span class="line"></span><br><span class="line">#进入容器内的mysql命令行</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">#修改默认密码校验方式</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="slave2：-1"><a href="#slave2：-1" class="headerlink" title="slave2："></a>slave2：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 3308端口的从库容器id env LANG=C.UTF-8 /bin/bash</span><br><span class="line">或者使用 docker exec -it 3308端口的从库容器id /bin/bash</span><br><span class="line">#进入容器内的mysql命令行</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">#修改默认密码校验方式</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h4 id="在从机上配置主从关系："><a href="#在从机上配置主从关系：" class="headerlink" title="在从机上配置主从关系："></a>在从机上配置主从关系：</h4><h5 id="注意：此处就需要用到我们之前记录好的主库的file和position："><a href="#注意：此处就需要用到我们之前记录好的主库的file和position：" class="headerlink" title="注意：此处就需要用到我们之前记录好的主库的file和position："></a>注意：此处就需要用到我们之前记录好的主库的file和position：</h5><h5 id="通过在主库执行SHOW-MASTER-STATUS-可以查看主库这两项配置，但是执行命令后不要再操作主库，以免发生改变"><a href="#通过在主库执行SHOW-MASTER-STATUS-可以查看主库这两项配置，但是执行命令后不要再操作主库，以免发生改变" class="headerlink" title="通过在主库执行SHOW MASTER STATUS;可以查看主库这两项配置，但是执行命令后不要再操作主库，以免发生改变"></a>通过在主库执行SHOW MASTER STATUS;可以查看主库这两项配置，但是执行命令后不要再操作主库，以免发生改变</h5><p>解释设置主库的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置主库的ip</span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;主库的IP地址&#x27;, </span><br><span class="line">//这是我们在主库创建的从库用户，通过他来进行连接，用户名，密码，端口</span><br><span class="line">MASTER_USER=&#x27;slave&#x27;,MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_PORT=3306,</span><br><span class="line">//主库的SHOW MASTER STATUS查到的 file和position</span><br><span class="line">MASTER_LOG_FILE=&#x27;主库的file&#x27;,MASTER_LOG_POS=主库的position;</span><br></pre></td></tr></table></figure><h5 id="slave1、slave2："><a href="#slave1、slave2：" class="headerlink" title="slave1、slave2："></a>slave1、slave2：</h5><h5 id="都执行配置主库的操作"><a href="#都执行配置主库的操作" class="headerlink" title="都执行配置主库的操作"></a>都执行配置主库的操作</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;192.168.145.48&#x27;, </span><br><span class="line">MASTER_USER=&#x27;slave&#x27;,MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_PORT=3306,</span><br><span class="line">MASTER_LOG_FILE=&#x27;binlog.000003&#x27;,MASTER_LOG_POS=1357; </span><br></pre></td></tr></table></figure><h5 id="启动主从同步"><a href="#启动主从同步" class="headerlink" title="启动主从同步"></a>启动主从同步</h5><p>slave1、slave2：都执行开启主从同步</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动从机的复制功能，执行SQL：</span><br><span class="line"></span><br><span class="line">START SLAVE;</span><br><span class="line"></span><br><span class="line">-- 查看状态（不需要分号） \G表示纵向显示, G需要大写</span><br><span class="line"></span><br><span class="line">SHOW SLAVE STATUS\G</span><br><span class="line"></span><br><span class="line">               Slave_IO_State: Waiting for source to send event</span><br><span class="line">                  Master_Host: 39.108.121.100</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: binlog.000001</span><br><span class="line">          Read_Master_Log_Pos: 1514</span><br><span class="line">               Relay_Log_File: 757024baf128-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 1346</span><br><span class="line">        Relay_Master_Log_File: binlog.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Slave_IO_Running: Yes，Slave_SQL_Running: Yes时说明两个线程已启动，主从复制配置成功。</p><h2 id="最后在主库测试一下新建库，新建表，新增数据，从库那边都会跟着同步"><a href="#最后在主库测试一下新建库，新建表，新增数据，从库那边都会跟着同步" class="headerlink" title="最后在主库测试一下新建库，新建表，新增数据，从库那边都会跟着同步"></a>最后在主库测试一下新建库，新建表，新增数据，从库那边都会跟着同步</h2><h2 id="说明主从复制成功了"><a href="#说明主从复制成功了" class="headerlink" title="说明主从复制成功了"></a>说明主从复制成功了</h2><h2 id="如果需要取消主从复制"><a href="#如果需要取消主从复制" class="headerlink" title="如果需要取消主从复制"></a>如果需要取消主从复制</h2><p>参考：<a href="https://blog.csdn.net/mrbuffoon/article/details/105708418">Mysql取消主从复制_mariadb 删除slave-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、slave流程</span><br><span class="line">首先停止slave</span><br><span class="line">mysql&gt;stop slave;</span><br><span class="line"></span><br><span class="line">清除slave信息</span><br><span class="line">mysql&gt;reset slave all;</span><br><span class="line"></span><br><span class="line"># 可以通过以下命令查看当前状态</span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line"></span><br><span class="line">Emptyset (0,00 sec)</span><br><span class="line"></span><br><span class="line">之后slave可以直接关闭下线。</span><br><span class="line"></span><br><span class="line">2、master流程</span><br><span class="line">清除master上主从信息</span><br><span class="line">mysql&gt; reset master;</span><br><span class="line"></span><br><span class="line">修改配置重启mysql</span><br><span class="line">如果想彻底清除主从的机制，可以修改配置文件，删除主从相关的配置项，然后重启mysql即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>futter实战</title>
      <link href="/2022/11/15/futter%E5%AE%9E%E6%88%98/"/>
      <url>/2022/11/15/futter%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>futter实战学习</p><p>参考<br>flutter生命周期<a href="https://www.jianshu.com/p/f39cf2f7ad78">https://www.jianshu.com/p/f39cf2f7ad78</a></p><p><a href="https://juejin.cn/post/6952110071476125709">Flutter Json、List、Map互转 - 掘金 (juejin.cn)</a></p><p>[Flutter Dart 正则RegExp 区间<a href="https://blog.csdn.net/u013491829/article/details/108555553">A-z0-9]、[\s\S]、\w（二）_正则匹配 0<del>9 a</del>z_️ 邪神的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/8b4cc0dc3309">Flutter常用正则 - 简书 (jianshu.com)</a></p><p>flutter 强制横屏 <a href="https://blog.51cto.com/u_11070617/5539519">https://blog.51cto.com/u_11070617/5539519</a></p><p><a href="https://blog.csdn.net/m0_46527751/article/details/122675587">Flutter下拉刷新和上拉加载更多_flutter 上拉加载更多_s－010101的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/LJLThomson/article/details/115573649">(51条消息) 20 Flutter TextField单行文本和多行文本_LJLThomson的博客-CSDN博客_flutter textfield 多行</a></p><p><a href="https://blog.csdn.net/qq_43465781/article/details/114232299">(51条消息) flutter 底部输入框被键盘遮挡问题_※ᝰ的博客-CSDN博客</a></p><p><a href="https://juejin.cn/post/7116674755603726343">Dart&#x2F;Flutter：如何检查字符串是否包含字母、数字 - 掘金 (juejin.cn)</a></p><p><a href="https://www.jianshu.com/p/858dd419e94a">Flutter String 常用方法 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/shulianghan/article/details/113700234">(37条消息) 【Flutter】Dart 数据类型 Map 类型 ( 创建 Map 集合 | 初始化 Map 集合 | 遍历 Map 集合 )_韩曙亮的博客-CSDN博客_dart map遍历</a></p><p><a href="https://blog.csdn.net/u011578734/article/details/111871833">(90条消息) Flutter DateTime日期获取&amp;字符串与日期之间转换_flutter 字符串转日期_卜大爷的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/zl18603543572/article/details/109427065">(90条消息) Flutter 底部弹框 showModalBottomSheet 使用Demo_如何知道showbottomsheet已显示_早起的年轻人的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/417447665">Flutter 多项选择弹窗详解 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/qq_41070101/article/details/108088700">(90条消息) flutter 底部弹出选择器（选择性别，出生日期）_言希-的博客-CSDN博客</a></p><p><a href="https://segmentfault.com/q/1010000021438706">flutter PDA 扫描自动回车，但是不会触发RawKeyboardListener的onKey事件 - SegmentFault 思否</a></p><p><a href="https://www.jianshu.com/p/33675f2c352f">flutter：实现扫码枪获取数据源，禁止系统键盘弹窗 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/0d2d025cfe4c">Flutter —– Timer(定时器) - 简书 (jianshu.com)</a></p><p><a href="https://segmentfault.com/a/1190000039380091">android - Flutter 返回上一页并刷新_个人文章 - SegmentFault 思否</a></p><p><a href="https://blog.csdn.net/qq_41160739/article/details/124846630?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-124846630-blog-109055201.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-124846630-blog-109055201.pc_relevant_default&utm_relevant_index=11">(36条消息) Flutter 返回上一页并主动触发刷新_ 北岭有燕的博客-CSDN博客_flutter返回上个页面 同时刷新数据</a></p><p><a href="https://www.jianshu.com/p/4f24d21d46b8">Flutter TextField输入框如何优雅的禁止弹出软键盘 - 简书 (jianshu.com)</a></p><p>flutter 打包apk</p><p>flutter build apk</p><p><a href="https://blog.csdn.net/qihoo_tech/article/details/102512734">(31条消息) 用Flutter 写一个简单页面_360技术的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/gaozhang12345/p/12052983.html">flutter onPressed onTap等手势检测及触摸事件处理 - 高彰 - 博客园 (cnblogs.com)</a></p><p><a href="https://book.flutterchina.club/chapter3/input_and_form.html#_3-5-1-textfield">3.5 输入框及表单 | 《Flutter实战·第二版》 (flutterchina.club)</a></p><p><a href="https://blog.csdn.net/xudailong_blog/article/details/94123706">(31条消息) flutter text设置文本对齐，文本大小，颜色，行数_xudailong_blog的博客-CSDN博客_flutter text 颜色</a></p><p><a href="https://blog.csdn.net/xiaoqi307/article/details/95169874">(31条消息) flutter的textField设置圆形边框并且改变边框颜色，如果不修改会显示主题颜色_matchaJay的博客-CSDN博客_flutter textfield 边框颜色</a></p><p><a href="https://blog.csdn.net/ruoshui_t/article/details/90409586">(31条消息) Flutter Text(Flutter文本显示和样式)_马志武的博客-CSDN博客_flutter text 样式</a></p><p><a href="https://xiaozhuanlan.com/topic/1485936702">Flutter Widget 控件系列（10）：下拉控件、弹出菜单 － 小专栏 (xiaozhuanlan.com)</a></p><p><a href="https://qastack.cn/programming/49273157/how-to-implement-drop-down-list-in-flutter">如何在flutter中实现下拉列表？ (qastack.cn)</a></p><p><a href="https://www.jianshu.com/p/8f6a43854125">flutter-插件-自定义下拉组件(flutter_custom_dropdown) - 简书 (jianshu.com)</a></p><p><a href="https://www.coder.work/article/7528673">Flutter从DropDropdownButton删除底部的下划线 - IT工具网 (coder.work)</a></p><p><a href="http://www.findsrc.com/flutter/detail/8815">flutter中如何disable文本输入框TextField？_flutter_码云网 (findsrc.com)</a></p><p><a href="https://blog.csdn.net/qq_43465781/article/details/114232299">(31条消息) flutter 底部输入框被键盘遮挡问题_※ᝰ的博客-CSDN博客_flutter 底部输入框</a></p><p><a href="https://blog.csdn.net/generallizhong/article/details/96276125">(31条消息) Flutter基础之基本数据类型_generallizhong的博客-CSDN博客_flutter long类型</a></p><p><a href="https://www.jianshu.com/p/46b1408f3a79">Flutter&#x2F;Dart - 循环语句 forEach map where any every详解 - 简书 (jianshu.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1855788">flutter实现分割线的三种方法 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/ivy_doudou/article/details/100976512">(31条消息) 【flutter】输入框控制输入类型和键盘、输入框抵住键盘、关闭键盘、强制横屏&#x2F;竖屏_ivy_doudou的博客-CSDN博客_flutter 键盘类型</a></p><hr><p>flutter 打包是出错Build failed due to use of deprecated Android v1 embedding.</p><p>可能是flutter版本设置对了，但是环境变量忘记换到最前面了，把flutter的环境变量的path弄到最前面，重新打开项目即可</p><p><a href="https://blog.csdn.net/qq_39949866/article/details/123663878">(51条消息) Flutter打开新项目报错Build failed due to use of deprecated Android v1 embedding._没头脑&amp;不高兴的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43885334/article/details/126854647">(51条消息) Flutter 运行新项目时报错 Build failed due to use of deprecated Android v1 embedding.（已解决）_–程的博客-CSDN博客</a></p><hr><p><a href="https://www.jianshu.com/p/02faf4539cbe">flutter笔记（十）—–输入框TextField - 简书 (jianshu.com)</a></p><p>icon</p><p><a href="https://blog.csdn.net/weixin_43721423/article/details/100145202">(31条消息) Flutter之提示组件_roadkiller.的博客-CSDN博客_flutter 提示</a></p><p><a href="https://www.iconfont.cn/search/index">iconfont-阿里巴巴矢量图标库</a></p><p><a href="https://qa.1r1g.com/sf/ask/4096609891/%EF%BC%88%E7%84%A6%E7%82%B9%E7%9B%91%E5%90%AC%EF%BC%8C%E5%92%8C%E8%BE%93%E5%85%A5%E6%A1%86%E5%BA%95%E4%B8%8B%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%EF%BC%89">https://qa.1r1g.com/sf/ask/4096609891/（焦点监听，和输入框底下提示信息）</a></p><p>页面元素的最外层嵌套一层 SingleChildScrollView并将resizeToAvoidBottomInset设置为true：</p><p><code>child: Sc</code>affold(<code> </code>appBar: AppBar(…),<code> </code>body: Container(<code> </code>child: SingleChildScrollView(<code> </code>child: body(…),<code> </code>),<code> </code>),<code> </code>resizeToAvoidBottomInset: true,<code> ),</code></p><p>flutter表单</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body: SingleChildScrollView(</span><br><span class="line">  physics: AlwaysScrollableScrollPhysics(),</span><br><span class="line">  child: Container(</span><br><span class="line">      height: screenSize.height-150,</span><br><span class="line">      width: screenSize.width,</span><br><span class="line">      decoration: new BoxDecoration(color: hex(&quot;#F4F4F4&quot;)),</span><br><span class="line">      child: buildDataList(context, screenSize)</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line">Widget buildDataList(BuildContext context, Size screenSize) &#123;</span><br><span class="line">    double width=screenSize.width/4;</span><br><span class="line">    return new Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">          height: 40,</span><br><span class="line">          color: Colors.white,</span><br><span class="line">          padding: EdgeInsets.only(bottom: 5),</span><br><span class="line">          child: Row(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                padding: EdgeInsets.only(left: 5, top: 10),</span><br><span class="line">                width: width+10,</span><br><span class="line">                child: Text(&quot;检验项目&quot;, style: TextStyle(fontSize: 14,color: Color(0xff00d0b1)),),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                padding: EdgeInsets.only(top: 10),</span><br><span class="line">                width: width+10,</span><br><span class="line">                child: Text(&quot;检验方法&quot;, style: TextStyle(fontSize: 14,color: Color(0xff00d0b1)),),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                padding: EdgeInsets.only(top: 10),</span><br><span class="line">                width: width+10,</span><br><span class="line">                child: Text(&quot;检验结果&quot;, style: TextStyle(fontSize: 14,color: Color(0xff00d0b1)),),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                padding: EdgeInsets.only(top: 10),</span><br><span class="line">                alignment: Alignment.center,</span><br><span class="line">                width: width-30,</span><br><span class="line">                child: Text(&quot;操作&quot;, style: TextStyle(fontSize: 14,color: Color(0xff00d0b1)),),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        ARow(</span><br><span class="line">          height: 1,</span><br><span class="line">          color: hex(&quot;#535353&quot;),</span><br><span class="line">          leftChild: Container(</span><br><span class="line">            color: hex(&quot;#535353&quot;),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          height: screenSize.height-195,</span><br><span class="line">          child: ListView.builder(</span><br><span class="line">              controller: _scrollController,</span><br><span class="line">              itemCount: this.listProcessQualityInspectionItem.length,</span><br><span class="line">              itemBuilder: (BuildContext context, int index) &#123;</span><br><span class="line">                return Container(</span><br><span class="line">                  margin: EdgeInsets.only(top: 2, bottom: 2),</span><br><span class="line">                  alignment: Alignment.topLeft,</span><br><span class="line">                  width: screenSize.width,</span><br><span class="line">                  decoration: new BoxDecoration(</span><br><span class="line">                    color: Colors.blue,</span><br><span class="line">                    borderRadius: BorderRadius.all(Radius.circular(5.0)),</span><br><span class="line">                  ),</span><br><span class="line">                  child: Container(</span><br><span class="line">                    decoration: new BoxDecoration(</span><br><span class="line">                      color: Colors.white,</span><br><span class="line">                      borderRadius: BorderRadius.all(Radius.circular(5.0)),</span><br><span class="line">                    ),</span><br><span class="line">                    child: Column(</span><br><span class="line">                      children: &lt;Widget&gt;[</span><br><span class="line">                        Container(</span><br><span class="line">                            padding: EdgeInsets.only(top: 10, bottom: 10),</span><br><span class="line">                            child: Container(</span><br><span class="line">                              alignment: Alignment.topLeft,</span><br><span class="line">                              child: Row(</span><br><span class="line">                                children: &lt;Widget&gt;[</span><br><span class="line">                                  Container(</span><br><span class="line">                                    alignment: Alignment.centerLeft,</span><br><span class="line">                                    width: width+10,</span><br><span class="line">                                    padding: EdgeInsets.only(left:5,top: 2),</span><br><span class="line">                                    child: Text(this.listProcessQualityInspectionItem[index].qualityInspectionItemName,</span><br><span class="line">                                      style: TextStyle(fontSize: 13,</span><br><span class="line">                                          color: Colors.black54),),</span><br><span class="line">                                  ),</span><br><span class="line">                                  Container(</span><br><span class="line">                                      alignment: Alignment.centerLeft,</span><br><span class="line">                                      width: width+10,</span><br><span class="line">                                      padding: EdgeInsets.only(top: 2),</span><br><span class="line">                                      child: Text(this.listProcessQualityInspectionItem[index].inspectionMethod,</span><br><span class="line">                                        style: TextStyle(fontSize: 13,</span><br><span class="line">                                            color: Colors.black54),),</span><br><span class="line">                                  ),</span><br><span class="line">                                  Container(</span><br><span class="line">                                    alignment: Alignment.center,</span><br><span class="line">                                    width: width + 10 ,</span><br><span class="line">                                    height: 35,</span><br><span class="line">                                    padding: EdgeInsets.only(top: 2),</span><br><span class="line">                                    child: TextField(</span><br><span class="line">                                      textAlign: TextAlign.left,</span><br><span class="line">                                      maxLines: 10,</span><br><span class="line">                                      controller: this.mapController[this.listProcessQualityInspectionItem[index].qualityInspectionItemName],</span><br><span class="line">                                      keyboardType: TextInputType.text,</span><br><span class="line">                                      decoration:new InputDecoration(</span><br><span class="line">                                        contentPadding: EdgeInsets.only(top: 0.0, right: 25),</span><br><span class="line">                                        enabledBorder: new UnderlineInputBorder( // 不是焦点的时候颜色</span><br><span class="line">                                          borderSide: BorderSide(</span><br><span class="line">                                              color: Color(0x19000000)</span><br><span class="line">                                          ),</span><br><span class="line">                                        ),</span><br><span class="line">                                        focusedBorder: new UnderlineInputBorder( // 焦点集中的时候颜色</span><br><span class="line">                                          borderSide: BorderSide(</span><br><span class="line">                                              color: Color(0x19000000)</span><br><span class="line">                                          ),</span><br><span class="line">                                        ),</span><br><span class="line">                                        hintStyle: TextStyle(</span><br><span class="line">                                          color: Colors.grey,</span><br><span class="line">                                        ),</span><br><span class="line">                                      ),</span><br><span class="line">                                      onChanged: (value)&#123;</span><br><span class="line">                                        this.listProcessQualityInspectionItem[index].inspectionResult = value;</span><br><span class="line">                                      &#125;,</span><br><span class="line">                                    ),</span><br><span class="line">                                  ),</span><br><span class="line">                                  InkWell(</span><br><span class="line">                                    onTap: () &#123;</span><br><span class="line">                                      this.showAlertDialogMain(context,this.listProcessQualityInspectionItem[index]);</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    child: Container(</span><br><span class="line">                                      alignment: Alignment.center,</span><br><span class="line">                                      width: width-30,</span><br><span class="line">                                      padding: EdgeInsets.only(top: 2),</span><br><span class="line">                                      child: Text(&quot;查看&quot;,</span><br><span class="line">                                        style: TextStyle(fontSize: 13,</span><br><span class="line">                                            color: Color(0xff00d0b1)),),</span><br><span class="line">                                    ),</span><br><span class="line">                                  )</span><br><span class="line">                                ],</span><br><span class="line">                              ),</span><br><span class="line">                            )</span><br><span class="line">                        ),</span><br><span class="line">                        ARow(</span><br><span class="line">                          height: 1,</span><br><span class="line">                          color: hex(&quot;#535353&quot;),</span><br><span class="line">                          leftChild: Container(</span><br><span class="line">                            color: hex(&quot;#535353&quot;),</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                      ],</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习</title>
      <link href="/2022/11/08/Flutter%E5%AE%89%E8%A3%85/"/>
      <url>/2022/11/08/Flutter%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Flutter安装</p><p>以下是Flutter 一些参考资料网址<br>flutter 插件：<a href="https://pub.dev/packages">https://pub.dev/packages</a><br>flutter 中文开发者网站：<a href="https://flutter.cn/docs/get-started/install">https://flutter.cn/docs/get-started/install</a><br>flutter中文网文档：<a href="https://doc.flutterchina.club/docs/">https://doc.flutterchina.club/docs/</a><br>flutter 实战第二版：<a href="https://book.flutterchina.club/">https://book.flutterchina.club/</a></p><p><a href="https://www.bilibili.com/video/BV1S4411E7LY?p=16&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=15500a48df7d25db971af17c14834cbe">16 Flutter介绍-Flutter Windows Android环境搭建 真机调试_哔哩哔哩_bilibili</a></p><p>先确定版本，先到flutter的下载网址查看跟dart的版本是否在范围内，flutter 里面的bin\cache文件里面有对应的dart版本</p><p>如果有安装Android Studio，和Android Studio SDK ，就不需要在做什么操作，如果没有则需要安装</p><p><strong>注意安装Android studio的时候记得不要有空格</strong></p><p><a href="https://www.cnblogs.com/wxxwjef/p/12370891.html">记录flutter配置android studio路径的一个坑 - wxxwjef - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/chickenbro_/article/details/84254214">Android studio安装和SDK下载安装_http://tools.android-studio.org/index.php/sdk-CSDN博客</a></p><p>ANDROID_SDK_HOME</p><p>%ANDROID_SDK_HOME%\platform-tools</p><p><strong>检查是否安装成功</strong></p><p>win+r 输入 cmd</p><p>输入adb 以下显示安装配置成功</p><p><a href="https://blog.csdn.net/Laladoge/article/details/108996916">(25条消息) Android Studio 配置环境变量_Bessie cheng的博客-CSDN博客_android studio添加环境变量</a></p><p>flutter doctor –android-licenses</p><p>提示</p><p>flutter doctor –android-licenses<br>Android sdkmanager tool not found (D:\java\Android\AndroidStudioSdk\tools\bin\sdkmanager).<br>Try re-installing or updating your Android SDK,<br>visit <a href="https://flutter.dev/setup/#android-setup">https://flutter.dev/setup/#android-setup</a> for detailed instructions.</p><p>这个意思就是说，我的Android sdkmanager 不存在。然后按照提示的目录信息，去找了一下，发现我的sdk目录下，根本就没有tools这个文件夹。</p><p>主要默认这个选项也是看不到的。记得将<code>Hide Obsolete Packages</code>这个选项勾选取消掉。默认是勾选的。</p><p><a href="https://cloud.tencent.com/developer/article/1603936">【flutter】Android sdkmanager tool not found-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>下载完Android SDK Tools（Obsolete）</p><p>在flutter doctor –android-licenses一下即可</p><p><a href="https://www.cnblogs.com/magic-world/p/14481107.html">flutter安装Android Studio遇到的问题 - 骑蝴蝶飞 - 博客园 (cnblogs.com)</a></p><p>主要原因是Androidstudio升级到4.1之后 安装pluging路径变了导致我们使用 flutter doctor命令之后 flutter检测不到</p><p>解决方案：</p><p>原因为AS4.1还未兼容Flutter stable，须手动切换到dev</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter channel dev</span><br></pre></td></tr></table></figure><p>后执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter doctor -v</span><br></pre></td></tr></table></figure><p>下载完之后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>其实可以不用管环境插件警告， 项目可正常使用，无用担心。</p><h2 id="打开JDK目录并将文件移动至AS的安装目录中的jre中"><a href="#打开JDK目录并将文件移动至AS的安装目录中的jre中" class="headerlink" title="打开JDK目录并将文件移动至AS的安装目录中的jre中"></a>打开JDK目录并将文件移动至AS的安装目录中的jre中</h2><p>打开下载好的<strong>JDK的目录</strong>并复制<strong>里面的内容</strong>。</p><p><a href="https://blog.csdn.net/woshidanoob/article/details/128779709">【Flutter环境配置问题】Unable to find bundled Java version._woshidanoob的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/CSDN_15166447949/article/details/120283782">Flutter环境配置踩坑记录_flutter unsupported major.minor version 61.0-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_45862329/article/details/129861888">记坑：flutter doctor –android-licenses 【报错】Exception in thread “main“ Android sdkmanager tool was foun_万里江山似锦绣的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_40976321/article/details/121806555?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121806555-blog-121785594.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121806555-blog-121785594.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1">(25条消息) Flutter环境安装(超详细)_Muchen灬的博客-CSDN博客_flutter 安装</a></p><p><a href="https://img-blog.csdnimg.cn/8396bddce2f74a86b566d6c880c20941.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXVjaGVu54Gs,size_20,color_FFFFFF,t_70,g_se,x_16">https://img-blog.csdnimg.cn/8396bddce2f74a86b566d6c880c20941.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXVjaGVu54Gs,size_20,color_FFFFFF,t_70,g_se,x_16</a></p><p>并需要配对应的环境变量</p><p>dart sdk 地址 <a href="https://dart.dev/get-dart/archive">Archive | Dart</a></p><p>flutter 版本网址 <a href="https://docs.flutter.dev/development/tools/sdk/releases#windows">Flutter SDK 发布|扑动</a></p><p><a href="https://blog.csdn.net/wangyajuncsd/article/details/115557696">(87条消息) flutter,升级dart sdk_dart sdk升级_googleCge的博客-CSDN博客</a></p><p>flutter命令</p><p><a href="https://blog.csdn.net/hyt_struggle/article/details/121479482">(31条消息) vivo手机与Android studio连接(本人亲身测试)_hyt_struggle的博客-CSDN博客_android studio vivo</a></p><p>flutter检查</p><p>flutter –version</p><p>dart -version</p><p>flutter doctor</p><p>flutter config 查看flutter配置</p><p>查看flutter指定的android-sdk</p><p>flutter config –android-sdk</p><p>查看flutter指定的android-studio-dir</p><p>flutter config –android-studio-dir</p><p>设置flutter config的安卓sdk</p><p>如果有中文字符需要加引号</p><p>flutter config <em>–android-sdk “现在的Android SDK 路径”</em> eg: flutter config <em>–android-sdk &#x2F;Users&#x2F;xiuji&#x2F;Library&#x2F;Android&#x2F;sdk</em></p><p><strong><code>flutter config  --android-sdk **“E:\Program Files\Android\Android Studio SDK”**</code></strong></p><p>**<code>flutter config --android-studio-dir &quot;E:\Program Files\Android\Android Studio&quot;**</code></p><p>flutter doctor –android-licenses</p><p>注意</p><p>跑项目的时候先去android.local.properties的文件看配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdk.dir=E:\\Program Files\\Android\\Android Studio SDK</span><br><span class="line">flutter.sdk=E:\\Program Files\\flutter\\flutter</span><br></pre></td></tr></table></figure><p>要和setting里面的android-sdk和dir一样</p><p>然后在flutter doctor 测试一下可不可以通过</p><p>最好在改一下utils.ajax.dart文件中改成自己的ip地址</p><p>IPv4 地址 . . . . . . . . . . . . : 192.168.2.31</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static const BASE_URL = &#x27;http://192.168.2.31:7001&#x27;;</span><br></pre></td></tr></table></figure><p>安卓跑项目时需要运行项目报这么一个错，意思说JDK版本的问题，说<a href="https://so.csdn.net/so/search?q=gradle&spm=1001.2101.3001.7020">gradle</a>插件需要JDK11，但是我指定了1.8</p><p><a href="https://blog.csdn.net/msn465780/article/details/122785568?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-122785568-blog-127913029.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-122785568-blog-127913029.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=1">https://blog.csdn.net/msn465780/article/details/122785568?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122785568-blog-127913029.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122785568-blog-127913029.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=1</a></p><p>如果用的是两个flutter 记得在环境变量中的path中，找到两个flutter的环境变量，想要用哪个flutter就将想要用的flutter排在前面，</p><p>D:\Program Files\flutter\flutter\bin</p><p>E:\Program Files\flutter\flutter\bin</p><p>在Android Studio开发工具中的file.setting 里面</p><p>设置flutter的版本路径D:\Program Files\flutter\flutter</p><p>设置Dart版本路径D:\Program Files\flutter\flutter\bin\cache\dart-sdk</p><p>设置Android SDK  E:\Program Files\Android\Android Studio SDK</p><p>加上其它设置</p><p>跑项目的时候如果报错</p><p>1、查看对应项目的E:\drlc\qingyuan\app\android目录下是否有key.properties文件，如果没有要加进去</p><p>2、查看对应项目的E:\drlc\qingyuan\app\android\app目录下</p><p>是否有key文件，并且里面要有app.jks，如果没有要加进去</p><p><a href="https://blog.csdn.net/a506602491/article/details/126084472">(50条消息) flutter报错HTTP Host Availability (the doctor check crashed)的解决办法_–勇的博客-CSDN博客_flutter http报错</a></p><p><a href="https://blog.csdn.net/woai_mihoutao/article/details/129777065">(87条消息) flutter配置环境变量中出现的错误及解决办法_七个喵的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/xo19882011/article/details/131386094">(87条消息) flutter 3.10.5 安装问题_xo19882011的博客-CSDN博客</a></p><p>​</p><p><a href="https://blog.csdn.net/qq_43336158/article/details/122558229">(25条消息) Android toolchain - develop for Android devices (Android SDK version 32.0.0)_阿大豆的博客-CSDN博客_android toolchain</a></p><p><a href="https://blog.csdn.net/yechaoa/article/details/89175322">https://blog.csdn.net/yechaoa/article/details/89175322</a></p><p><a href="https://blog.csdn.net/qq_40976321/article/details/121806555?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121806555-blog-121785594.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121806555-blog-121785594.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1">(25条消息) Flutter环境安装(超详细)_Muchen灬的博客-CSDN博客_flutter 安装</a></p><p><a href="https://article.juejin.cn/post/7243357900940378170">flutter运行一直显示Running Gradle task ‘assembleDebug’… - 掘金 (juejin.cn)</a></p><p>[(27条消息) Flutter报错之Waiting for another flutter command to release the startup lock解决方案_敲代码的小强的博客-CSDN博客</p><p><a href="https://blog.csdn.net/hzqit520/article/details/121541867"></a></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><code>解决方案</code></h3><ol><li><p><code>关闭Android Studio</code></p></li><li><p><code>打开flutter安装目录/bin/cache</code></p></li><li><p><code>删除lockfile文件</code></p></li><li><p>删除之后你再运行</p><p>flutter packages get</p></li><li><p><code>完美解决</code></p></li></ol><p>6.最后 flutter doctor检测看看</p><p><a href="https://blog.csdn.net/zxc514257857/article/details/102295643">(27条消息) Flutter开发之移动FlutterSDK的位置_DreamBackTo的博客-CSDN博客_flutter sdk 位置</a></p><p><a href="https://www.cnblogs.com/hbolin/p/12727186.html">Flutter Windows应用demo - 柏。 - 博客园 (cnblogs.com)</a></p><p>Visual Studio - develop for Windows<br>X Visual Studio not installed; this is necessary for Windows development.<br>Download at <a href="https://visualstudio.microsoft.com/downloads/">https://visualstudio.microsoft.com/downloads/</a>.<br>Please install the “Desktop development with C++” workload, including all of its default components</p><p>解决方法<a href="https://www.cnblogs.com/hbolin/p/12727186.html">Flutter Windows应用demo - 柏。 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qq_39457683/article/details/123494789">(25条消息) Flutter Windows Desktop开发记录-在编译Windows平台时报错_Felix_Fly2021的博客-CSDN博客_flutter编译windows</a></p><p><a href="https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/">Visual Studio 较旧的下载 - 2019、2017、2015 和以前的版本 (microsoft.com)</a></p><p><a href="https://developer.aliyun.com/article/864526">【错误记录】Android Studio 编译报错 ( SDK location not found )-阿里云开发者社区 (aliyun.com)</a></p><p><a href="https://juejin.cn/post/6992491894215278600">flutter 配置 遇到的问题解决笔记 - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/iblade/article/details/104927006">(27条消息) Flutter plugin not installed; this adds Flutter specific functionality._iblade的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_36632604/article/details/128810507">Pub failed to delete entry because it was in use by another process.解决办法-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pub failed to delete entry because it was in use by another process.</span><br><span class="line">This may be caused by a virus scanner or having a file</span><br><span class="line">in the directory open in another application.</span><br><span class="line">pub get failed</span><br><span class="line">command: &quot;C:\flutter\bin\cache\dart-sdk\bin\dart __deprecated_pub --directory . get --example&quot;</span><br><span class="line">pub env: &#123;</span><br><span class="line">  &quot;FLUTTER_ROOT&quot;: &quot;C:\flutter&quot;,</span><br><span class="line">  &quot;PUB_ENVIRONMENT&quot;: &quot;flutter_cli:get&quot;,</span><br><span class="line">  &quot;PUB_CACHE&quot;: &quot;C:\Users\rondos\AppData\Local\Pub\Cache&quot;,</span><br><span class="line">&#125;</span><br><span class="line">exit code: 1</span><br><span class="line"></span><br><span class="line">cmd管理员模式输入</span><br><span class="line"></span><br><span class="line">start ms-settings:developers</span><br></pre></td></tr></table></figure><p>flutter镜像设置</p><p><a href="https://flutter.cn/community/china">在中国网络环境下使用 Flutter - Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></p><p><a href="https://www.jianshu.com/p/ecd9dc1bfa9f">flutter运行报错：your app to be migrated to the Android embedding v2 - 简书 (jianshu.com)</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This app is using a deprecated version of the Android embedding.</span><br><span class="line">To avoid unexpected runtime failures, or future build failures, try to migrate this app to the V2 embedding.</span><br><span class="line">Take a look at the docs for migrating an app: https://github.com/flutter/flutter/wiki/Upgrading-pre-1.12-Android-projects</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">根据官方提供的地址以及参考提供的方法，最终只需要改动\android\app\src\main目录下的AndroidManifest.xml文件。增加如下内容：</span><br><span class="line">&lt;manifest&gt;</span><br><span class="line">    &lt;application&gt;</span><br><span class="line">        &lt;meta-data android:name=&quot;flutterEmbedding&quot; android:value=&quot;2&quot; /&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache ECharts</title>
      <link href="/2022/10/08/Apache-ECharts/"/>
      <url>/2022/10/08/Apache-ECharts/</url>
      
        <content type="html"><![CDATA[<p>Apache ECharts学习</p><p><a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a></p><p>参考</p><p><a href="https://www.cnblogs.com/tian-long/p/8417395.html">Vue中全局和按需引入Echarts - Various - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qq_39075021/article/details/105445991">(18条消息) Vue中引入Echarts封装组件的两种方式（全局引入和按需引入）_hufi的博客-CSDN博客_echarts全局引入</a></p><p>[在vue中使用Echarts<a href="https://www.cnblogs.com/ludeng-blog/p/12531903.html">官方5分钟上手ECharts] - 路灯博客 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qingqingdezou_lei/article/details/53520582">(18条消息) echarts 颜色设置_qingqingdezou_lei的博客-CSDN博客_echarts颜色设置</a></p><p><a href="https://zhuanlan.zhihu.com/p/121770261">require和import的区别 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/slxysyka/article/details/107540404">(18条消息) echarts饼状图从后台传数据的方法_龙龙龙呀的博客-CSDN博客_echarts传值</a></p><p><a href="https://www.cnblogs.com/xiaotian-222/p/7099384.html">echarts 柱状图和饼状图动态获取后台数据 - xiaotian_小天 - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/58888287">Echarts 饼状图显示信息,内容,值,百分比都显示的代码 更改图例等问题汇总 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/For_GG/article/details/78326076">(49条消息) echart饼状图上显示百分比_澪月的博客-CSDN博客_echart饼图百分比显示在图上</a></p><p><a href="https://blog.csdn.net/o_o814222198/article/details/100889391">(49条消息) 【_ 記 】VUE实现间隔竖线 | (CSS样式)_陈努力丶的博客-CSDN博客_vue 竖线</a></p><p><a href="https://blog.csdn.net/zuoyoukeyi/article/details/109112791?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-109112791-blog-108508885.pc_relevant_sortByStrongTime&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-109112791-blog-108508885.pc_relevant_sortByStrongTime&utm_relevant_index=1">(23条消息) echarts 颜色组_zuoyoukeyi的博客-CSDN博客_echarts 颜色数组</a></p><p><a href="https://zhuanlan.zhihu.com/p/358799525">ECharts使用指南 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/weixin_46074961/article/details/105703704">(46条消息) 解决echarts图表柱状图超出坐标轴的问题_小太阳…的博客-CSDN博客_echarts柱状图超出</a></p><p><a href="https://blog.csdn.net/sinat_41694829/article/details/107025163">(23条消息) 解决：ECharts数据更新后，图表没有更新的问题_missGril的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/lth1156187401/article/details/79985123">(23条消息) 有关echarts数据更新后，图表没有更新的情况_lth1156187401的博客-CSDN博客_echart 数据刷新</a></p><p><a href="https://blog.csdn.net/weixin_44582045/article/details/124129524?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-124129524-blog-79985123.pc_relevant_multi_platform_whitelistv1&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-124129524-blog-79985123.pc_relevant_multi_platform_whitelistv1&utm_relevant_index=1">(23条消息) 解决echarts数据更新了图表不更新_老电影故事的博客-CSDN博客_echarts图表不刷新</a></p><p><a href="https://blog.csdn.net/royal1235/article/details/80746457">(24条消息) echarts X轴数据倾斜展示_知守观天下行走叶青的博客-CSDN博客_echarts 倾斜</a></p><p><a href="https://cloud.tencent.com/developer/article/1976476">ECharts 饼图颜色设置教程 - 4 种方式设置饼图颜色 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据显示框编辑显示</span><br><span class="line">tooltip: &#123;</span><br><span class="line">  trigger: &quot;axis&quot;,</span><br><span class="line">  //主要代码</span><br><span class="line">  formatter: function (params) &#123;</span><br><span class="line">    for (let i = 0; i &lt; params.length; i++) &#123;</span><br><span class="line">      var relVal = params[i].name;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let i = 0; i &lt; params.length; i++) &#123;</span><br><span class="line">      let unit = baseProperty.energyExpendUnit;</span><br><span class="line">      if (params[i].seriesName.indexOf(&quot;比&quot;) &gt; -1) &#123;</span><br><span class="line">        unit = &quot;%&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      if (i &gt;= 1) &#123;</span><br><span class="line">        relVal += &quot;&lt;br/&gt;&quot; + params[i].marker + params[i].seriesName + &quot;:&quot; + params[i].data.value + unit;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        relVal += &quot;&lt;br/&gt;&quot; + params[i].marker + params[i].seriesName + &quot;:&quot; + params[i].data + unit;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return relVal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>正确的应该是：</p><p>this.charts.setOption(data,true);</p><p>再次刷新，问题解决,</p><p>查看官方文档后发现setOption有3个属性</p><p><code>setOption(option,notMerge,lazyUpdate);</code></p><p>第二个notMerge默认为false,即默认合并两个数据</p><p>置为true之后则不合并数据了，就可以实现刷新数据的效果了</p><p>前端样式和名字id</p><p>方式一</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot; style=&quot;width: 100%; height: 350px&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;tracker&quot; style=&quot;width: 1300%; height: 350%&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">方式二  这种方式不用innit方法，可以直接赋值，但是无法数据更新无法合并</span><br><span class="line">&lt;v-chart :option=&quot;baseProperty.stackedLineOne&quot; style=&quot;width: 100%; height: 370%&quot; /&gt;</span><br></pre></td></tr></table></figure><p>vue2引入</p><p>使用 <code>require</code> 可以达到按需加载、减小打包体积的目的。如果页面只用到了折线图，没必要把整个<code>echarts.min.js</code> 都引入进来，使用下面的方式比较好</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 引入 ECharts 主模块</span></span><br><span class="line"><span class="keyword">const</span> echarts = <span class="built_in">require</span>(<span class="string">&#x27;echarts/lib/echarts&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入折线图</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;echarts/lib/chart/line&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入提示框</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;echarts/lib/component/tooltip&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入图例</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;echarts/lib/component/legendScroll&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入工具箱</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;echarts/lib/component/toolbox&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;DailyEnergyReportOfPatch&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br></pre></td></tr></table></figure><p>vue3 引入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import * as echarts from &quot;echarts/core&quot;;</span><br><span class="line">import &#123; TitleComponent, ToolboxComponent, TooltipComponent, GridComponent, LegendComponent &#125; from &quot;echarts/components&quot;;</span><br><span class="line">import &#123; LineChart &#125; from &quot;echarts/charts&quot;;</span><br><span class="line">import &#123; UniversalTransition &#125; from &quot;echarts/features&quot;;</span><br><span class="line">import &#123; CanvasRenderer &#125; from &quot;echarts/renderers&quot;;</span><br><span class="line">import VChart, &#123; THEME_KEY &#125; from &quot;vue-echarts&quot;;</span><br><span class="line">echarts.use([TitleComponent, ToolboxComponent, TooltipComponent, GridComponent, LegendComponent, LineChart, CanvasRenderer, UniversalTransition]);</span><br><span class="line"> export default defineComponent(&#123;</span><br><span class="line">  name: &quot;historicalData&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    VChart</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">  let baseProperty = reactive(&#123;</span><br><span class="line">      loading: false,</span><br><span class="line">      stackedLineOne: null,</span><br><span class="line">      stackedLineTwo: null,</span><br><span class="line">      stackedLineThree: null,</span><br><span class="line">      stackedLegend: [],</span><br><span class="line">      tableData: [],</span><br><span class="line">      lineOneXSeries: [],</span><br><span class="line">      lineOneSeries: [],</span><br><span class="line">      lineTwoXSeries: [],</span><br><span class="line">      lineTwoSeries: []</span><br><span class="line">      &#125;)</span><br><span class="line">       const getOption = () =&gt; &#123;</span><br><span class="line">      baseProperty.stackedLineOne = &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">          textStyle: &#123;</span><br><span class="line">            color: &quot;#00aeff&quot;, // 颜色</span><br><span class="line">            fontStyle: &quot;normal&quot;, // 风格</span><br><span class="line">            fontWeight: &quot;bold&quot;, // 粗细</span><br><span class="line">            fontFamily: &quot;Microsoft yahei&quot;, // 字体</span><br><span class="line">            fontSize: 15, // 大小</span><br><span class="line">            align: &quot;center&quot; // 水平对齐</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">          trigger: &quot;axis&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">          data: baseProperty.stackedLegend,</span><br><span class="line">          textStyle: &#123;</span><br><span class="line">            fontSize: 11,</span><br><span class="line">            color: &quot;#5298f8&quot;,</span><br><span class="line">            fontWeight: &quot;normal&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        grid: &#123;</span><br><span class="line">          left: &quot;3%&quot;,</span><br><span class="line">          right: &quot;4%&quot;,</span><br><span class="line">          bottom: &quot;3%&quot;,</span><br><span class="line">          containLabel: true</span><br><span class="line">        &#125;,</span><br><span class="line">        toolbox: &#123;</span><br><span class="line">          feature: &#123;</span><br><span class="line">            saveAsImage: &#123;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">          type: &quot;category&quot;,</span><br><span class="line">          boundaryGap: false,</span><br><span class="line">          axisLabel: &#123;</span><br><span class="line">            textStyle: &#123;</span><br><span class="line">              fontSize: 11,</span><br><span class="line">              color: &quot;#5298f8&quot;,</span><br><span class="line">              fontWeight: &quot;normal&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          data: baseProperty.lineOneXSeries</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">          type: &quot;value&quot;,</span><br><span class="line">          axisLabel: &#123;</span><br><span class="line">            textStyle: &#123;</span><br><span class="line">              fontSize: 11, // 文字大小</span><br><span class="line">              fontWeight: &quot;normal&quot;, // 文字粗细</span><br><span class="line">              color: &quot;#5298f8&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: baseProperty.lineOneSeries</span><br><span class="line">      &#125;;</span><br><span class="line">      var one = echarts.init(document.getElementById(&quot;box&quot;));</span><br><span class="line">      one.setOption(baseProperty.stackedLineOne, true);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    数据处理</span><br><span class="line">const searchAddressBox = () =&gt; &#123;</span><br><span class="line">      console.log(&quot;searchAddressBox&quot;);</span><br><span class="line">      if (searchForm.trackerCode !== &quot;&quot;) &#123;</span><br><span class="line">        searchForm.trackerCode = &quot;&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      //判断时间 如果是时间范围要对时间范围的时间进行判空</span><br><span class="line">      if (baseProperty.timeStartStop == null) &#123;</span><br><span class="line">        searchForm.starTime = &quot;&quot;;</span><br><span class="line">        searchForm.endTime = &quot;&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      if (searchForm.viewBy == &quot;timePeriod&quot; &amp;&amp; searchForm.displaysTheDensity == &quot;&quot; &amp;&amp; searchForm.timePeriod == &quot;&quot;) &#123;</span><br><span class="line">        ElMessage.error(&quot;请选择时间段才能查询&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if (searchForm.viewBy == &quot;timeStartStop&quot; &amp;&amp; searchForm.displaysTheDensity == &quot;&quot; &amp;&amp; baseProperty.timeStartStop == &quot;&quot;) &#123;</span><br><span class="line">        ElMessage.error(&quot;请选择时间范围才能查询&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if (searchForm.displaysTheDensity == &quot;&quot;) &#123;</span><br><span class="line">        ElMessage.error(&quot;请选择时间密度才能查询&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      //将时间拆分成两个时间字符串</span><br><span class="line">      if (baseProperty.timeStartStop !== &quot;&quot;) &#123;</span><br><span class="line">        searchForm.starTime = baseProperty.timeStartStop[0];</span><br><span class="line">        searchForm.endTime = baseProperty.timeStartStop[1];</span><br><span class="line">      &#125;</span><br><span class="line">      /*if (searchForm.projectCode==&quot;&quot;)*/</span><br><span class="line">      //通讯箱查询</span><br><span class="line">      console.log(searchForm);</span><br><span class="line">      if (searchForm.addressBoxCode !== &quot;&quot; &amp;&amp; searchForm.trackerCode == &quot;&quot; &amp;&amp; searchForm.deviceCollectionCodeArray.length &gt; 0) &#123;</span><br><span class="line">        searchForm.deviceCode = searchForm.addressBoxCode;</span><br><span class="line">        proxy.ajax(&#123;</span><br><span class="line">          url: &quot;/device/basDevice/historicalData&quot;,</span><br><span class="line">          method: &quot;post&quot;,</span><br><span class="line">          data: searchForm,</span><br><span class="line">          success: function (res) &#123;</span><br><span class="line">            baseProperty.stackedLegend = [];</span><br><span class="line">            baseProperty.lineOneSeries = [];</span><br><span class="line">            /* baseProperty.lineOneXSeries = [];*/</span><br><span class="line">            /* if (res[0].length &gt; 0) &#123;</span><br><span class="line">              res[0].forEach((item) =&gt; &#123;</span><br><span class="line">                baseProperty.lineOneXSeries.push(item.collectionTime);</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;*/</span><br><span class="line">            let color = [</span><br><span class="line">              &quot;#7cb5ec&quot;,</span><br><span class="line">              &quot;#434348&quot;,</span><br><span class="line">              &quot;#90ed7d&quot;,</span><br><span class="line">              &quot;#f7a35c&quot;,</span><br><span class="line">              &quot;#8085e9&quot;,</span><br><span class="line">              &quot;#e4d354&quot;,</span><br><span class="line">              &quot;#2b908f&quot;,</span><br><span class="line">              &quot;#91e8e1&quot;,</span><br><span class="line">              &quot;#058DC7&quot;,</span><br><span class="line">              &quot;#50B432&quot;,</span><br><span class="line">              &quot;#DDDF00&quot;,</span><br><span class="line">              &quot;#24CBE5&quot;,</span><br><span class="line">              &quot;#64E572&quot;,</span><br><span class="line">              &quot;#FF9655&quot;,</span><br><span class="line">              &quot;#FFF263&quot;,</span><br><span class="line">              &quot;#6AF9C4&quot;,</span><br><span class="line">              &quot;#D47F00&quot;,</span><br><span class="line">              &quot;#00FFFF&quot;,</span><br><span class="line">              &quot;#D4FF55&quot;,</span><br><span class="line">              &quot;#4572A7&quot;,</span><br><span class="line">              &quot;#AA4643&quot;,</span><br><span class="line">              &quot;#89A54E&quot;,</span><br><span class="line">              &quot;#80699B&quot;,</span><br><span class="line">              &quot;#3D96AE&quot;,</span><br><span class="line">              &quot;#DB843D&quot;,</span><br><span class="line">              &quot;#92A8CD&quot;,</span><br><span class="line">              &quot;#A47D7C&quot;,</span><br><span class="line">              &quot;#7FBF55&quot;,</span><br><span class="line">              &quot;#a5c2d5&quot;,</span><br><span class="line">              &quot;#cbab4f&quot;,</span><br><span class="line">              &quot;#76a871&quot;,</span><br><span class="line">              &quot;#a56f8f&quot;,</span><br><span class="line">              &quot;#c12c44&quot;,</span><br><span class="line">              &quot;#9f7961&quot;,</span><br><span class="line">              &quot;#76a871&quot;,</span><br><span class="line">              &quot;#6f83a5&quot;,</span><br><span class="line">              &quot;#b3d74c&quot;,</span><br><span class="line">              &quot;#74aae3&quot;,</span><br><span class="line">              &quot;#5cdec6&quot;,</span><br><span class="line">              &quot;#3526de&quot;,</span><br><span class="line">              &quot;#9d65ee&quot;,</span><br><span class="line">              &quot;#a8b3e3&quot;,</span><br><span class="line">              &quot;#6bc1b7&quot;,</span><br><span class="line">              &quot;#6e98d6&quot;</span><br><span class="line">            ];</span><br><span class="line">            for (let i = 0; i &lt; searchForm.deviceCollectionCodeArray.length; i++) &#123;</span><br><span class="line">              /*console.log(baseProperty.measurePointsList);</span><br><span class="line">              console.log(searchForm.deviceCollectionCodeArray[i]);*/</span><br><span class="line">              console.log(searchForm.deviceCollectionCodeArray[i]);</span><br><span class="line">              console.log(baseProperty.measurePointsList.filter((hanhan) =&gt; hanhan.deviceCollectionCode == searchForm.deviceCollectionCodeArray[i])[0].deviceCollectionName);</span><br><span class="line">              let data = [];</span><br><span class="line">              /*   console.log(res[i]);*/</span><br><span class="line">              if (res[i].length &gt; 0) &#123;</span><br><span class="line">                baseProperty.lineOneXSeries = [];</span><br><span class="line">                res[i].forEach((item) =&gt; &#123;</span><br><span class="line">                  baseProperty.lineOneXSeries.push(item.collectionTime);</span><br><span class="line">                  data.push(item.collectionData);</span><br><span class="line">                &#125;);</span><br><span class="line">                baseProperty.stackedLegend.push(baseProperty.measurePointsList.filter((hanhan) =&gt; hanhan.deviceCollectionCode == searchForm.deviceCollectionCodeArray[i])[0].deviceCollectionName);</span><br><span class="line">                baseProperty.lineOneSeries.push(&#123;</span><br><span class="line">                  name: baseProperty.measurePointsList.filter((hanhan) =&gt; hanhan.deviceCollectionCode == searchForm.deviceCollectionCodeArray[i])[0].deviceCollectionName,</span><br><span class="line">                  type: &quot;line&quot;,</span><br><span class="line">                  smooth: true,</span><br><span class="line">                  itemStyle: &#123;</span><br><span class="line">                    // 连线颜色</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                      color: color[i]</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  data: data</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            getOption();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        ElMessage.error(&quot;请选择好条件才能查询&quot;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="require和import的区别"><a href="#require和import的区别" class="headerlink" title="require和import的区别"></a>require和import的区别</h2><p>1.import在代码编译时被加载，所以必须放在文件开头，require在代码运行时被加载，所以require理论上可以运用在代码的任何地方，所以import性能更好。 2.import引入的对象被修改时，源对象也会被修改，相当于浅拷贝，require引入的对象被修改时，源对象不会被修改，官网称值拷贝，我们可以理解为深拷贝。 3.import有利于tree-shaking（移除JavaScript上下文中未引用的代码），require对tree-shaking不友好。 4.import会触发代码分割（把代码分离到不同的bundle中，然后可以按需加载或者并行加载这些文件），require不会触发。 5.import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法，require 是 AMD规范引入方式。</p><p>目前所有的引擎都还没有实现import，import最终都会被转码为require，在webpack打包中，import和require都会变为_webpack_require_。</p><h1 id="Echarts-title属性设置"><a href="#Echarts-title属性设置" class="headerlink" title="Echarts - title属性设置"></a>Echarts - title属性设置</h1><p><a href="https://blog.csdn.net/hanhandewo/article/details/106758906">(18条消息) 怎样在echarts里面调整标题的位置_匆匆prayChina的博客-CSDN博客_echarts title位置</a></p><p><a href="https://blog.csdn.net/start_f_scratch/article/details/103276153">(18条消息) Echarts y轴高度设置（宽度铺满整个父级高度）_start_f_scratch的博客-CSDN博客_echarts y轴高度</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">  y: &#x27;16%&#x27;, // y 偏移量</span><br><span class="line">  width: &#x27;87%&#x27;, // 宽度</span><br><span class="line">  height: &#x27;70%&#x27;// 高度</span><br><span class="line">&#125;,</span><br><span class="line">title: &#123;</span><br><span class="line">  text: &#x27;异常信息统计&#x27;,</span><br><span class="line">  padding: [0, 10, 0, 80],</span><br><span class="line">  textStyle: &#123;</span><br><span class="line">    fontStyle: &#x27;oblique&#x27;, // 斜体</span><br><span class="line">    fontWeight: &#x27;700&#x27;, // 粗细</span><br><span class="line">    fontFamily: &#x27;monospace&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  left: &#x27;left&#x27;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Echarts中设置-柱状图或其他图形，主标题的偏移位置，可以通过这个padding属性来设置"><a href="#Echarts中设置-柱状图或其他图形，主标题的偏移位置，可以通过这个padding属性来设置" class="headerlink" title="Echarts中设置 柱状图或其他图形，主标题的偏移位置，可以通过这个padding属性来设置"></a>Echarts中设置 柱状图或其他图形，主标题的偏移位置，可以通过这个padding属性来设置</h3><h3 id="padding-5-10-5-5-设置标题内边距-上，右，下，左"><a href="#padding-5-10-5-5-设置标题内边距-上，右，下，左" class="headerlink" title="padding:[5,10,5,5],&#x2F;&#x2F;设置标题内边距,上，右，下，左"></a>padding:[5,10,5,5],&#x2F;&#x2F;设置标题内边距,上，右，下，左</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">         <span class="comment">// 标题</span></span><br><span class="line">         <span class="keyword">show</span>: <span class="keyword">true</span>, <span class="comment">//是否显示</span></span><br><span class="line">         text: <span class="string">&quot;4545&quot;</span>,</span><br><span class="line">         textStyle: &#123;</span><br><span class="line">           color: <span class="string">&quot;#fff&quot;</span>, <span class="comment">// 主标题文字的颜色。</span></span><br><span class="line">           fontStyle: <span class="string">&quot;normal&quot;</span>, <span class="comment">// 主标题文字字体的风格。 &#x27;normal&#x27;  &#x27;italic&#x27;  &#x27;oblique&#x27;</span></span><br><span class="line">           fontWeight: <span class="string">&quot;normal&quot;</span>, <span class="comment">// 主标题文字字体的粗细。 &#x27;normal&#x27; &#x27;bold&#x27;  &#x27;bolder&#x27;  &#x27;lighter&#x27; 500|600</span></span><br><span class="line">           fontFamily: <span class="string">&quot;sans-serif&quot;</span>, <span class="comment">// 主标题文字的字体系列。</span></span><br><span class="line">           fontSize: <span class="number">18</span>, <span class="comment">// 字体大小</span></span><br><span class="line">           lineHeight: <span class="string">&quot;30&quot;</span>, <span class="comment">// 行高</span></span><br><span class="line">           <span class="comment">// width ... , // 文字块的宽度</span></span><br><span class="line">           <span class="comment">// height ... , // 文字块的高度</span></span><br><span class="line">           textBorderColor: <span class="string">&quot;transparent&quot;</span>, <span class="comment">// 文字本身的描边颜色。</span></span><br><span class="line">           textBorderWidth: <span class="number">0</span>, <span class="comment">// 文字本身的描边宽度。</span></span><br><span class="line">           textShadowColor: <span class="string">&quot;transparent&quot;</span>, <span class="comment">// 文字本身的阴影颜色。</span></span><br><span class="line">           textShadowBlur: <span class="number">0</span>, <span class="comment">// 文字本身的阴影长度。</span></span><br><span class="line">           textShadowOffsetX: <span class="number">0</span>, <span class="comment">// 文字本身的阴影 X 偏移。</span></span><br><span class="line">           textShadowOffsetY: <span class="number">0</span>, <span class="comment">//  文字本身的阴影 Y 偏移。</span></span><br><span class="line">         &#125;,</span><br><span class="line">         subtext: <span class="string">&quot;bb&quot;</span>, <span class="comment">// 副标题文本</span></span><br><span class="line">         <span class="keyword">show</span>: <span class="keyword">true</span>, <span class="comment">//是否显示</span></span><br><span class="line">        subtextStyle: &#123;</span><br><span class="line">           color: <span class="string">&quot;#fff&quot;</span>, <span class="comment">// 主标题文字的颜色。</span></span><br><span class="line">           fontStyle: <span class="string">&quot;normal&quot;</span>, <span class="comment">// 主标题文字字体的风格。 &#x27;normal&#x27;  &#x27;italic&#x27;  &#x27;oblique&#x27;</span></span><br><span class="line">           fontWeight: <span class="string">&quot;normal&quot;</span>, <span class="comment">// 主标题文字字体的粗细。 &#x27;normal&#x27; &#x27;bold&#x27;  &#x27;bolder&#x27;  &#x27;lighter&#x27; 500|600</span></span><br><span class="line">           fontFamily: <span class="string">&quot;sans-serif&quot;</span>, <span class="comment">// 主标题文字的字体系列。</span></span><br><span class="line">           fontSize: <span class="number">18</span>, <span class="comment">// 字体大小</span></span><br><span class="line">           lineHeight: <span class="string">&quot;30&quot;</span>, <span class="comment">// 行高</span></span><br><span class="line">           <span class="comment">// width ... , // 文字块的宽度</span></span><br><span class="line">           <span class="comment">// height ... , // 文字块的高度</span></span><br><span class="line">           textBorderColor: <span class="string">&quot;transparent&quot;</span>, <span class="comment">// 文字本身的描边颜色。</span></span><br><span class="line">           textBorderWidth: <span class="number">0</span>, <span class="comment">// 文字本身的描边宽度。</span></span><br><span class="line">           textShadowColor: <span class="string">&quot;transparent&quot;</span>, <span class="comment">// 文字本身的阴影颜色。</span></span><br><span class="line">           textShadowBlur: <span class="number">0</span>, <span class="comment">// 文字本身的阴影长度。</span></span><br><span class="line">           textShadowOffsetX: <span class="number">0</span>, <span class="comment">// 文字本身的阴影 X 偏移。</span></span><br><span class="line">           textShadowOffsetY: <span class="number">0</span>, <span class="comment">//  文字本身的阴影 Y 偏移。</span></span><br><span class="line">         &#125;,</span><br><span class="line">         textAlign: <span class="string">&quot;auto&quot;</span>, <span class="comment">//水平对齐&#x27;auto&#x27;、&#x27;left&#x27;、&#x27;right&#x27;、&#x27;center&#x27;</span></span><br><span class="line">         textVerticalAlign: <span class="string">&quot;auto&quot;</span>, <span class="comment">// 垂直对齐  &#x27;auto&#x27;、&#x27;top&#x27;、&#x27;bottom&#x27;、&#x27;middle&#x27;</span></span><br><span class="line">         triggerEvent: <span class="keyword">false</span>, <span class="comment">// 是否触发事件</span></span><br><span class="line">         padding: <span class="number">5</span>, <span class="comment">// 标题内边距  5/[5,2,4,7]</span></span><br><span class="line">         itemGap: <span class="number">10</span>, <span class="comment">//主副标题之间的间距</span></span><br><span class="line">         left: <span class="number">10</span>, <span class="comment">// 距离 left top right bottom</span></span><br><span class="line">         backgroundColor: <span class="string">&quot;pink&quot;</span>, <span class="comment">// 标题背景色</span></span><br><span class="line">         borderColor: <span class="string">&quot;#ccc&quot;</span>, <span class="comment">// 标题的边框颜色</span></span><br><span class="line">         borderWidth: <span class="number">5</span>, <span class="comment">// 标题的边框线宽。</span></span><br><span class="line">         borderRadius: <span class="number">2</span>, <span class="comment">// 圆角半径</span></span><br><span class="line">         shadowBlur: <span class="number">10</span>, <span class="comment">//图形阴影的模糊大小</span></span><br><span class="line">         shadowColor: <span class="string">&quot;rgba(0, 0, 0, 0.5)&quot;</span>, <span class="comment">// 阴影颜色</span></span><br><span class="line">         shadowOffsetX: <span class="number">5</span>, <span class="comment">// 阴影水平方向上的偏移距离。</span></span><br><span class="line">         shadowOffsetY: <span class="number">5</span>, <span class="comment">//阴影垂直方向上的偏移距离。</span></span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/helloWorldAndYou/article/details/82466260">(18条消息) 四、html字体样式，外观属性_helloWorldAndYou的博客-CSDN博客_html字体样式代码</a></p><p>windows常见内置中文字体</p><p>宋体 SimSun</p><p>黑体 SimHei</p><p>微软雅黑 Microsoft YaHei</p><p>微软正黑体 Microsoft JhengHei</p><p>新宋体 NSimSun</p><p>新细明体 PMingLiU</p><p>细明体 MingLiU</p><p>标楷体 DFKai-SB</p><p>仿宋 FangSong</p><p>楷体 KaiTi</p><p>仿宋_GB2312 FangSong_GB2312</p><p>楷体_GB2312 KaiTi_GB2312</p><p>宋体：SimSuncss中中文字体（font-family）的英文名称</p><p>Mac OS的一些：</p><p>华文细黑：STHeiti Light [STXihei]</p><p>华文黑体：STHeiti</p><p>华文楷体：STKaiti</p><p>华文宋体：STSong</p><p>华文仿宋：STFangsong</p><p>儷黑 Pro：LiHei Pro Medium</p><p>儷宋 Pro：LiSong Pro Light</p><p>標楷體：BiauKai</p><p>蘋果儷中黑：Apple LiGothic Medium</p><p>蘋果儷細宋：Apple LiSung Light</p><p>Windows的一些：</p><p>新細明體：PMingLiU</p><p>細明體：MingLiU</p><p>標楷體：DFKai-SB</p><p>黑体：SimHei</p><p>新宋体：NSimSun</p><p>仿宋：FangSong</p><p>楷体：KaiTi</p><p>仿宋_GB2312：FangSong_GB2312</p><p>楷体_GB2312：KaiTi_GB2312</p><p>微軟正黑體：Microsoft JhengHei</p><p>微软雅黑体：Microsoft YaHei</p><p>装Office会生出来的一些：</p><p>隶书：LiSu</p><p>幼圆：YouYuan</p><p>华文细黑：STXihei</p><p>华文楷体：STKaiti</p><p>华文宋体：STSong</p><p>华文中宋：STZhongsong</p><p>华文仿宋：STFangsong</p><p>方正舒体：FZShuTi</p><p>方正姚体：FZYaoti</p><p>华文彩云：STCaiyun</p><p>华文琥珀：STHupo</p><p>华文隶书：STLiti</p><p>华文行楷：STXingkai</p><p>华文新魏：STXinwei<a href="http://localhost:8082/chuangsi-service">http://localhost:8082/chuangsi-service</a></p>]]></content>
      
      
      <categories>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POIexecl合并表格的导入和自定义导出.md</title>
      <link href="/2022/08/10/POIexecl%E5%90%88%E5%B9%B6%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%AF%BC%E5%85%A5%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E5%87%BA-md/"/>
      <url>/2022/08/10/POIexecl%E5%90%88%E5%B9%B6%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%AF%BC%E5%85%A5%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E5%87%BA-md/</url>
      
        <content type="html"><![CDATA[<p><strong>execl合并表格的导入和自定义导出execl合并表格的导入和自定义导出</strong></p><p>java 获取函数，与获取值</p><p><a href="https://cloud.tencent.com/developer/article/2148945">poi读取excel的时候判断空行-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://www.cnblogs.com/jenny2019/p/12289425.html">poi小姿势：如何判断excel单元格Cell是否为空 - ForrestGump01 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/magicya/p/12173321.html">Java读取Excel数值内容带.0或变科学计数法的解决办法 - Yaaaaa - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qq_41841482/article/details/123070513">Java读取Excel表格中的图片_java读取excel中的图片-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_23123177/article/details/133638391">java使用POI读取Excel表格中的图片（包含嵌入单元格图片，浮动图片，xls-2003,xlsx-2007）_workbook解析excel中的图片-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_36961226/article/details/115477437">java导入带图片的excel表格（工具HSSFWorkbook-HSSFSheet）（支持一条数据（单元格）可以导入多个图片，）_java导入excel带图片-CSDN博客</a></p><p><a href="https://blog.csdn.net/datangxiajun/article/details/78308979">(72条消息) java导出Excel合并单元格_datangxiajun的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43845227/article/details/123580523">(72条消息) JAVA对excle创建、读取、设置单元格颜色、背景色、跨行跨列_java设置excel背景色_谷同学的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_38025219/article/details/82760471">(72条消息) POI 设置Excel单元格背景色（setFillForegroundColor 与 setFillPattern 的使用）_行思坐忆，志凌云的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/ITarmi/article/details/123775069?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-123775069-blog-109165655.pc_relevant_multi_platform_featuressortv2dupreplace&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6-123775069-blog-109165655.pc_relevant_multi_platform_featuressortv2dupreplace&utm_relevant_index=11">(35条消息) Java使用POI获取Excel公式_ITarmi的博客-CSDN博客_poi读取excel公式</a></p><p><a href="https://blog.csdn.net/qq_15508731/article/details/121685007">(72条消息) java 实现excel样式设置（居中、字体、大小、换行、合并行，列宽、指定特定字符串样式等）_cellstyle设置字体大小_时间 流逝的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/wh445306/article/details/105933054">(35条消息) java.lang.ClassNotFoundException: org.apache.poi.hssf.usermodel.HSSFWorkbook 错误的原因和解决方法_wh445306的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_40711092/article/details/125054293">(35条消息) Java使用POI获取Excel公式并计算公式得到值-20220530_qq_40711092的博客-CSDN博客_java读取excel公式计算结果</a></p><p><a href="https://blog.csdn.net/Qizhi_Hu/article/details/110007411?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-110007411-blog-123775069.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-110007411-blog-123775069.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=5">(35条消息) 【Apache POI】Excel操作（六）：Excel计算公式的读取和使用_古阙月的博客-CSDN博客</a></p><p><a href="http://c.biancheng.net/view/5814.html">Java Pattern类和Matcher类的使用 (biancheng.net)</a></p><p><a href="https://blog.csdn.net/demon7552003/article/details/94884761">(43条消息) Java Pattern类的用法详解(正则表达式)_demon7552003的博客-CSDN博客_pattern类</a></p><p><a href="https://blog.csdn.net/chenping1993/article/details/111057539">(46条消息) 关于poi的NUMERIC读取excel单元格数值类型数字的问题_龙池小生的博客-CSDN博客_poi读取excel数字类型</a></p><p><a href="https://zhuanlan.zhihu.com/p/459281103">Java实现Excel导入和导出，看这一篇就够了(珍藏版)（一） - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/Eiceblue/article/details/113979086">(72条消息) Java 在Excel中添加筛选器并执行筛选_Eiceblue的博客-CSDN博客</a></p><p><a href="https://www.e-iceblue.cn/licensing/install-spirepdf-for-java-from-maven-repository.html">通过 Maven 仓库安装 Spire 系列 Java 产品 (e-iceblue.cn)</a></p><p>[(47条消息) Java实现Excel模板的复制，并利用Java反射往新的Excel文件中的指定行开始写入数据_风难追的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_42023666/article/details/88681870?ops_request_misc=%7B%22request_id%22:%22167098318316782388030582%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167098318316782388030582&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-88681870-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v1&utm_term=java">https://blog.csdn.net/weixin_42023666/article/details/88681870?ops_request_misc=%7B%22request%5Fid%22%3A%22167098318316782388030582%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=167098318316782388030582&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-88681870-null-null.142^v68^control,201^v4^add_ask,213^v2^t3_esquery_v1&amp;utm_term=java</a> 复制excel&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://blog.csdn.net/qq_32003379/article/details/123095339">https://blog.csdn.net/qq_32003379/article/details/123095339</a></p><p>[JAVA导出EXCEL表格 - 顾东城 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/gudongcheng/p/8268909.html#:~:text=JAVA%E5%AF%BC%E5%87%BAEXCEL%E8%A1%A8%E6%A0%BC">https://www.cnblogs.com/gudongcheng/p/8268909.html#:~:text=JAVA导出EXCEL表格</a> 1 1. 下载jar包： 官方下载： http%3A%2F%2Fpoi.apache.org%2Fdownload.html 这里可以下载到它的最新版本和文档，目前最新版本是3.7，这里使用比较稳定的3.6版。 …,首先，我们应该要知道的是，一个Excel文件对应一个workbook，一个workbook中有多个sheet组成，一个sheet是由多个行 (row)和列 (cell)组成。 … 5 5. 导出Excel应用实例： )</p><p><a href="https://blog.csdn.net/u012965373/article/details/107836226">Java实现读取Excel多个Sheet数据_java读取excel多个sheet-CSDN博客</a></p><p><a href="https://blog.csdn.net/chenping1993/article/details/111057539">(91条消息) 关于poi的NUMERIC读取excel单元格数值类型数字的问题_poi numeric_龙池小生的博客-CSDN博客</a></p><p>NumberToTextConverter.toText() 方法会返回单元格的初始格式 然后转化为String类型；</p><p><code>Excel的后缀名不对，你java项目中的poi jar包是对2003版也就是后缀名为xls的excel进行操作的代码，如果这时候找到的excel是2007版的也就是后缀名为xlsx的excel时，代码就会报错，所以在操作前你需要判断一下操作的excel的后缀，如果是xls的就让他执行，要不然就告诉报错，告诉操作者把excel另存为后缀为xls格式的excel，另一种办法就是两种都写，先判断后缀名为什么，之后就进入对应的操作。</code></p><p><a href="https://www.cnblogs.com/zhangliang88/p/11759611.html">java通过poi读取excel中的日期类型数据或自定义类型日期 - 张亮java - 博客园 (cnblogs.com)</a></p><h5 id="CellType类型以及值的对应关系"><a href="#CellType类型以及值的对应关系" class="headerlink" title="CellType类型以及值的对应关系"></a>CellType类型以及值的对应关系</h5><table><thead><tr><th>CellType</th><th><strong>类型</strong></th><th><strong>值</strong></th></tr></thead><tbody><tr><td>CELL_TYPE_NUMERIC</td><td>数值</td><td>0</td></tr><tr><td>CELL_TYPE_STRING</td><td>字符串型</td><td>1</td></tr><tr><td>CELL_TYPE_FORMULA</td><td>公式型</td><td>2</td></tr><tr><td>CELL_TYPE_BLANK</td><td>空值</td><td>3</td></tr><tr><td>CELL_TYPE_BOOLEAN</td><td>布尔型</td><td>4</td></tr><tr><td>CELL_TYPE_ERROR</td><td>错误</td><td>5</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> FormulaEvaluator formulaEvaluator;</span><br><span class="line"> String fileType = Objects.requireNonNull(file.getOriginalFilename(), &quot;文件名不能为空&quot;).</span><br><span class="line">                    substring(file.getOriginalFilename().lastIndexOf(&quot;.&quot;) + 1);</span><br><span class="line">  if (&quot;xls&quot;.equalsIgnoreCase(fileType))&#123;</span><br><span class="line">         book=new HSSFWorkbook(file.getInputStream());//2003版本office</span><br><span class="line">         formulaEvaluator = new HSSFFormulaEvaluator((HSSFWorkbook) book);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">         book=new XSSFWorkbook(file.getInputStream());//判断是否为2007版本office</span><br><span class="line">         formulaEvaluator =new XSSFFormulaEvaluator((XSSFWorkbook) book);</span><br><span class="line">   &#125;</span><br><span class="line">//获取到有多少个sheet页</span><br><span class="line">int numberOfSheets = book.getNumberOfSheets();</span><br><span class="line">//对多少页进行for循环，处理各个的业务层</span><br><span class="line">//读取各个Sheet</span><br><span class="line"> for (int i = 0; i &lt; numberOfSheets; i++) &#123;</span><br><span class="line">                String sheetName = book.getSheetName(i);</span><br><span class="line">                Sheet sheet = book.getSheetAt(i);</span><br><span class="line">                int lastRowNum = sheet.getLastRowNum();</span><br><span class="line">                for (int j = 0; j &lt;= lastRowNum; j++) &#123;</span><br><span class="line">                    Row row = sheet.getRow(j);</span><br><span class="line">                    if (null == row) &#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String data = &quot;&quot;;</span><br><span class="line">                    int lastCellNum = row.getLastCellNum();</span><br><span class="line">                    for (int k = 0; k &lt; lastCellNum; k++) &#123;</span><br><span class="line">                        Cell cell = row.getCell(k);</span><br><span class="line">                        Object result = &quot;&quot;;</span><br><span class="line">                        if (cell != null) &#123;</span><br><span class="line">                            switch (cell.getCellType()) &#123;</span><br><span class="line">                                case STRING:</span><br><span class="line">                                    result = cell.getStringCellValue();</span><br><span class="line">                                    break;</span><br><span class="line">                                case NUMERIC:</span><br><span class="line">                                    result = cell.getNumericCellValue();</span><br><span class="line">                                    break;</span><br><span class="line">                                case BOOLEAN:</span><br><span class="line">                                    result = cell.getBooleanCellValue();</span><br><span class="line">                                    break;</span><br><span class="line">                                case FORMULA:</span><br><span class="line">                                    result = cell.getCellFormula();</span><br><span class="line">                                    break;</span><br><span class="line">                                case ERROR:</span><br><span class="line">                                    result = cell.getErrorCellValue();</span><br><span class="line">                                    break;</span><br><span class="line">                                case BLANK:</span><br><span class="line">                                    break;</span><br><span class="line">                                default:</span><br><span class="line">                                    break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (result != &quot;&quot;) &#123;</span><br><span class="line">                            data += result + &quot;|&quot;;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (data.length() &gt; 0) &#123;</span><br><span class="line">                        System.out.println(&quot;sheet&quot; + sheetName + &quot;第&quot; + (j + 1) + &quot;行：&quot; + data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//获取单元格各类型值，返回字符串类型</span><br><span class="line">public static String getCellValueByCell(Cell cell) &#123;</span><br><span class="line">    //判断是否为null或空串</span><br><span class="line">    if (cell == null || cell.toString().trim().equals(&quot;&quot;)) &#123;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    String cellValue = &quot;&quot;;</span><br><span class="line">    CellType cellType = cell.getCellType();</span><br><span class="line">    switch (cellType) &#123;</span><br><span class="line">        case NUMERIC: // 数字</span><br><span class="line">            short format = cell.getCellStyle().getDataFormat();</span><br><span class="line">            if (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                SimpleDateFormat sdf = null;</span><br><span class="line">                //System.out.println(&quot;cell.getCellStyle().getDataFormat()=&quot;+cell.getCellStyle().getDataFormat());</span><br><span class="line">                if (format == 20 || format == 32) &#123;</span><br><span class="line">                    sdf = new SimpleDateFormat(&quot;HH:mm&quot;);</span><br><span class="line">                &#125; else if (format == 14 || format == 31 || format == 57 || format == 58) &#123;</span><br><span class="line">                    // 处理自定义日期格式：m月d日(通过判断单元格的格式id解决，id的值是58)</span><br><span class="line">                    sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">                    double value = cell.getNumericCellValue();</span><br><span class="line">                    Date date = org.apache.poi.ss.usermodel.DateUtil</span><br><span class="line">                            .getJavaDate(value);</span><br><span class="line">                    cellValue = sdf.format(date);</span><br><span class="line">                &#125; else &#123;// 日期</span><br><span class="line">                    sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                try &#123;</span><br><span class="line">                    cellValue = sdf.format(cell.getDateCellValue());// 日期</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        throw new Exception(&quot;exception on get date data !&quot;.concat(e.toString()));</span><br><span class="line">                    &#125; catch (Exception e1) &#123;</span><br><span class="line">                        e1.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    sdf = null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                BigDecimal bd = new BigDecimal(cell.getNumericCellValue());</span><br><span class="line">                cellValue = bd.toPlainString();// 数值 这种用BigDecimal包装再获取plainString，可以防止获取到科学计数值</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case STRING: // 字符串</span><br><span class="line">            cellValue = cell.getStringCellValue();</span><br><span class="line">            break;</span><br><span class="line">        case BOOLEAN: // Boolean</span><br><span class="line">            cellValue = cell.getBooleanCellValue() + &quot;&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case FORMULA: // 公式</span><br><span class="line">            cellValue = cell.getCellFormula();</span><br><span class="line">            break;</span><br><span class="line">        case BLANK: // 空值</span><br><span class="line">            cellValue = &quot;&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case ERROR: // 故障</span><br><span class="line">            cellValue = &quot;ERROR VALUE&quot;;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            cellValue = &quot;UNKNOW VALUE&quot;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return cellValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_38025219/article/details/82760471</span><br><span class="line">// 创建一个 workbook 对象 </span><br><span class="line">Workbook workbook = new XSSFWorkbook();</span><br><span class="line">// 创建一个 sheet</span><br><span class="line">Sheet sheet = workbook.createSheet();</span><br><span class="line">//创建一行</span><br><span class="line">Row row = sheet.createRow((short) 1);</span><br><span class="line">ellStyle style = workbook.createCellStyle();</span><br><span class="line">//关键点 IndexedColors.AQUA.getIndex() 对应颜色</span><br><span class="line">style.setFillForegroundColor(***IndexedColors.AQUA.getIndex()***);</span><br><span class="line">style.setFillPattern(CellStyle.SOLID_FOREGROUND);</span><br><span class="line">Cell cell = row.createCell((short) 1);</span><br><span class="line">cell.setCellValue(&quot;X1&quot;);</span><br><span class="line">cell.setCellStyle(style);</span><br><span class="line"></span><br><span class="line">颜色</span><br><span class="line">IndexedColors.AQUA.getIndex()</span><br><span class="line">IndexedColors.AUTOMATIC.getIndex()</span><br><span class="line">IndexedColors.BLUE.getIndex()</span><br><span class="line">IndexedColors.BLUE_GREY.getIndex()</span><br><span class="line">IndexedColors.BRIGHT_GREEN.getIndex()</span><br><span class="line">IndexedColors.BROWN.getIndex()</span><br><span class="line">IndexedColors.CORAL.getIndex()</span><br><span class="line">IndexedColors.CORNFLOWER_BLUE.getIndex()</span><br><span class="line">IndexedColors.DARK_BLUE.getIndex()</span><br><span class="line">IndexedColors.DARK_GREEN.getIndex()</span><br><span class="line">IndexedColors.DARK_RED.getIndex()</span><br><span class="line">IndexedColors.DARK_TEAL.getIndex()</span><br><span class="line">IndexedColors.DARK_YELLOW.getIndex()</span><br><span class="line">IndexedColors.GOLD.getIndex()</span><br><span class="line">IndexedColors.GREEN.getIndex()</span><br><span class="line">IndexedColors.GREY_25_PERCENT.getIndex()</span><br><span class="line">IndexedColors.GREY_40_PERCENT.getIndex()</span><br><span class="line">IndexedColors.GREY_50_PERCENT.getIndex()</span><br><span class="line">IndexedColors.GREY_80_PERCENT.getIndex()</span><br><span class="line">IndexedColors.INDIGO.getIndex()</span><br><span class="line">IndexedColors.LAVENDER.getIndex()</span><br><span class="line">IndexedColors.LEMON_CHIFFON.getIndex()</span><br><span class="line">IndexedColors.LIGHT_BLUE.getIndex()</span><br><span class="line">IndexedColors.LEMON_CHIFFON.getIndex()</span><br><span class="line">IndexedColors.LIGHT_BLUE.getIndex()</span><br><span class="line">IndexedColors.LIGHT_CORNFLOWER_BLUE.getIndex()</span><br><span class="line">IndexedColors.LIGHT_GREEN.getIndex()</span><br><span class="line">IndexedColors.LIGHT_ORANGE.getIndex()</span><br><span class="line">IndexedColors.LIGHT_TURQUOISE.getIndex()</span><br><span class="line">IndexedColors.LIGHT_YELLOW.getIndex()</span><br><span class="line">IndexedColors.LIME.getIndex()</span><br><span class="line">IndexedColors.MAROON.getIndex()</span><br><span class="line">IndexedColors.OLIVE_GREEN.getIndex()</span><br><span class="line">IndexedColors.ORANGE.getIndex()</span><br><span class="line">IndexedColors.ORCHID.getIndex()</span><br><span class="line">IndexedColors.PALE_BLUE.getIndex()</span><br><span class="line">IndexedColors.PINK.getIndex()</span><br><span class="line">IndexedColors.PLUM.getIndex()</span><br><span class="line">IndexedColors.RED.getIndex()</span><br><span class="line">IndexedColors.ROSE.getIndex()</span><br><span class="line">IndexedColors.ROYAL_BLUE.getIndex()</span><br><span class="line">IndexedColors.SEA_GREEN.getIndex()</span><br><span class="line">IndexedColors.SKY_BLUE.getIndex()</span><br><span class="line">IndexedColors.TAN.getIndex()</span><br><span class="line">IndexedColors.TEAL.getIndex()</span><br><span class="line">IndexedColors.TURQUOISE.getIndex()</span><br><span class="line">IndexedColors.VIOLET.getIndex()</span><br><span class="line">IndexedColors.WHITE.getIndex()</span><br><span class="line">IndexedColors.YELLOW.getIndex()</span><br></pre></td></tr></table></figure><p>合并表格导入参考</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author hjx</span><br><span class="line"> * TODO判断是否为合并单元格</span><br><span class="line"> * @method isMergedRegion</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @param row</span><br><span class="line"> * @param column</span><br><span class="line"> * @return</span><br><span class="line"> * @return Boolean</span><br><span class="line"> * @date 2022年11月16日 下午2:18:44</span><br><span class="line"> */</span><br><span class="line">private Boolean isMergedRegion(Sheet sheet, int row, int column)&#123;</span><br><span class="line">    int sheetMergeCount = sheet.getNumMergedRegions();</span><br><span class="line">    for (int i = 0; i &lt; sheetMergeCount; i++) &#123;</span><br><span class="line">        CellRangeAddress range = sheet.getMergedRegion(i);</span><br><span class="line">        int firstColumn = range.getFirstColumn();</span><br><span class="line">        int lastColumn = range.getLastColumn();</span><br><span class="line">        int firstRow = range.getFirstRow();</span><br><span class="line">        int lastRow = range.getLastRow();</span><br><span class="line">        if (row&gt;=firstRow&amp;&amp;row&lt;=lastRow) &#123;</span><br><span class="line">            if (column&gt;=firstColumn&amp;&amp;column&lt;=lastColumn) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * @author hjx</span><br><span class="line"> * TODO获取合并单元格的值</span><br><span class="line"> * @method getMergedRegionValue</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @param row</span><br><span class="line"> * @param column</span><br><span class="line"> * @return</span><br><span class="line"> * @return String</span><br><span class="line"> * @date 2022年11月16日 下午2:18:44</span><br><span class="line"> */</span><br><span class="line">public String getMergedRegionValue(Sheet sheet ,int row , int column)&#123;</span><br><span class="line">    int sheetMergeCount = sheet.getNumMergedRegions();</span><br><span class="line"></span><br><span class="line">    for(int i = 0 ; i &lt; sheetMergeCount ; i++)&#123;</span><br><span class="line">        CellRangeAddress ca = sheet.getMergedRegion(i);</span><br><span class="line">        int firstColumn = ca.getFirstColumn();</span><br><span class="line">        int lastColumn = ca.getLastColumn();</span><br><span class="line">        int firstRow = ca.getFirstRow();</span><br><span class="line">        int lastRow = ca.getLastRow();</span><br><span class="line">        if(row &gt;= firstRow &amp;&amp; row &lt;= lastRow)&#123;</span><br><span class="line">            if(column &gt;= firstColumn &amp;&amp; column &lt;= lastColumn)&#123;</span><br><span class="line">                Row xRow = sheet.getRow(firstRow);</span><br><span class="line">                Cell xCell = xRow.getCell(firstColumn);</span><br><span class="line">                return xCell.getStringCellValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">代码参考</span><br><span class="line">夏新bom 维护导入</span><br><span class="line"> @Override</span><br><span class="line">    @Transactional</span><br><span class="line">    public ResultData uploadBackup(MultipartFile file, BomMaster entity) &#123;</span><br><span class="line">        if (null==file)&#123;</span><br><span class="line">            return ResultData.fail(&quot;文件不能为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try&#123;</span><br><span class="line">            Workbook book;</span><br><span class="line">            //使用它来执行计算公式</span><br><span class="line">            FormulaEvaluator formulaEvaluator;</span><br><span class="line">            String fileType = Objects.requireNonNull(file.getOriginalFilename(), &quot;文件名不能为空&quot;).</span><br><span class="line">                    substring(file.getOriginalFilename().lastIndexOf(&quot;.&quot;) + 1);</span><br><span class="line">            if (&quot;xls&quot;.equalsIgnoreCase(fileType))&#123;</span><br><span class="line">                book=new HSSFWorkbook(file.getInputStream());//2003版本office</span><br><span class="line">                formulaEvaluator = new HSSFFormulaEvaluator((HSSFWorkbook) book);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                book=new XSSFWorkbook(file.getInputStream());//判断是否为2007版本office</span><br><span class="line">                formulaEvaluator =new XSSFFormulaEvaluator((XSSFWorkbook) book);</span><br><span class="line">            &#125;</span><br><span class="line">            ExcelUtil eu = new ExcelUtil();</span><br><span class="line">            List&lt;Row&gt; rows = eu.readExcel(book);</span><br><span class="line">            String[] cloums=&#123;&quot;序号&quot;,&quot;工序&quot;,&quot;类别&quot;,&quot;新编码&quot;,&quot;名称&quot;,&quot;规格描述&quot;,&quot;用量&quot;,&quot;损耗率&quot;&#125;;</span><br><span class="line">            for (int i =0; i &lt; cloums.length ; i++)&#123;</span><br><span class="line">                if (!cloums[i].equals(rows.get(0).getCell(i).getStringCellValue()))&#123;</span><br><span class="line">                    return ResultData.fail(&quot;表头的第&quot;+(i+1)+&quot;列与模板不一致，请核对&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuilder message =new StringBuilder();</span><br><span class="line">            ArrayList&lt;BomDetail&gt; bomDetailList = new ArrayList&lt;&gt;();</span><br><span class="line">            ArrayList&lt;BomReplace&gt; bomReplaceList =new ArrayList&lt;&gt;();</span><br><span class="line">            //给BomMaster赋值</span><br><span class="line">            BomMaster bomMaster = new BomMaster();</span><br><span class="line">            bomMaster.setBomCode(entity.getBomCode());</span><br><span class="line">            bomMaster.setModelCode(entity.getModelCode());</span><br><span class="line">            bomMaster.setCreateUser(UserUtils.getUsername());</span><br><span class="line">            bomMaster.setEdition(entity.getEdition());</span><br><span class="line">            bomMaster.setCustomerCode(entity.getCustomerCode());</span><br><span class="line">            bomMaster.setEditionDate(entity.getTime());</span><br><span class="line">            String materialCode =&quot;&quot;;</span><br><span class="line">            for (int i =1 ; i &lt; rows.size() ; i++)&#123;</span><br><span class="line">                short lastCellNum = rows.get(i).getLastCellNum();</span><br><span class="line">                if (lastCellNum&gt;8)&#123;</span><br><span class="line">                    return ResultData.fail(&quot;表格的格式有误，列数超过8列，请核对表格，并删除多出的列&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                if (isMergedRegion(book.getSheetAt(0),i,0))&#123;</span><br><span class="line">                    rows.get(i).getCell(0).setCellType(CellType.STRING);</span><br><span class="line">                    rows.get(i).getCell(0).setCellValue(getMergedRegionValue(book.getSheetAt(0), i, 0));</span><br><span class="line">                &#125;</span><br><span class="line">                if (isMergedRegion(book.getSheetAt(0),i,4))&#123;</span><br><span class="line">                    String value = getMergedRegionValue(book.getSheetAt(0), i, 4);</span><br><span class="line">                    rows.get(i).getCell(4).setCellValue(value);</span><br><span class="line">                &#125;</span><br><span class="line">                String s = rows.get(i).getCell(0).toString();</span><br><span class="line">                rows.get(i).getCell(0).setCellType(CellType.STRING);</span><br><span class="line">                rows.get(i).getCell(0).setCellValue(s);</span><br><span class="line">                if (&quot;A&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(2)))) &#123;</span><br><span class="line">                    BomDetail bomDetail = new BomDetail();</span><br><span class="line">                    bomDetail.setBomCode(entity.getBomCode());</span><br><span class="line">                    bomDetail.setCreateUser(UserUtils.getUsername());</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(0)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的序号不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        int sno;</span><br><span class="line">                        try&#123;</span><br><span class="line">                            sno = new BigDecimal(formulaEvaluator.evaluate(rows.get(i).getCell(0)).getStringValue()).intValue();</span><br><span class="line">                            if (sno&lt;=0)&#123;</span><br><span class="line">                                message.append(&quot;第&quot;+(i+1)+&quot;行序号的数不能小于等于0\n&quot;);</span><br><span class="line">                            &#125;else&#123;</span><br><span class="line">                                bomDetail.setSno(sno);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;catch (Exception exception)&#123;</span><br><span class="line">                            exception.printStackTrace();</span><br><span class="line">                            message.append(&quot;第&quot;+(i+1)+&quot;行序号的数值格式有误\n&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(1)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的工序不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        bomDetail.setParentProcess(ExcelUtil.getCellValue(rows.get(i).getCell(1)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(2)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的类别不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        bomDetail.setTypeclass(ExcelUtil.getCellValue(rows.get(i).getCell(2)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(3)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的新编码不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        if (rows.get(i).getCell(3).getCellType().equals(CellType.NUMERIC))&#123;</span><br><span class="line">                            bomDetail.setMaterialCode(NumberToTextConverter.toText(rows.get(i).getCell(3).getNumericCellValue()));</span><br><span class="line">                        &#125;else &#123;</span><br><span class="line">                            bomDetail.setMaterialCode(ExcelUtil.getCellValue(rows.get(i).getCell(3)));</span><br><span class="line">                        &#125;</span><br><span class="line">                        bomDetail.setMaterialCode(bomDetail.getMaterialCode().trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(4)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的名称不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        bomDetail.setMaterialName(ExcelUtil.getCellValue(rows.get(i).getCell(4)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(5)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的规格描述不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        bomDetail.setSpecifications(ExcelUtil.getCellValue(rows.get(i).getCell(5)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(6)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的用量不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        double useQty;</span><br><span class="line">                        try&#123;</span><br><span class="line">                            useQty = formulaEvaluator.evaluate(rows.get(i).getCell(6)).getNumberValue();</span><br><span class="line">                            if (useQty &lt;=0)&#123;</span><br><span class="line">                                message.append(&quot;第&quot; + (i + 1) + &quot;行的用量不能小于等于0\n&quot;);</span><br><span class="line">                            &#125;else&#123;</span><br><span class="line">                                bomDetail.setUseQty(useQty);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;catch (Exception exception)&#123;</span><br><span class="line">                            exception.printStackTrace();</span><br><span class="line">                            message.append(&quot;第&quot; + (i + 1) + &quot;行的用量的值格式有误\n&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(7)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的损耗率不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        double loss;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            loss = formulaEvaluator.evaluate(rows.get(i).getCell(7)).getNumberValue();</span><br><span class="line">                            if (loss&lt;0)&#123;</span><br><span class="line">                                message.append(&quot;第&quot; + (i + 1) + &quot;行的损耗率的值不能小于0\n&quot;);</span><br><span class="line">                            &#125;else &#123;</span><br><span class="line">                                bomDetail.setLossRate(loss);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;catch (Exception ex)&#123;</span><br><span class="line">                            ex.printStackTrace();</span><br><span class="line">                            message.append(&quot;第&quot; + (i + 1) + &quot;行的损耗率的值格式有误\n&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    bomDetailList.add(bomDetail);</span><br><span class="line">                    materialCode=ExcelUtil.getCellValue(rows.get(i).getCell(3));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    BomReplace bomReplace = new BomReplace();</span><br><span class="line">                    bomReplace.setBomCode(entity.getBomCode());</span><br><span class="line">                    bomReplace.setMaterialCode(materialCode.trim());</span><br><span class="line">                    bomReplace.setCreateUser(UserUtils.getUsername());</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(0)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的序号不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        int sno;</span><br><span class="line">                        try&#123;</span><br><span class="line">                            sno = new BigDecimal(formulaEvaluator.evaluate(rows.get(i).getCell(0)).getStringValue()).intValue();</span><br><span class="line">                            if (sno&lt;=0)&#123;</span><br><span class="line">                                message.append(&quot;第&quot;+(i+1)+&quot;行序号的数值不能小于等于0\n&quot;);</span><br><span class="line">                            &#125;else&#123;</span><br><span class="line">                                bomReplace.setSno(sno);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;catch (Exception exception)&#123;</span><br><span class="line">                            exception.printStackTrace();</span><br><span class="line">                            message.append(&quot;第&quot;+(i+1)+&quot;行序号的数值格式有误\n&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(1)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的工序不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        bomReplace.setParentProcess(ExcelUtil.getCellValue(rows.get(i).getCell(1)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(2)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的类别不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        bomReplace.setTypeclass(ExcelUtil.getCellValue(rows.get(i).getCell(2)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(3)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的新编码不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        if (rows.get(i).getCell(3).getCellType().equals(CellType.NUMERIC))&#123;</span><br><span class="line">                            bomReplace.setMaterialReplace(NumberToTextConverter.toText(rows.get(i).getCell(3).getNumericCellValue()));</span><br><span class="line">                        &#125;else &#123;</span><br><span class="line">                            bomReplace.setMaterialReplace(ExcelUtil.getCellValue(rows.get(i).getCell(3)));</span><br><span class="line">                        &#125;</span><br><span class="line">                        bomReplace.setMaterialReplace(bomReplace.getMaterialReplace().trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(4)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的名称不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        bomReplace.setMaterialName(ExcelUtil.getCellValue(rows.get(i).getCell(4)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(5)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的规格描述不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        bomReplace.setSpecifications(ExcelUtil.getCellValue(rows.get(i).getCell(5)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(6)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的用量不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        double useQty;</span><br><span class="line">                        try&#123;</span><br><span class="line">                            useQty = formulaEvaluator.evaluate(rows.get(i).getCell(6)).getNumberValue();</span><br><span class="line">                            if (useQty &lt;=0)&#123;</span><br><span class="line">                                message.append(&quot;第&quot; + (i + 1) + &quot;行的用量的值不能小于等于0\n&quot;);</span><br><span class="line">                            &#125;else&#123;</span><br><span class="line">                                bomReplace.setUseQty(useQty);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;catch (Exception exception)&#123;</span><br><span class="line">                            exception.printStackTrace();</span><br><span class="line">                            message.append(&quot;第&quot; + (i + 1) + &quot;行的用量数值格式有误\n&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (&quot;&quot;.equals(ExcelUtil.getCellValue(rows.get(i).getCell(7)))) &#123;</span><br><span class="line">                        message.append(&quot;第&quot; + (i + 1) + &quot;行的损耗率不能为空\n&quot;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        double loss;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            loss = formulaEvaluator.evaluate(rows.get(i).getCell(7)).getNumberValue();</span><br><span class="line">                            if (loss&lt;0)&#123;</span><br><span class="line">                                message.append(&quot;第&quot; + (i + 1) + &quot;行的损耗率为的值不能小于0\n&quot;);</span><br><span class="line">                            &#125;else &#123;</span><br><span class="line">                                bomReplace.setLossRate(loss);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;catch (Exception ex)&#123;</span><br><span class="line">                            ex.printStackTrace();</span><br><span class="line">                            message.append(&quot;第&quot; + (i + 1) + &quot;行的损耗率为的值格式有误\n&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    bomReplaceList.add(bomReplace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (message.length()&gt;0)&#123;</span><br><span class="line">                return ResultData.fail(message.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            BomMaster rowData = bomManagementMapper.getRowData(bomMaster);</span><br><span class="line">            if(rowData!=null)&#123;</span><br><span class="line">                bomManagementMapper.deleteRowBom(rowData);</span><br><span class="line">                BomDetail temp1=new BomDetail();</span><br><span class="line">                temp1.setBomCode(entity.getBomCode());</span><br><span class="line">                bomManagementMapper.deleteBomDetail(temp1);</span><br><span class="line">                BomReplace temp2=new BomReplace();</span><br><span class="line">                temp2.setBomCode(entity.getBomCode());</span><br><span class="line">                bomManagementMapper.deleteBomReplace(temp2);</span><br><span class="line">                bomManagementMapper.insertBomMaster(bomMaster);</span><br><span class="line">                if(bomDetailList.size() &gt;0) &#123;</span><br><span class="line">                    bomManagementMapper.insertBomDetailBackup(bomDetailList);</span><br><span class="line">                &#125;</span><br><span class="line">                if(bomReplaceList.size()&gt;0) &#123;</span><br><span class="line">                    bomManagementMapper.insertBomReplaceBackup(bomReplaceList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                bomManagementMapper.insertBomMaster(bomMaster);</span><br><span class="line">                if(bomDetailList.size()&gt;0) &#123;</span><br><span class="line">                    bomManagementMapper.insertBomDetailBackup(bomDetailList);</span><br><span class="line">                &#125;</span><br><span class="line">                if(bomReplaceList.size()&gt;0) &#123;</span><br><span class="line">                    bomManagementMapper.insertBomReplaceBackup(bomReplaceList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception exception)&#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">            return ResultData.fail(&quot;在导入过程中出现了问题，请核对表格&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ResultData.succeed(&quot;导入成功&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>自定义导出excel参考</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public ResponseEntity&lt;byte[]&gt; derive(ScheduleMaster scheduleMaster) &#123;</span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; dateList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; tableDataList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; dateDataList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; beforeDateDataList = new ArrayList&lt;&gt;();</span><br><span class="line">        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        String[] weekDays = &#123;&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;&#125;;</span><br><span class="line">        String sqlString = &quot;,&quot;;</span><br><span class="line">        //选择的时间</span><br><span class="line">        String selectTime = scheduleMaster.getSelectTime();</span><br><span class="line">        Date parse = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            parse = simpleDateFormat.parse(selectTime);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.setTime(parse);</span><br><span class="line">        //选择的时间的后7天</span><br><span class="line">        instance.add(Calendar.DATE, 7);</span><br><span class="line">        Date endSelectTime = instance.getTime();</span><br><span class="line">        scheduleMaster.setEndSelectTime(simpleDateFormat.format(endSelectTime));</span><br><span class="line">        //选择的时间的后7天</span><br><span class="line">        instance.add(Calendar.DATE, -14);</span><br><span class="line">        Date startSelectTime = instance.getTime();</span><br><span class="line">        scheduleMaster.setStartSelectTime(simpleDateFormat.format(startSelectTime));</span><br><span class="line">        while (instance.getTime().compareTo(endSelectTime) &lt;= 0) &#123;</span><br><span class="line">            instance.add(Calendar.DATE, 1);</span><br><span class="line">            HashMap&lt;String, String&gt; dateMap = new HashMap&lt;&gt;();</span><br><span class="line">            dateMap.put(&quot;dateTime&quot;, simpleDateFormat.format(instance.getTime()));</span><br><span class="line">            sqlString = sqlString + &quot;&#x27;&#x27; as &#x27;&quot; + simpleDateFormat.format(instance.getTime()) + &quot;&#x27;,&quot;;</span><br><span class="line">            dateMap.put(&quot;weekDate&quot;, weekDays[instance.get(Calendar.DAY_OF_WEEK) - 1]);</span><br><span class="line">            dateList.add(dateMap);</span><br><span class="line">        &#125;</span><br><span class="line">        String sqlDateString = &quot;&quot;;</span><br><span class="line">        if (sqlString.length() &gt; 1) &#123;</span><br><span class="line">            sqlDateString = sqlString.substring(0, sqlString.length() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        scheduleMaster.setSqlDateString(sqlDateString);</span><br><span class="line">        dateDataList = scheduleMasterMapper.getPlannedShipmentDetailsBySelectTimeProductionPLanCapacity(scheduleMaster);</span><br><span class="line">        tableDataList = scheduleMasterMapper.getPlannedShipmentDetails(scheduleMaster);</span><br><span class="line">        beforeDateDataList = scheduleMasterMapper.getPlannedShipmentDetailsBySelectTimeSmtProductTransaction(scheduleMaster);</span><br><span class="line">        if (!tableDataList.isEmpty()) &#123;</span><br><span class="line">            for (int i = 0; i &lt; tableDataList.size(); i++) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map1 = tableDataList.get(i);</span><br><span class="line">                for (Map&lt;String, String&gt; date : dateList) &#123;</span><br><span class="line">                    String dateTime = date.get(&quot;dateTime&quot;);</span><br><span class="line">                    List&lt;Map&lt;String, Object&gt;&gt; collect = dateDataList.stream().filter(h -&gt; h.get(&quot;schedule_code&quot;).equals(map1.get(&quot;schedule_code&quot;))</span><br><span class="line">                            &amp;&amp; h.get(&quot;work_date&quot;).equals(dateTime)).collect(Collectors.toList());</span><br><span class="line">                    if (null != collect &amp;&amp; collect.size() &gt; 0) &#123;</span><br><span class="line">                        tableDataList.get(i).remove(dateTime);</span><br><span class="line">                        tableDataList.get(i).put(dateTime, String.valueOf(collect.get(0).get(&quot;plan_output_qty&quot;)));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        List&lt;Map&lt;String, Object&gt;&gt; collect1 = beforeDateDataList.stream().filter(h -&gt; h.get(&quot;schedule_code&quot;).equals(map1.get(&quot;schedule_code&quot;))</span><br><span class="line">                                &amp;&amp; h.get(&quot;create_time&quot;).equals(dateTime)).collect(Collectors.toList());</span><br><span class="line">                        if (null != collect1 &amp;&amp; collect1.size() &gt; 0) &#123;</span><br><span class="line">                            tableDataList.get(i).remove(dateTime);</span><br><span class="line">                            tableDataList.get(i).put(dateTime, String.valueOf(collect1.get(0).get(&quot;t_qty&quot;)));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            String fileName = &quot;计划出货报表&quot;;</span><br><span class="line">            //1.创建工作簿</span><br><span class="line">            HSSFWorkbook workbook = new HSSFWorkbook();</span><br><span class="line">            HSSFSheet sheet = workbook.createSheet(&quot;计划出货报表&quot;);</span><br><span class="line">            //设置列宽</span><br><span class="line">            sheet.setDefaultColumnWidth(10);</span><br><span class="line">            //固定9列 + 时间的列数</span><br><span class="line">            String[] columnNames = &#123;&quot;状态&quot;, &quot;产品型号&quot;, &quot;批号&quot;, &quot;产品编号&quot;, &quot;设计号&quot;, &quot;客户&quot;, &quot;工单量&quot;, &quot;出货数量&quot;, &quot;未出货数量&quot;&#125;;</span><br><span class="line">            //处理列的条数和数据</span><br><span class="line">            List&lt;String&gt; dateTimeList = dateList.stream().map(h -&gt; h.get(&quot;dateTime&quot;)).collect(Collectors.toList());</span><br><span class="line">            //String[] dateList = &#123;&quot;2023-04-16&quot;, &quot;2023-04-17&quot;, &quot;2023-04-18&quot;, &quot;2023-04-19&quot;, &quot;2023-04-20&quot;, &quot;2023-04-21&quot;, &quot;2023-04-22&quot;, &quot;2023-04-23&quot;, &quot;2023-04-24&quot;, &quot;2023-04-25&quot;, &quot;2023-04-26&quot;, &quot;2023-04-27&quot;, &quot;2023-04-28&quot;, &quot;2023-04-29&quot;, &quot;2023-04-30&quot;&#125;;</span><br><span class="line">            //String[] weekList = &#123;&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;, &quot;星期日&quot;&#125;;</span><br><span class="line">            List&lt;String&gt; weekList = dateList.stream().map(h -&gt; h.get(&quot;weekDate&quot;)).collect(Collectors.toList());</span><br><span class="line">            List&lt;String&gt; columnList = new ArrayList&lt;&gt;();</span><br><span class="line">            columnList.addAll(Arrays.asList(columnNames));</span><br><span class="line">            columnList.addAll(dateTimeList);</span><br><span class="line">            //设置列长（原来固定的加上动态时间的）</span><br><span class="line">            //已开始固定的字段9个（状态 产品型号批号产品编号设计号客户工单量出货数量未出货数量）</span><br><span class="line">            //假设为22</span><br><span class="line">            int dataSize = columnList.size();</span><br><span class="line">            //1.1创建合并单元格对象</span><br><span class="line">            CellRangeAddress cellAddressesHead = new CellRangeAddress(0, 2, 0, dataSize - 1);</span><br><span class="line">            //合并表格</span><br><span class="line">            sheet.addMergedRegion(cellAddressesHead);</span><br><span class="line">            //创建标题样式</span><br><span class="line">            HSSFCellStyle titleStyle = workbook.createCellStyle();</span><br><span class="line">            //居中</span><br><span class="line">            titleStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            //背景颜色</span><br><span class="line">            titleStyle.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());</span><br><span class="line">            //填充方式，默认为NO_FILL，所以就算上面set了背景颜色，下面没设置填充色也没效果</span><br><span class="line">            titleStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">            //设置字体样式</span><br><span class="line">            HSSFFont titleFont = workbook.createFont();</span><br><span class="line">            //加粗</span><br><span class="line">            titleFont.setBold(true);</span><br><span class="line">            //字体大小</span><br><span class="line">            titleFont.setFontHeight((short) 500);</span><br><span class="line">            //将字体赋值给样式</span><br><span class="line">            titleStyle.setFont(titleFont);</span><br><span class="line">            //设置表列头的样式</span><br><span class="line">            HSSFCellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">            HSSFFont font = workbook.createFont();</span><br><span class="line">            font.setFontName(&quot;宋体&quot;);</span><br><span class="line">            font.setFontHeight((short) 230);</span><br><span class="line">            font.setBold(true);</span><br><span class="line">            cellStyle.setFont(font);</span><br><span class="line">            //编写第一行</span><br><span class="line">            HSSFRow titleRow = sheet.createRow(0);</span><br><span class="line">            HSSFCell cell = titleRow.createCell(0);</span><br><span class="line">            cell.setCellStyle(titleStyle);</span><br><span class="line">            cell.setCellValue(&quot;计划出货报表&quot;);</span><br><span class="line">            HSSFRow columnRowZero = sheet.createRow(3);</span><br><span class="line">            HSSFCellStyle cellStyleZero = workbook.createCellStyle();</span><br><span class="line">            cellStyleZero.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            cellStyleZero.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">            CellRangeAddress cellAddressesZero = new CellRangeAddress(3, 3, 6, 8);</span><br><span class="line">            sheet.addMergedRegion(cellAddressesZero);</span><br><span class="line">            columnRowZero.createCell(6).setCellValue(&quot;AMOI-S-PM-003B V1.0&quot;);</span><br><span class="line">            columnRowZero.getCell(6).setCellStyle(cellStyleZero);</span><br><span class="line">            HSSFRow columnRow = sheet.createRow(4);</span><br><span class="line">            columnRow.setHeight((short) 400);</span><br><span class="line">            HSSFRow columnRowSecond = sheet.createRow(5);</span><br><span class="line">            columnRowSecond.setHeight((short) 400);</span><br><span class="line">            for (int i = 0; i &lt; columnList.size(); i++) &#123;</span><br><span class="line">                if (i &lt; 9) &#123;</span><br><span class="line">                    CellRangeAddress cellAddresses = new CellRangeAddress(4, 5, i, i);</span><br><span class="line">                    sheet.addMergedRegion(cellAddresses);</span><br><span class="line">                    columnRow.createCell(i).setCellValue(columnNames[i]);</span><br><span class="line">                    columnRow.getCell(i).setCellStyle(cellStyle);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    columnRow.createCell(i).setCellValue(dateTimeList.get(i-9));</span><br><span class="line">                    columnRowSecond.createCell(i).setCellValue(weekList.get(i-9));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i = 6; i &lt; tableDataList.size() + 6; i++) &#123;</span><br><span class="line">                HSSFRow row = sheet.createRow(i);</span><br><span class="line">                row.createCell(0).setCellValue(tableDataList.get(i - 6).get(&quot;status&quot;).toString());</span><br><span class="line">                row.createCell(1).setCellValue(tableDataList.get(i - 6).get(&quot;model_code&quot;).toString());</span><br><span class="line">                row.createCell(2).setCellValue(tableDataList.get(i - 6).get(&quot;schedule_code&quot;).toString());</span><br><span class="line">                row.createCell(3).setCellValue(tableDataList.get(i - 6).get(&quot;material_code&quot;).toString());</span><br><span class="line">                row.createCell(4).setCellValue(tableDataList.get(i - 6).get(&quot;design_code&quot;)==null?&quot;&quot;:tableDataList.get(i - 6).get(&quot;design_code&quot;).toString());</span><br><span class="line">                row.createCell(5).setCellValue(tableDataList.get(i - 6).get(&quot;to_customer&quot;).toString());</span><br><span class="line">                row.createCell(6).setCellValue(String.valueOf(tableDataList.get(i - 6).get(&quot;schedule_qty&quot;)));</span><br><span class="line">                row.createCell(7).setCellValue(String.valueOf(tableDataList.get(i - 6).get(&quot;shipment_qty&quot;)));</span><br><span class="line">                row.createCell(8).setCellValue(String.valueOf(tableDataList.get(i - 6).get(&quot;not_shipment_qty&quot;)));</span><br><span class="line">                for(int s=0 ; s&lt;dateTimeList.size();s++)&#123;</span><br><span class="line">                    row.createCell(s+9).setCellValue(String.valueOf(tableDataList.get(i - 6).get(dateTimeList.get(s))));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ByteArrayOutputStream os = new ByteArrayOutputStream();</span><br><span class="line">            workbook.write(os);</span><br><span class="line">            // 设置请求头内容,告诉浏览器代开下载窗口</span><br><span class="line">            HttpHeaders headers = new HttpHeaders();</span><br><span class="line">            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">            headers.setContentDispositionFormData(&quot;attachment&quot;, URLEncoder.encode(fileName, &quot;UTF-8&quot;) + &quot;.xlsx&quot;);</span><br><span class="line">            ResponseEntity&lt;byte[]&gt; responseEntity = new ResponseEntity&lt;byte[]&gt;(os.toByteArray(), headers, HttpStatus.OK);</span><br><span class="line">            return responseEntity;</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_41841482/article/details/123070513">Java读取Excel表格中的图片_java读取excel中的图片-CSDN博客</a></p><h4 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不同版本的excel有不同的拓展名（.[xls](https://so.csdn.net/so/search?q=xls&amp;spm=1001.2101.3001.7020) .xlsx），对应不同的方法。</span><br><span class="line"></span><br><span class="line">所有的图片在excel中保存在一个集合中，以行列号为key，图片为value，将结果封装到map集合中，图片的格式为“HSSFPictureData”“XSSFPictureData”。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取图片和位置 (xls)</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public static Map&lt;String, HSSFPictureData&gt; getPictures (HSSFSheet sheet) throws IOException &#123;</span><br><span class="line">    Map&lt;String, HSSFPictureData&gt; map = new HashMap&lt;String, HSSFPictureData&gt;();</span><br><span class="line">    List&lt;HSSFShape&gt; list = sheet.getDrawingPatriarch().getChildren();</span><br><span class="line">    for (HSSFShape shape : list) &#123;</span><br><span class="line">        if (shape instanceof HSSFPicture) &#123;</span><br><span class="line">            HSSFPicture picture = (HSSFPicture) shape;</span><br><span class="line">            HSSFClientAnchor cAnchor = picture.getClientAnchor();</span><br><span class="line">            HSSFPictureData pdata = picture.getPictureData();</span><br><span class="line">            String key = cAnchor.getRow1() + &quot;-&quot; + cAnchor.getCol1(); // 行号-列号</span><br><span class="line">            map.put(key, pdata);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 获取图片和位置 (xlsx)</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public static Map&lt;String, XSSFPictureData&gt; getPictures (XSSFSheet sheet) throws IOException &#123;</span><br><span class="line">    Map&lt;String, XSSFPictureData&gt; map = new HashMap&lt;String, XSSFPictureData&gt;();</span><br><span class="line">    List&lt;POIXMLDocumentPart&gt; list = sheet.getRelations();</span><br><span class="line">    for (POIXMLDocumentPart part : list) &#123;</span><br><span class="line">        if (part instanceof XSSFDrawing) &#123;</span><br><span class="line">            XSSFDrawing drawing = (XSSFDrawing) part;</span><br><span class="line">            List&lt;XSSFShape&gt; shapes = drawing.getShapes();</span><br><span class="line">            for (XSSFShape shape : shapes) &#123;</span><br><span class="line">                XSSFPicture picture = (XSSFPicture) shape;</span><br><span class="line">                XSSFClientAnchor anchor = picture.getPreferredSize();</span><br><span class="line">                CTMarker marker = anchor.getFrom();</span><br><span class="line">                String key = marker.getRow() + &quot;-&quot; + marker.getCol();</span><br><span class="line">                map.put(key, picture.getPictureData());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="从map拿到图片使用输出流将图片保存在本地"><a href="#从map拿到图片使用输出流将图片保存在本地" class="headerlink" title="从map拿到图片使用输出流将图片保存在本地"></a>从map拿到图片使用输出流将图片保存在本地</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PictureData picData = map.get(hang-1+&quot;:&quot;+20);</span><br><span class="line">String ext = picData.suggestFileExtension();//获取图片的后缀名</span><br><span class="line">byte[] data = picData.getData();</span><br><span class="line">String fileName = UUID.randomUUID().toString();</span><br><span class="line">//文件夹路径：temporarypath </span><br><span class="line">String temporarypath = FtpPropertiesLoader.get(&quot;star&quot;);</span><br><span class="line">FileOutputStream out = new FileOutputStream(star + fileName + ext);</span><br><span class="line">out.write(data); </span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> POI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java将一个文件夹下的内容复制到另一个文件夹下.md</title>
      <link href="/2022/08/10/java%E5%B0%86%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E5%86%85%E5%AE%B9%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B-md/"/>
      <url>/2022/08/10/java%E5%B0%86%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E5%86%85%E5%AE%B9%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B-md/</url>
      
        <content type="html"><![CDATA[<h1 id="java将一个文件夹下的内容复制到另一个文件夹下"><a href="#java将一个文件夹下的内容复制到另一个文件夹下" class="headerlink" title="java将一个文件夹下的内容复制到另一个文件夹下"></a>java将一个文件夹下的内容复制到另一个文件夹下</h1><p>参考：</p><p><a href="https://blog.csdn.net/qq_31844483/article/details/95206772">java将一个文件夹下的内容复制到另一个文件夹下_java将一个文件夹文件复制到另一个下-CSDN博客</a></p><p><a href="https://www.cnblogs.com/sunny3158/p/16656318.html">java复制文件的4种方式及拷贝文件到另一个目录下的实例代码 - sunny123456 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/hyzx_9987/article/details/97407737">Java复制一个文件的内容到另一个文件的七种方法_java 复制文件-CSDN博客</a></p><p><a href="https://blog.csdn.net/baidu_36216018/article/details/106710277">JAVA new File (网络路径)-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_37989184/article/details/93025734">Java中File使用–创建文件_file.parent-CSDN博客</a></p><p><a href="https://blog.csdn.net/sfhappy23/article/details/119353166">笔记：jdk中File.mkdir()方法有坑-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_59092234/article/details/126730297">java文件操作报错：java.io.FileNotFoundException：D..（拒绝访问）-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhuyeshen/p/11435879.html">Java解决java.io.FileNotFoundException: E:\work\work (拒绝访问。) - 那些年的代码 - 博客园 (cnblogs.com)</a></p><p>[java将InputStream或bytes写入本地文件_java中如何将bytes<a href="https://blog.csdn.net/hgg923/article/details/50698858">]写到本地中-CSDN博客</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于这个问题，你首先要知道“流”的概念，流就像水一样，源源不断的传送，它是一种数据传输的模式。根据数据流方向的不同，可分为输入流和输出流。</span><br><span class="line"></span><br><span class="line">输入流就是把数据（键盘输入、鼠标、扫描仪等等外设设备）读入到内存（程序）中，输出流就是把内存（程序）中的数据输出到外设或其他地方，从文件角度简单总结就是，输入流就是读数据，输出流就是写数据。在这个过程中，始终把内存作为参考点。</span><br><span class="line"></span><br><span class="line">在JAVA语言中，定义了专门的类用来表示输入和输出，这些类放在java.io包中。按数据传输单位划分，可以分为字节流和字符流。其中：</span><br><span class="line"></span><br><span class="line">字节流：InputStream：继承自InputStream的流都是用于向程序中输入数据的，且数据单位都是字节（8位）。     OutputStream：继承自OutputStream的流都是程序用于向外输出数据的，且数据单位都是字节（8位）。</span><br><span class="line">           字符流：Reader：继承自Reader的流都是用于向程序中输入数据的，且数据单位都是字符（16位）。</span><br><span class="line">Writer：继承自Writer的流都是程序用于向外输出数据的，且数据单位都是字符（16位）。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">系统的路径是 D:\uploadFile\packagingMaterial\PO2303239</span><br><span class="line">系统拷过来的路径是  &quot;D:\\uploadFile\\packagingMaterial\\PO2303239&quot;</span><br><span class="line">我们需改为 D:/uploadFile/packagingMaterial/PO2303238</span><br><span class="line">不然系统会提示没有找到该文件路径</span><br></pre></td></tr></table></figure><p>简易版本的将D:&#x2F;uploadFile&#x2F;packagingMaterial&#x2F;PO2303238&#x2F;外箱&#x2F;PO2303238-外箱-e7fdeb35-3cd4-44bd-844e-90254db698de.png的文件复制到D:&#x2F;uploadFile&#x2F;packagingMaterial&#x2F;PO2303239&#x2F;sss.png</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    File oldFile = new File(&quot;D:/uploadFile/packagingMaterial/PO2303238/外箱/PO2303238-外箱-e7fdeb35-3cd4-44bd-844e-90254db698de.png&quot;);//获取旧的文件File对象</span><br><span class="line">    File file = new File(&quot;D:/uploadFile/packagingMaterial/PO2303239/sss.png&quot;);</span><br><span class="line">     if (!file.exists()) &#123;  //判断要目标文件夹是否存在不存在则创建</span><br><span class="line">        File parentFile = file.getParentFile();</span><br><span class="line">        if (!parentFile.exists()) &#123;</span><br><span class="line">            parentFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        file.delete();</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line">    FileInputStream in = new FileInputStream(oldFile);</span><br><span class="line">    FileOutputStream out = new FileOutputStream(file);</span><br><span class="line">    byte[] buffer=new byte[2097152];</span><br><span class="line">    int readByte = 0;</span><br><span class="line">    //读取旧文件的流写入新文件里</span><br><span class="line">    while((readByte = in.read(buffer)) != -1)&#123;</span><br><span class="line">        out.write(buffer, 0, readByte);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.star.io;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Title: CopyDir</span><br><span class="line"> * @Description:复制一个文件夹的内容到另一个文件夹</span><br><span class="line"> * @Auther: huangxt</span><br><span class="line"> * @Version: 1.0</span><br><span class="line"> * @create 2019/6/18 15:24</span><br><span class="line"> */</span><br><span class="line">public class CopyDir &#123;</span><br><span class="line">    public static void copyDir(String sourcePath, String newPath) throws IOException &#123;</span><br><span class="line">        File file = new File(sourcePath);   //获取文件夹File对象</span><br><span class="line">        String[] filePath = file.list();    //获取文件夹下所有内容的名称</span><br><span class="line"></span><br><span class="line">        if (!(new File(newPath)).exists()) &#123;  //判断要目标文件夹是否存在不存在则创建</span><br><span class="line">            (new File(newPath)).mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; filePath.length; i++) &#123;  //循环遍历</span><br><span class="line">            //判断是不是文件夹，是的话执行递归。file.separator 分隔符，如“/”</span><br><span class="line">            if ((new File(sourcePath + file.separator + filePath[i])).isDirectory()) &#123;</span><br><span class="line">                copyDir(sourcePath  + file.separator  + filePath[i], newPath  + file.separator + filePath[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            //判断是不是文件，是的话旧的文件拷至新的文件夹下</span><br><span class="line">            if (new File(sourcePath  + file.separator + filePath[i]).isFile()) &#123;</span><br><span class="line">                copyFile(sourcePath + file.separator + filePath[i], newPath + file.separator + filePath[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void copyFile(String oldPath, String newPath) throws IOException &#123;</span><br><span class="line">        File oldFile = new File(oldPath);//获取旧的文件File对象</span><br><span class="line">        File file = new File(newPath);  //获取新的文件File对象并生成文件</span><br><span class="line">        FileInputStream in = new FileInputStream(oldFile);  //</span><br><span class="line">        FileOutputStream out = new FileOutputStream(file);</span><br><span class="line"></span><br><span class="line">        byte[] buffer=new byte[2097152];</span><br><span class="line">        int readByte = 0;</span><br><span class="line">        //读取旧文件的流写入新文件里</span><br><span class="line">        while((readByte = in.read(buffer)) != -1)&#123;</span><br><span class="line">            out.write(buffer, 0, readByte);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in); //启用输入</span><br><span class="line">        System.out.println(&quot;请输入源目录：&quot;);</span><br><span class="line">        String sourcePath = sc.nextLine();  //</span><br><span class="line">        System.out.println(&quot;请输入新目录：&quot;);</span><br><span class="line">        String path = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        //String sourcePath = &quot;D://aa&quot;;</span><br><span class="line">        //String path = &quot;D://bb&quot;;</span><br><span class="line"></span><br><span class="line">        copyDir(sourcePath, path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>[java将InputStream或bytes写入本地文件_java中如何将bytes<a href="https://blog.csdn.net/hgg923/article/details/50698858">]写到本地中-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将InputStream写入本地文件</span><br><span class="line"> * @param destination 写入本地目录</span><br><span class="line"> * @param input输入流</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">private static void writeToLocal(String destination, InputStream input)</span><br><span class="line">throws IOException &#123;</span><br><span class="line">int index;</span><br><span class="line">byte[] bytes = new byte[1024];</span><br><span class="line">FileOutputStream downloadFile = new FileOutputStream(destination);</span><br><span class="line">while ((index = input.read(bytes)) != -1) &#123;</span><br><span class="line">downloadFile.write(bytes, 0, index);</span><br><span class="line">downloadFile.flush();</span><br><span class="line">&#125;</span><br><span class="line">downloadFile.close();</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将bytes写入本地文件</span><br><span class="line"> * @param destination</span><br><span class="line"> * @param bytes</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">private static void writeToLocal(String destination, byte[] bytes)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line">    FileOutputStream downloadFile = new FileOutputStream(destination);</span><br><span class="line">    downloadFile.write(bytes);</span><br><span class="line">    downloadFile.flush();</span><br><span class="line">    downloadFile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java poi excel 导入时判断和获取数据.md</title>
      <link href="/2022/08/10/java-poi-excel-%E5%AF%BC%E5%85%A5%E6%97%B6%E5%88%A4%E6%96%AD%E5%92%8C%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE-md/"/>
      <url>/2022/08/10/java-poi-excel-%E5%AF%BC%E5%85%A5%E6%97%B6%E5%88%A4%E6%96%AD%E5%92%8C%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE-md/</url>
      
        <content type="html"><![CDATA[<h2 id="java-excel-导入时判断和获取数据"><a href="#java-excel-导入时判断和获取数据" class="headerlink" title="java excel 导入时判断和获取数据"></a>java excel 导入时判断和获取数据</h2><h4 id="1、判断是不是空行"><a href="#1、判断是不是空行" class="headerlink" title="1、判断是不是空行"></a>1、判断是不是空行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断是否空行</span><br><span class="line"> */</span><br><span class="line">public static boolean isRowEmpty(Row row) &#123;</span><br><span class="line">   for (int c = row.getFirstCellNum(); c &lt; row.getLastCellNum(); c++) &#123;</span><br><span class="line">      Cell cell = row.getCell(c);</span><br><span class="line">      if (cell != null &amp;&amp; cell.getCellType() != CellType.BLANK)</span><br><span class="line">         return false;</span><br><span class="line">   &#125;</span><br><span class="line">   return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、判断是不是空单元格"><a href="#2、判断是不是空单元格" class="headerlink" title="2、判断是不是空单元格"></a>2、判断是不是空单元格</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (null != row.getCell(0) &amp;&amp; row.getCell(0).getCellType() != CellType.BLANK &amp;&amp; !StringUtils.isBlank(ExcelUtil.getCellValue(row.getCell(0)))) &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="3、读取单元格返回的都是字符串的方法"><a href="#3、读取单元格返回的都是字符串的方法" class="headerlink" title="3、读取单元格返回的都是字符串的方法"></a>3、读取单元格返回的都是字符串的方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 读取单元格的值</span><br><span class="line"> * </span><br><span class="line"> * @Title: getCellValue</span><br><span class="line"> * @Date : 2014-9-11 上午10:52:07</span><br><span class="line"> * @param cell</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static String getCellValue(Cell cell) &#123;</span><br><span class="line">   Object result = &quot;&quot;;</span><br><span class="line">   if (cell != null) &#123;</span><br><span class="line">      switch (cell.getCellType()) &#123;</span><br><span class="line">         case STRING:</span><br><span class="line">         result = cell.getStringCellValue();</span><br><span class="line">         break;</span><br><span class="line">         case NUMERIC:</span><br><span class="line">         result = cell.getNumericCellValue();</span><br><span class="line">         break;</span><br><span class="line">         case BOOLEAN:</span><br><span class="line">         result = cell.getBooleanCellValue();</span><br><span class="line">         break;</span><br><span class="line">         case FORMULA:</span><br><span class="line">         result = cell.getCellFormula();</span><br><span class="line">         break;</span><br><span class="line">         case ERROR:</span><br><span class="line">         result = cell.getErrorCellValue();</span><br><span class="line">         break;</span><br><span class="line">         case BLANK:</span><br><span class="line">         break;</span><br><span class="line">      default:</span><br><span class="line">         break;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、判断字符串是不是空的"><a href="#3、判断字符串是不是空的" class="headerlink" title="3、判断字符串是不是空的"></a>3、判断字符串是不是空的</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (null != row.getCell(0) &amp;&amp; row.getCell(0).getCellType() != CellType.BLANK &amp;&amp; !StringUtils.isBlank(ExcelUtil.getCellValue(row.getCell(0)))) &#123;</span><br><span class="line">    String cellValue = ExcelUtil.getCellValue(row.getCell(0));</span><br><span class="line">    String splitHeadAndEndCellValue = cellValue.trim();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、判断是不是数字类型"><a href="#4、判断是不是数字类型" class="headerlink" title="4、判断是不是数字类型"></a>4、判断是不是数字类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (null != row.getCell(1) &amp;&amp; row.getCell(1).getCellType() != CellType.BLANK) &#123;</span><br><span class="line">    String cellValue = ExcelUtil.getCellValue(row.getCell(1));</span><br><span class="line">    try &#123;</span><br><span class="line">        Double i1 = Double.parseDouble(cellValue);</span><br><span class="line">        if (i1 &lt;= 0) &#123;</span><br><span class="line">            message.append(&quot;第&quot; + (i + 1) + &quot;行第2列xxxx 不是大于0的数字&quot; + cellValue + &quot;   ;        &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b = new BigDecimal(i1);</span><br><span class="line">        //保留两位小时</span><br><span class="line">        i1 = b.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">        product.setOverseasMasterBoxGrossWeightKgs(i1);</span><br><span class="line">    &#125; catch (Exception exception) &#123;</span><br><span class="line">        exception.getStackTrace();</span><br><span class="line">        exception.getMessage();</span><br><span class="line">        message.append(&quot;第&quot; + (i + 1) + &quot;行第2列xxx 不是数字&quot; + cellValue + &quot;   ;        &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、判断是不是整数"><a href="#5、判断是不是整数" class="headerlink" title="5、判断是不是整数"></a>5、判断是不是整数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (null != row.getCell(2) &amp;&amp; row.getCell(2).getCellType() != CellType.BLANK) &#123;</span><br><span class="line">//将单元格设置成字符串类型，如果是整数，读取到的会是Double类型，所以需要设置成CellType.STRING</span><br><span class="line">    row.getCell(2).setCellType(CellType.STRING);</span><br><span class="line">    String cellValue = ExcelUtil.getCellValue(row.getCell(2));</span><br><span class="line">    try &#123;</span><br><span class="line">        int i1 = Integer.parseInt(cellValue);</span><br><span class="line">        if (i1 &lt;= 0) &#123;</span><br><span class="line">            message.append(&quot;第&quot; + (i + 1) + &quot;行第3列xxx 不是大于0的整数&quot; + cellValue + &quot;   ;        &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        product.setOverseasMasterCtn(i1);</span><br><span class="line">    &#125; catch (Exception exception) &#123;</span><br><span class="line">        exception.getStackTrace();</span><br><span class="line">        exception.getMessage();</span><br><span class="line">        message.append(&quot;第&quot; + (i + 1) + &quot;行第3列xxxx 不是大于0的整数&quot; + cellValue + &quot;   ;        &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CellType类型以及值的对应关系"><a href="#CellType类型以及值的对应关系" class="headerlink" title="CellType类型以及值的对应关系"></a>CellType类型以及值的对应关系</h5><table><thead><tr><th>CellType</th><th><strong>类型</strong></th><th><strong>值</strong></th></tr></thead><tbody><tr><td>CELL_TYPE_NUMERIC</td><td>数值</td><td>0</td></tr><tr><td>CELL_TYPE_STRING</td><td>字符串型</td><td>1</td></tr><tr><td>CELL_TYPE_FORMULA</td><td>公式型</td><td>2</td></tr><tr><td>CELL_TYPE_BLANK</td><td>空值</td><td>3</td></tr><tr><td>CELL_TYPE_BOOLEAN</td><td>布尔型</td><td>4</td></tr><tr><td>CELL_TYPE_ERROR</td><td>错误</td><td>5</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> POI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java poi 导入带图片的excel表格.md</title>
      <link href="/2022/08/10/java-poi-%E5%AF%BC%E5%85%A5%E5%B8%A6%E5%9B%BE%E7%89%87%E7%9A%84excel%E8%A1%A8%E6%A0%BC-md/"/>
      <url>/2022/08/10/java-poi-%E5%AF%BC%E5%85%A5%E5%B8%A6%E5%9B%BE%E7%89%87%E7%9A%84excel%E8%A1%A8%E6%A0%BC-md/</url>
      
        <content type="html"><![CDATA[<h1 id="java导入带图片的excel表格"><a href="#java导入带图片的excel表格" class="headerlink" title="java导入带图片的excel表格"></a>java导入带图片的excel表格</h1><p>参考</p><p>目前使用 ：<a href="https://blog.csdn.net/qq_41841482/article/details/123070513">Java读取Excel表格中的图片_java读取excel中的图片-CSDN博客</a></p><p>目前使用 ：<a href="https://blog.csdn.net/qq_23123177/article/details/133638391">java使用POI读取Excel表格中的图片（包含嵌入单元格图片，浮动图片，xls-2003,xlsx-2007）_workbook解析excel中的图片-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_36961226/article/details/115477437">java导入带图片的excel表格（工具HSSFWorkbook-HSSFSheet）（支持一条数据（单元格）可以导入多个图片，）_java导入excel带图片-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_47100953/article/details/128921497">java 读取excel图片导入(亲测有效)_java excel导入图片-CSDN博客</a></p><p><a href="https://blog.51cto.com/u_16175525/8932074">java导入带图片的excel_mob649e816ab022的技术博客_51CTO博客</a></p><p><a href="https://www.jianshu.com/p/955685fab6fd">Java 读取Excel（xlsx）的内容及图片并保存 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/qq_21137441/article/details/79226171">JAVA POI的使用_poi-3.10-final-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_43964403/article/details/109183250">JAVA POI的excel中包含图片进行读取保存,单张图片,多张图片_java获取单元格是多个图片,保存数据库中-CSDN博客</a></p><p><a href="https://blog.csdn.net/maudboy/article/details/133145278">java读取Excel,(支持WPS嵌入式图片)_java读取excel中的图片-CSDN博客</a></p><p><a href="https://blog.csdn.net/hanerer1314/article/details/117386322">POI 读取excel图片并定位图片需要提前注意的事项_sheet.getrelations()-CSDN博客</a></p><p><a href="https://www.cnblogs.com/magicya/p/12173321.html">Java读取Excel数值内容带.0或变科学计数法的解决办法 - Yaaaaa - 博客园 (cnblogs.com)</a></p><hr><h4 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不同版本的excel有不同的拓展名（.[xls](https://so.csdn.net/so/search?q=xls&amp;spm=1001.2101.3001.7020) .xlsx），对应不同的方法。</span><br><span class="line"></span><br><span class="line">所有的图片在excel中保存在一个集合中，以行列号为key，图片为value，将结果封装到map集合中，图片的格式为“HSSFPictureData”“XSSFPictureData”。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取图片和位置 (xls)</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public static Map&lt;String, HSSFPictureData&gt; getPictures (HSSFSheet sheet) throws IOException &#123;</span><br><span class="line">    Map&lt;String, HSSFPictureData&gt; map = new HashMap&lt;String, HSSFPictureData&gt;();</span><br><span class="line">    List&lt;HSSFShape&gt; list = sheet.getDrawingPatriarch().getChildren();</span><br><span class="line">    for (HSSFShape shape : list) &#123;</span><br><span class="line">        if (shape instanceof HSSFPicture) &#123;</span><br><span class="line">            HSSFPicture picture = (HSSFPicture) shape;</span><br><span class="line">            HSSFClientAnchor cAnchor = picture.getClientAnchor();</span><br><span class="line">            HSSFPictureData pdata = picture.getPictureData();</span><br><span class="line">            String key = cAnchor.getRow1() + &quot;-&quot; + cAnchor.getCol1(); // 行号-列号</span><br><span class="line">            map.put(key, pdata);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 获取图片和位置 (xlsx)</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public static Map&lt;String, XSSFPictureData&gt; getPictures (XSSFSheet sheet) throws IOException &#123;</span><br><span class="line">    Map&lt;String, XSSFPictureData&gt; map = new HashMap&lt;String, XSSFPictureData&gt;();</span><br><span class="line">    List&lt;POIXMLDocumentPart&gt; list = sheet.getRelations();</span><br><span class="line">    for (POIXMLDocumentPart part : list) &#123;</span><br><span class="line">        if (part instanceof XSSFDrawing) &#123;</span><br><span class="line">            XSSFDrawing drawing = (XSSFDrawing) part;</span><br><span class="line">            List&lt;XSSFShape&gt; shapes = drawing.getShapes();</span><br><span class="line">            for (XSSFShape shape : shapes) &#123;</span><br><span class="line">                XSSFPicture picture = (XSSFPicture) shape;</span><br><span class="line">                XSSFClientAnchor anchor = picture.getPreferredSize();</span><br><span class="line">                CTMarker marker = anchor.getFrom();</span><br><span class="line">                String key = marker.getRow() + &quot;-&quot; + marker.getCol();</span><br><span class="line">                map.put(key, picture.getPictureData());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="从map拿到图片使用输出流将图片保存在本地"><a href="#从map拿到图片使用输出流将图片保存在本地" class="headerlink" title="从map拿到图片使用输出流将图片保存在本地"></a>从map拿到图片使用输出流将图片保存在本地</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PictureData picData = map.get(hang-1+&quot;:&quot;+20);</span><br><span class="line">String ext = picData.suggestFileExtension();//获取图片的后缀名</span><br><span class="line">byte[] data = picData.getData();</span><br><span class="line">String fileName = UUID.randomUUID().toString();</span><br><span class="line">//文件夹路径：temporarypath </span><br><span class="line">String temporarypath = FtpPropertiesLoader.get(&quot;star&quot;);</span><br><span class="line">FileOutputStream out = new FileOutputStream(star + fileName + ext);</span><br><span class="line">out.write(data); </span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><hr><p>自己开发时写的的代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">public ResultData databaseVendorInfoSizeInfo(MultipartFile file) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // System.out.println(&quot;开始时间&quot; + new Date().toString());</span><br><span class="line">        Workbook book;</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        String fileType = Objects.requireNonNull(originalFilename)</span><br><span class="line">                .substring(originalFilename.lastIndexOf(&quot;.&quot;) + 1);</span><br><span class="line">        Map&lt;String, HSSFPictureData&gt; HSSFPictureMap = new HashMap&lt;String, HSSFPictureData&gt;();</span><br><span class="line">        Map&lt;String, XSSFPictureData&gt; XSSFPictureMap = new HashMap&lt;String, XSSFPictureData&gt;();</span><br><span class="line">        if (&quot;xls&quot;.equalsIgnoreCase(fileType)) &#123;</span><br><span class="line">            book = new HSSFWorkbook(file.getInputStream());// 2003版本office</span><br><span class="line">            String fileName = originalFilename.substring(0, originalFilename.lastIndexOf(&quot;.&quot;));</span><br><span class="line">            int numberOfSheets = book.getNumberOfSheets();</span><br><span class="line">            if (numberOfSheets &gt; 1) &#123;</span><br><span class="line">                return ResultData.fail(fileName + &quot;Sheet页大于1&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            HSSFSheet sheet = (HSSFSheet) book.getSheetAt(0);</span><br><span class="line">            HSSFPictureMap = getHSSFSheetPictures(sheet);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            book = new XSSFWorkbook(file.getInputStream());// 判断是否是2007版本office</span><br><span class="line">            String fileName = originalFilename.substring(0, originalFilename.lastIndexOf(&quot;.&quot;));</span><br><span class="line">            int numberOfSheets = book.getNumberOfSheets();</span><br><span class="line">            if (numberOfSheets &gt; 1) &#123;</span><br><span class="line">                return ResultData.fail(fileName + &quot;Sheet页大于1&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            XSSFSheet sheet = (XSSFSheet) book.getSheetAt(0);</span><br><span class="line">            XSSFPictureMap = getXSSFSheetPictures(sheet);</span><br><span class="line">        &#125;</span><br><span class="line">        String userCode = UserUtils.getUserCode();</span><br><span class="line">        Date now = new Date();</span><br><span class="line">        VarConfig uploadFilePathConfig = varConfigMapper.getVarConfig(&quot;upload_file_path&quot;);</span><br><span class="line">        if (ObjectUtil.isNull(uploadFilePathConfig)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;NoUploadFilePath&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        VarConfig urlConfig = varConfigMapper.getVarConfig(&quot;product_url&quot;);</span><br><span class="line">        if (ObjectUtil.isNull(urlConfig)) &#123;</span><br><span class="line">            return ResultData.fail(&quot;NotPostTaskUrl&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String cp = &quot;/&quot;;</span><br><span class="line">        String path = uploadFilePathConfig.getValue();</span><br><span class="line">        path = path.replace(&quot;\\&quot;, cp);</span><br><span class="line">        if (path.lastIndexOf(cp) != path.length() - 1) &#123;</span><br><span class="line">            path = path + cp;</span><br><span class="line">        &#125;</span><br><span class="line">        String filePath = urlConfig.getValue();</span><br><span class="line">        if (filePath.lastIndexOf(cp) != filePath.length() - 1) &#123;</span><br><span class="line">            filePath = filePath + cp;</span><br><span class="line">        &#125;</span><br><span class="line">        Sheet sheet = book.getSheetAt(0);</span><br><span class="line">        int lastRowNum = sheet.getLastRowNum();</span><br><span class="line">        if (lastRowNum &lt;= 3) &#123;</span><br><span class="line">            return ResultData.fail(&quot;系统查看要导的数据为空,请导入数据&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 3; i &lt;= lastRowNum; i++) &#123;</span><br><span class="line">            Row row = sheet.getRow(i);</span><br><span class="line">            if (null != row) &#123;</span><br><span class="line">                boolean rowEmpty = isRowEmpty(row);</span><br><span class="line">                if (rowEmpty) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //获取浮动图片</span><br><span class="line">                if (&quot;xls&quot;.equalsIgnoreCase(fileType)) &#123;</span><br><span class="line">                    PictureData hssfPictureData = HSSFPictureMap.get(i + &quot;-&quot; + 1);</span><br><span class="line">                    if (null != hssfPictureData) &#123;</span><br><span class="line">                        byte[] data = hssfPictureData.getData();</span><br><span class="line">                        String end = hssfPictureData.suggestFileExtension();</span><br><span class="line">                        String uuid = UUID.randomUUID().toString();</span><br><span class="line">                        String pictureFileName = uuid + &quot;.&quot; + end;</span><br><span class="line">                        upload(data, pictureFileName, path + filePath + cp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    PictureData xssfPictureData = XSSFPictureMap.get(i + &quot;-&quot; + 1);</span><br><span class="line">                    if (null != xssfPictureData) &#123;</span><br><span class="line">                        byte[] data = xssfPictureData.getData();</span><br><span class="line">                        String end = xssfPictureData.suggestFileExtension();</span><br><span class="line">                        String uuid = UUID.randomUUID().toString();</span><br><span class="line">                        String pictureFileName = uuid + &quot;.&quot; + end;</span><br><span class="line">                        upload(data, pictureFileName, path + filePath + cp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // System.out.println(&quot;结束时间&quot; + new Date().toString());</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.getMessage();</span><br><span class="line">        e.getStackTrace();</span><br><span class="line">        return ResultData.fail(&quot;请求异常&quot; + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    return ResultData.succeed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取图片和位置 (xls)</span><br><span class="line"> *</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public static Map&lt;String, HSSFPictureData&gt; getHSSFSheetPictures(HSSFSheet sheet) throws IOException &#123;</span><br><span class="line">    Map&lt;String, HSSFPictureData&gt; map = new HashMap&lt;String, HSSFPictureData&gt;();</span><br><span class="line">    List&lt;HSSFShape&gt; list = sheet.getDrawingPatriarch().getChildren();</span><br><span class="line">    for (HSSFShape shape : list) &#123;</span><br><span class="line">        if (shape instanceof HSSFPicture) &#123;</span><br><span class="line">            HSSFPicture picture = (HSSFPicture) shape;</span><br><span class="line">            HSSFClientAnchor cAnchor = picture.getClientAnchor();</span><br><span class="line">            HSSFPictureData pdata = picture.getPictureData();</span><br><span class="line">            String key = cAnchor.getRow1() + &quot;-&quot; + cAnchor.getCol1(); // 行号-列号</span><br><span class="line">            map.put(key, pdata);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取图片和位置 (xlsx)</span><br><span class="line"> *</span><br><span class="line"> * @param sheet</span><br><span class="line"> * @return</span><br><span class="line"> * @throws IOException</span><br><span class="line"> */</span><br><span class="line">public static Map&lt;String, XSSFPictureData&gt; getXSSFSheetPictures(XSSFSheet sheet) throws IOException &#123;</span><br><span class="line">    Map&lt;String, XSSFPictureData&gt; map = new HashMap&lt;String, XSSFPictureData&gt;();</span><br><span class="line">    List&lt;POIXMLDocumentPart&gt; list = sheet.getRelations();</span><br><span class="line">    for (POIXMLDocumentPart part : list) &#123;</span><br><span class="line">        if (part instanceof XSSFDrawing) &#123;</span><br><span class="line">            XSSFDrawing drawing = (XSSFDrawing) part;</span><br><span class="line">            List&lt;XSSFShape&gt; shapes = drawing.getShapes();</span><br><span class="line">            for (XSSFShape shape : shapes) &#123;</span><br><span class="line">                XSSFPicture picture = (XSSFPicture) shape;</span><br><span class="line">                XSSFClientAnchor anchor = picture.getPreferredSize();</span><br><span class="line">                CTMarker marker = anchor.getFrom();</span><br><span class="line">                String key = marker.getRow() + &quot;-&quot; + marker.getCol();</span><br><span class="line">                map.put(key, picture.getPictureData());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 上传文件</span><br><span class="line"> */</span><br><span class="line">public static String upload(byte[] fileByte, String fileName, String fileDir) throws IOException &#123;</span><br><span class="line">    File file = new File(fileDir + fileName);</span><br><span class="line">    if (!file.exists()) &#123;  //判断要目标文件夹是否存在不存在则创建</span><br><span class="line">        File parentFile = file.getParentFile();</span><br><span class="line">        if (!parentFile.exists()) &#123;</span><br><span class="line">            parentFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        file.delete();</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line">    FileOutputStream out = new FileOutputStream(file);</span><br><span class="line">    out.write(fileByte);</span><br><span class="line">    out.close();</span><br><span class="line">    return fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 判断是否空行</span><br><span class="line"> */</span><br><span class="line">public static boolean isRowEmpty(Row row) &#123;</span><br><span class="line">for (int c = row.getFirstCellNum(); c &lt; row.getLastCellNum(); c++) &#123;</span><br><span class="line">Cell cell = row.getCell(c);</span><br><span class="line">if (cell != null &amp;&amp; cell.getCellType() != CellType.BLANK)</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> POI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 日历 Calendar 的使用</title>
      <link href="/2022/06/15/Java-%E6%97%A5%E5%8E%86-Calendar-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/06/15/Java-%E6%97%A5%E5%8E%86-Calendar-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-日历-Calendar-的使用"><a href="#Java-日历-Calendar-的使用" class="headerlink" title="Java 日历 Calendar 的使用"></a>Java 日历 Calendar 的使用</h1><p>参考<br><a href="https://blog.csdn.net/qq_45536740/article/details/105261786">(72条消息) Calendar.getInstance()用法_马啃菠萝-林的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Zheng_xiao_xin/article/details/81503031">(72条消息) JAVA 获取某段时间内的所有日期集合_耗子他大哥的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_44543774/article/details/131592516">(93条消息) java计算两个日期之间相差的天数的四种方法_java计算两个日期之间的天数_是小李呀~的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/kelekele111/article/details/122663106">(72条消息) Java获取今天是星期几_java获取星期几-CSDN博客</a></p><pre><code>public void getWeekDay()&#123;   String[] weekDays = &#123;&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;&#125;;    Calendar calendar=Calendar.getInstance();    System.out.println(&quot;今天是中国的&quot;+weekDays[calendar.get(Calendar.DAY_OF_WEEK)-1]);    &#125;    weekDays[calendar.get(Calendar.DAY_OF_WEEK)-1]一、为什么要在weekDays数组中减一？因为calendar.get(Calendar.DAY_OF_WEEK)获取到的为今天是这一周的第几天，而代码是外国人编写的，在国外一周的开始不是星期一而是星期天，所以如果今天是中国的星期一，但是calendar.get(Calendar.DAY_OF_WEEK)获取的却是2</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取某个时间的前后一星期的时间数组和星期几   例如今天2023-04-27 获取 2023-04-20 和 2023-05-04</span><br><span class="line">Map map = new HashMap&lt;&gt;();</span><br><span class="line">List&lt;String&gt; dateList = new ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; dateWeekList = new ArrayList&lt;&gt;();</span><br><span class="line">SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">String[] weekDays = &#123;&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;&#125;;</span><br><span class="line">//选择的时间</span><br><span class="line">String selectTime = scheduleMaster.getSelectTime();</span><br><span class="line">Date parse = null;</span><br><span class="line">try &#123;</span><br><span class="line">    parse = simpleDateFormat.parse(selectTime);</span><br><span class="line">&#125; catch (ParseException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    return ResultData.fail(&quot;时间转换错误&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//日历</span><br><span class="line">Calendar instance = Calendar.getInstance();</span><br><span class="line">//设置时间</span><br><span class="line">instance.setTime(parse);</span><br><span class="line">//选择的时间的后7天</span><br><span class="line">instance.add(Calendar.DATE, 7);</span><br><span class="line">Date endSelectTime = instance.getTime();</span><br><span class="line">scheduleMaster.setEndSelectTime(simpleDateFormat.format(endSelectTime));</span><br><span class="line">//选择的时间的前7天</span><br><span class="line">instance.add(Calendar.DATE, -14);</span><br><span class="line">Date startSelectTime = instance.getTime();</span><br><span class="line">scheduleMaster.setStartSelectTime(simpleDateFormat.format(startSelectTime));</span><br><span class="line">//开始获取时间数组和星期数组</span><br><span class="line">while (instance.getTime().compareTo(endSelectTime) &lt;= 0) &#123;</span><br><span class="line">//添加一天</span><br><span class="line">    instance.add(Calendar.DATE, 1);</span><br><span class="line">    //添加一天转成字符串</span><br><span class="line">    dateList.add(simpleDateFormat.format(instance.getTime()));</span><br><span class="line">    //获取日历返回的数值，转成星期</span><br><span class="line">    dateWeekList.add(weekDays[instance.get(Calendar.DAY_OF_WEEK) - 1]);</span><br><span class="line">&#125;</span><br><span class="line">//查询数据</span><br><span class="line">List&lt;Map&lt;String, String&gt;&gt; dateDataList = scheduleMasterMapper.getPlannedShipmentDetailsBySelectTime(scheduleMaster);</span><br><span class="line">//查询数据</span><br><span class="line">List&lt;Map&lt;String, String&gt;&gt; tableDataList = scheduleMasterMapper.getScheduleMaster(scheduleMaster);</span><br><span class="line">//新增数据</span><br><span class="line">map.put(&quot;tableDataList&quot;, tableDataList);</span><br><span class="line">map.put(&quot;dateDataList&quot;, dateDataList);</span><br><span class="line">map.put(&quot;dateList&quot;, dateList);</span><br><span class="line">map.put(&quot;dateWeekList&quot;, dateWeekList);</span><br><span class="line">//返回数据</span><br><span class="line">return ResultData.succeed(map);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java lambda表达式</title>
      <link href="/2022/06/10/java-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/06/10/java-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>lambal<br>参考<br><a href="https://blog.csdn.net/gsls200808/article/details/86501905">(37条消息) java 8 lambda表达式list操作分组、过滤、求和、最值、排序、去重_gsls200808的博客-CSDN博客_lambda分组求和</a></p><p><a href="https://blog.csdn.net/qq_42570364/article/details/103643509">(46条消息) 获取集合中最大值,list中对象的某个属性的最大值最小值平均值以及筛选_媤纹琴獣的博客-CSDN博客_集合找最大值</a></p><p><a href="https://blog.csdn.net/zhouzhiwengang/article/details/112312266">(66条消息) Java8 Stream 之sorted方法 排序讲解_stream().sorted_在奋斗的大道的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/woyaobianfei/p/9187127.html">java8笔记: sorted()之正序倒序 - 我要变肥 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/tonglingtou1875/article/details/113028230">(76条消息) Java8 stream、List forEach 遍历对象 List 对某一字段重新赋值_stream给对象赋值_tonglingtou1875的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/MidYear/article/details/131722819">使用java8 新特性stream流对List＜Map＜String, Object＞＞集合进行遍历、过滤、查询、去重、排序、分组_list&gt; 遍历-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#自然序排序一个list</span><br><span class="line">list.stream().sorted() </span><br><span class="line"> </span><br><span class="line">#自然序逆序元素，使用Comparator 提供的reverseOrder() 方法</span><br><span class="line">list.stream().sorted(Comparator.reverseOrder()) </span><br><span class="line"> </span><br><span class="line"># 使用Comparator 来排序一个list</span><br><span class="line">list.stream().sorted(Comparator.comparing(Student::getAge)) </span><br><span class="line"> </span><br><span class="line"># 颠倒使用Comparator 来排序一个list的顺序，使用Comparator 提供的reverseOrder() 方法</span><br><span class="line">list.stream().sorted(Comparator.comparing(Student::getAge).reversed())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="List对象集合按时间倒序排序"><a href="#List对象集合按时间倒序排序" class="headerlink" title="List对象集合按时间倒序排序"></a>List对象集合按时间倒序排序</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list = list.stream().sorted(Comparator.comparing(实体::排序字段).reversed()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h1 id="List-对象如何排序？"><a href="#List-对象如何排序？" class="headerlink" title="List&lt;Map&lt;String, Object&gt;&gt; 对象如何排序？"></a>List&lt;Map&lt;String, Object&gt;&gt; 对象如何排序？</h1><pre><code>List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();map.put(&quot;id&quot;,1);map.put(&quot;num&quot;, 2);list.add(map);map = new HashMap&lt;&gt;();map.put(&quot;id&quot;,3);map.put(&quot;num&quot;, 4);list.add(map);map = new HashMap&lt;&gt;();map.put(&quot;id&quot;,2);map.put(&quot;num&quot;, 5);list.add(map);如果是Java8的话，简单粗暴    //升序    list.sort(Comparator.comparingInt(o -&gt; Integer.parseInt(o.get(&quot;id&quot;).toString())));</code></pre><p>java8的lambda表达式提供了一些方便list操作的方法，主要涵盖分组、过滤、求和、最值、排序、去重。跟之前的传统写法对比，能少写不少代码。</p><p>新建实体类</p><p>package com.vvvtimes.vo;</p><p>import java.math.BigDecimal;<br>import java.util.Date;</p><p>public class User {</p><pre><code>private Long id; //姓名private String name; //年龄private int age; //工号private String jobNumber; //性别private String sex; //入职日期private Date entryDate; //家庭成员数量private BigDecimal familyMemberQuantity; public Long getId() &#123;    return id;&#125; public void setId(Long id) &#123;    this.id = id;&#125; public String getName() &#123;    return name;&#125; public void setName(String name) &#123;    this.name = name;&#125; public int getAge() &#123;    return age;&#125; public void setAge(int age) &#123;    this.age = age;&#125; public String getJobNumber() &#123;    return jobNumber;&#125; public void setJobNumber(String jobNumber) &#123;    this.jobNumber = jobNumber;&#125; public String getSex() &#123;    return sex;&#125; public void setSex(String sex) &#123;    this.sex = sex;&#125; public Date getEntryDate() &#123;    return entryDate;&#125; public void setEntryDate(Date entryDate) &#123;    this.entryDate = entryDate;&#125; public BigDecimal getFamilyMemberQuantity() &#123;    return familyMemberQuantity;&#125; public void setFamilyMemberQuantity(BigDecimal familyMemberQuantity) &#123;    this.familyMemberQuantity = familyMemberQuantity;&#125;</code></pre><p>}</p><p>1.分组</p><p>通过groupingBy可以分组指定字段</p><pre><code>    //分组    Map&lt;String, List&lt;User&gt;&gt; groupBySex = userList.stream().collect(Collectors.groupingBy(User::getSex));    //遍历分组    for (Map.Entry&lt;String, List&lt;User&gt;&gt; entryUser : groupBySex.entrySet()) &#123;        String key = entryUser.getKey();        List&lt;User&gt; entryUserList = entryUser.getValue();    &#125;</code></pre><p>上门的分组存在key空值安全问题，需要做过滤或封装处理</p><p>用Optional封装使用中会报No value present</p><p>&#x2F;&#x2F;分组添加累计<br>Map&lt;Optional<Long>, List<SalesOrderMonthlyStatementVo>&gt; groupMap &#x3D; list.stream().collect(Collectors.groupingBy(x -&gt; Optional.ofNullable(x.getReviewerGroupId())));<br>&#x2F;&#x2F;遍历分组<br>for (Map.Entry&lt;Optional<Long>, List<SalesOrderMonthlyStatementVo>&gt; entryGroup : groupMap.entrySet()) {<br>Optional<Long> key &#x3D; entryGroup.getKey();<br>Long groupId &#x3D; key.get();<br>List<SalesOrderMonthlyStatementVo> entryGroupList &#x3D; entryGroup.getValue();<br>}<br>正确使用方法如下，自定义groupingBy_WithNullKeys</p><p>&#x2F;** Like Collectors.groupingBy, but accepts null keys. *&#x2F;<br>public static &lt;T, A&gt; Collector&lt;T, ?, Map&lt;A, List<T>&gt;&gt;<br>groupingBy_WithNullKeys(Function&lt;? super T, ? extends A&gt; classifier) {<br>return Collectors.toMap(<br>classifier,<br>Collections::singletonList,<br>(List<T> oldList, List<T> newEl) -&gt; {<br>List<T> newList &#x3D; new ArrayList&lt;&gt;(oldList.size() + 1);<br>newList.addAll(oldList);<br>newList.addAll(newEl);<br>return newList;<br>});<br>}<br>然后调用</p><p>Map&lt;Long, List<SalesOrderMonthlyStatementVo>&gt; groupMap &#x3D; list.stream().collect(groupingBy_WithNullKeys(x -&gt; x.getReviewerGroupId()));<br>多字段分组</p><pre><code>    Function&lt;WarehouseReceiptLineBatch, List&lt;Object&gt;&gt; compositeKey = wlb -&gt;            Arrays.&lt;Object&gt;asList(wlb.getWarehouseReceiptLineId(), wlb.getWarehouseAreaId(), wlb.getWarehouseLocationId());    Map&lt;Object, List&lt;WarehouseReceiptLineBatch&gt;&gt; map =            warehouseReceiptLineBatchList.stream().collect(Collectors.groupingBy(compositeKey, Collectors.toList()));    //遍历分组    for (Map.Entry&lt;Object, List&lt;WarehouseReceiptLineBatch&gt;&gt; entryUser : map.entrySet()) &#123;        List&lt;Object&gt; key = (List&lt;Object&gt;) entryUser.getKey();        List&lt;WarehouseReceiptLineBatch&gt; entryUserList = entryUser.getValue();        Long warehouseReceiptLineId = (Long) key.get(0);        Long warehouseAreaId = (Long) key.get(1);        Long warehouseLocationId = (Long) key.get(2);     &#125;</code></pre><p>2.过滤</p><p>通过filter方法可以过滤某些条件</p><pre><code>    //过滤    //排除掉工号为201901的用户    List&lt;User&gt; userCommonList = userList.stream().filter(a -&gt; !a.getJobNumber().equals(&quot;201901&quot;)).collect(Collectors.toList());</code></pre><p>3.求和</p><p>分基本类型和大数类型求和，基本类型先mapToInt，然后调用sum方法，大数类型使用reduce调用BigDecimal::add方法</p><pre><code>    //求和    //基本类型    int sumAge = userList.stream().mapToInt(User::getAge).sum();    //BigDecimal求和    BigDecimal totalQuantity = userList.stream().map(User::getFamilyMemberQuantity).reduce(BigDecimal.ZERO, BigDecimal::add);</code></pre><p>上面的求和不能过滤bigDecimal对象为null的情况，可能会报空指针，这种情况，我们可以用filter方法过滤，或者重写求和方法</p><p>重写求和方法</p><p>package com.vvvtimes.util;</p><p>import java.math.BigDecimal;</p><p>public class BigDecimalUtils {</p><pre><code>public static BigDecimal ifNullSet0(BigDecimal in) &#123;    if (in != null) &#123;        return in;    &#125;    return BigDecimal.ZERO;&#125; public static BigDecimal sum(BigDecimal ...in)&#123;    BigDecimal result = BigDecimal.ZERO;    for (int i = 0; i &lt; in.length; i++)&#123;        result = result.add(ifNullSet0(in[i]));    &#125;    return result;&#125;</code></pre><p>}</p><p>使用重写的方法</p><p>BigDecimal totalQuantity2 &#x3D; userList.stream().map(User::getFamilyMemberQuantity).reduce(BigDecimal.ZERO, BigDecimalUtils::sum);<br>判断对象空</p><p>stream.filter(x -&gt; x!&#x3D;null)<br>stream.filter(Objects::nonNull)<br>判断字段空</p><p>stream.filter(x -&gt; x.getDateTime()!&#x3D;null)<br>4.最值</p><p>求最小与最大，使用min max方法</p><pre><code>    //最小    Date minEntryDate = userList.stream().map(User::getEntryDate).min(Date::compareTo).get();     //最大    Date maxEntryDate = userList.stream().map(User::getEntryDate).max(Date::compareTo).get();</code></pre><p>有时候我们需要知道最大最小对应的这个对象，我们可以通过如下方法获取</p><p>Comparator<LeasingBusinessContract> comparator &#x3D; Comparator.comparing(LeasingBusinessContract::getLeaseEndDate);<br>LeasingBusinessContract maxObject &#x3D; leasingBusinessContractList.stream().max(comparator).get();<br>5.List 转map</p><pre><code>     /**     * List -&gt; Map     * 需要注意的是：     * toMap 如果集合对象有重复的key，会报错Duplicate key ....     *  user1,user2的id都为1。     *  可以用 (k1,k2)-&gt;k1 来设置，如果有重复的key,则保留key1,舍弃key2     */    Map&lt;Long, User&gt; userMap = userList.stream().collect(Collectors.toMap(User::getId, a -&gt; a,(k1,k2)-&gt;k1));</code></pre><p>list转map的时候有时候会将date类型作为key，实际情况中使用string的多，我们可以将某个字段转成string</p><p>Map&lt;String, WorkCenterLoadVo&gt; workCenterMap &#x3D; list.stream().collect(Collectors.toMap(key-&gt;DateFormatUtils.format(key.getDate(), “yyyy-MM-dd”), a -&gt; a,(k1,k2)-&gt;k1));<br>list转map有时候会用到多字段key的map结构，除了常用的key用字符串连接，也可以使用apache commons的多字段key形式的map结构MultiKeyMap</p><p>6.排序</p><p>可通过Sort对单字段多字段排序</p><pre><code>    //排序    //单字段排序，根据id排序    userList.sort(Comparator.comparing(User::getId));    //多字段排序，根据id，年龄排序    userList.sort(Comparator.comparing(User::getId).thenComparing(User::getAge));</code></pre><p>实际上这个写法存在空值安全问题，建议改成</p><p>userList.sort(Comparator.comparing(User::getId,Comparator.nullsLast(Comparator.naturalOrder())).thenComparing(User::getAge,Comparator.nullsLast(Comparator.naturalOrder())));<br>7.去重</p><p>可通过distinct方法进行去重</p><pre><code>    //去重    List&lt;Long&gt; idList = new ArrayList&lt;Long&gt;();    idList.add(1L);    idList.add(1L);    idList.add(2L);    List&lt;Long&gt; distinctIdList = idList.stream().distinct().collect(Collectors.toList());    针对List&lt;Map&lt;String, Object&gt;&gt; 某个属性进行去重   例如 time    List&lt;Map&lt;String, Object&gt;&gt; list= new ArrayList&lt;&gt;();        for (int i =0 ; i&lt;5; i++)&#123;            HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();            map.put(&quot;time&quot;,&quot;2023-04-26&quot;);            map.put(&quot;user&quot;,&quot;sb&quot;);            list.add(map);            HashMap&lt;String, Object&gt; map2 = new HashMap&lt;&gt;();            map2.put(&quot;time&quot;,&quot;2023-04-25&quot;);            map2.put(&quot;user&quot;,&quot;sb0&quot;);            list.add(map2);        &#125;        HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();        map.put(&quot;time&quot;,&quot;2023-04-27&quot;);        map.put(&quot;user&quot;,&quot;sb1&quot;);        list.add(map);        HashMap&lt;String, Object&gt; map1 = new HashMap&lt;&gt;();        map1.put(&quot;time&quot;,&quot;2023-04-28&quot;);        map1.put(&quot;user&quot;,&quot;sb2&quot;);        list.add(map1);        List&lt;Object&gt; time = list.stream().map(a -&gt; a.get(&quot;time&quot;)).distinct().collect(Collectors.toList());        System.out.println(time);</code></pre><p>针对属性去重</p><p>List<AddOutboundNoticeDetailsBatchVo> entryDetailsBatchDistinctBatchIdList &#x3D; entryDetailsBatchList.stream().filter(distinctByKey(b -&gt; b.getMaterialBatchNumberId())).collect(Collectors.toList());</p><p>&#x2F;&#x2F;distinctByKey自己定义<br>public static <T> Predicate<T> distinctByKey(Function&lt;? super T, Object&gt; keyExtractor) {<br>Map&lt;Object, Boolean&gt; seen &#x3D; new ConcurrentHashMap&lt;&gt;();<br>return t -&gt; seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) &#x3D;&#x3D; null;<br>}<br>8.获取list某个字段组装新list</p><pre><code>    //获取list对象的某个字段组装成新list    List&lt;Long&gt; userIdList = userList.stream().map(a -&gt; a.getId()).collect(Collectors.toList());</code></pre><p>9.批量设置list列表字段为同一个值</p><p>addList.stream().forEach(a -&gt; a.setDelFlag(“0”));<br>10.不同实体的list拷贝</p><p>List<TimePeriodDate> timePeriodDateList1 &#x3D; calendarModelVoList.stream().map(p-&gt;{TimePeriodDate e &#x3D; new TimePeriodDate(); e.setStartDate(p.getBegin());e.setEndDate(p.getEnd()); return e;}).collect(Collectors.toList());                       </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JRedis</title>
      <link href="/2021/12/15/JRedis/"/>
      <url>/2021/12/15/JRedis/</url>
      
        <content type="html"><![CDATA[<h1 id="JRedis"><a href="#JRedis" class="headerlink" title="JRedis"></a>JRedis</h1><p>参考</p><p><a href="https://blog.csdn.net/weixin_39478524/article/details/121180059">JavaWeb——（17）Redis和Jedis_javaweb jedis工具类-CSDN博客</a></p><p><a href="https://blog.csdn.net/Huang_ZX_259/article/details/122906569">(48条消息) 使用Java操作Redis_一心同学的博客-CSDN博客_java操作redis</a></p><p><a href="https://blog.csdn.net/my13413527259/article/details/85063445">(48条消息) Jedis常用方法_雨后浅浅唱的博客-CSDN博客_jedis方法</a></p><p>目录</p><p>前言</p><p>一、准备步骤</p><p>二、Jedis连接Redis</p><p>三、基本操作</p><p>3.1 操作String数据类型</p><p>3.2 操作List数据类型</p><p>3.3 事务操作</p><p>四、SpringBoot集成Redis</p><p>4.1 介绍</p><p>4.2 集成Redis</p><p>4.3  保存对象</p><h3 id="一、准备步骤"><a href="#一、准备步骤" class="headerlink" title="一、准备步骤"></a>一、准备步骤</h3><p>修改配置文件redis.conf:</p><p>（1）注释以下属性，因为我们是需要进行远程连接的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#bind:127.0.0.1</span><br></pre></td></tr></table></figure><p>（2）将protected-mode 设置为no</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure><p>（3）设置为允许后台连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure><p>注意：</p><p>在远程服务器进行连接需要确保将以下三个步骤都完成：</p><p>（1）设置服务器的安全组开放6379端口</p><p>（2）防火墙开放端口：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanet</span><br></pre></td></tr></table></figure><p>（3）重启防火墙：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><h3 id="二、Jedis连接Redis"><a href="#二、Jedis连接Redis" class="headerlink" title="二、Jedis连接Redis"></a>二、Jedis连接Redis</h3><p>（1）创建一个Maven项目，并导入以下依赖：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">     </span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.62&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>（2）测试连接：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.yixin;</span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">public class RedisTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //连接本地的 Redis 服务</span><br><span class="line">        Jedis jedis = new Jedis(&quot;服务器地址&quot;, 6379);</span><br><span class="line">        String response = jedis.ping();</span><br><span class="line">        System.out.println(response); // PONG</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到PONG说明我们成功连接上了我们服务器上的Redis了！</p><h3 id="三、基本操作"><a href="#三、基本操作" class="headerlink" title="三、基本操作"></a>三、基本操作</h3><p>3.1 操作String数据类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.yixin;</span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Redis_String &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //连接本地的 Redis 服务</span><br><span class="line">        Jedis jedis = new Jedis(&quot;服务器地址&quot;, 6379);</span><br><span class="line">        String response = jedis.ping();</span><br><span class="line">        System.out.println(response); // PONG</span><br><span class="line">     </span><br><span class="line">        //删除当前选择数据库中的所有key</span><br><span class="line">        System.out.println(&quot;删除当前选择数据库中的所有key：&quot;+jedis.flushDB());</span><br><span class="line">     </span><br><span class="line">        //Spring实例</span><br><span class="line">     </span><br><span class="line">        //设置 redis 字符串数据</span><br><span class="line">        //新增&lt;&#x27;name&#x27;,&#x27;yixin&#x27;&gt;的键值对</span><br><span class="line">        jedis.set(&quot;name&quot;, &quot;yixin&quot;);</span><br><span class="line">        // 获取存储的数据并输出</span><br><span class="line">        System.out.println(&quot;redis 存储的字符串为: &quot;+ jedis.get(&quot;name&quot;));</span><br><span class="line">     </span><br><span class="line">        //判断某个键是否存在</span><br><span class="line">        System.out.println(&quot;判断某个键是否存在：&quot;+jedis.exists(&quot;name&quot;));</span><br><span class="line">     </span><br><span class="line">        //系统中所有的键</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(&quot;*&quot;);</span><br><span class="line">        System.out.println(keys);</span><br><span class="line">     </span><br><span class="line">        //按索引查询</span><br><span class="line">        System.out.println(&quot;按索引查询：&quot;+jedis.select(0));</span><br><span class="line">     </span><br><span class="line">        //查看键name所存储的值的类型</span><br><span class="line">        System.out.println(&quot;查看键name所存储的值的类型：&quot;+jedis.type(&quot;name&quot;));</span><br><span class="line">     </span><br><span class="line">       // 随机返回key空间的一个</span><br><span class="line">        System.out.println(&quot;随机返回key空间的一个：&quot;+jedis.randomKey());</span><br><span class="line">        //重命名key</span><br><span class="line">        System.out.println(&quot;重命名key：&quot;+jedis.rename(&quot;name&quot;,&quot;username&quot;));</span><br><span class="line">        System.out.println(&quot;取出改后的name：&quot;+jedis.get(&quot;username&quot;));</span><br><span class="line">     </span><br><span class="line">        //删除键username</span><br><span class="line">        System.out.println(&quot;删除键username:&quot;+jedis.del(&quot;username&quot;));</span><br><span class="line">     </span><br><span class="line">        //删除当前选择数据库中的所有key</span><br><span class="line">        System.out.println(&quot;删除当前选择数据库中的所有key：&quot;+jedis.flushDB());</span><br><span class="line">        //查看当前数据库中key的数目</span><br><span class="line">        System.out.println(&quot;返回当前数据库中key的数目：&quot;+jedis.dbSize());</span><br><span class="line">     </span><br><span class="line">        //删除数据库中的所有key</span><br><span class="line">        System.out.println(&quot;删除所有数据库中的所有key：&quot;+jedis.flushAll());</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 操作List数据类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.yixin;</span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Redis_List &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //连接本地的 Redis 服务</span><br><span class="line">        Jedis jedis = new Jedis(&quot;服务器地址&quot;, 6379);</span><br><span class="line">        String response = jedis.ping();</span><br><span class="line">        System.out.println(response); // PONG</span><br><span class="line">     </span><br><span class="line">      System.out.println(&quot;删除当前选择数据库中的所有key：&quot;+jedis.flushDB());</span><br><span class="line">     </span><br><span class="line">        //List实例</span><br><span class="line">        //存储数据到列表中</span><br><span class="line">        jedis.lpush(&quot;list&quot;, &quot;num1&quot;);</span><br><span class="line">        jedis.lpush(&quot;list&quot;, &quot;num2&quot;);</span><br><span class="line">        jedis.lpush(&quot;list&quot;, &quot;num3&quot;);</span><br><span class="line">        </span><br><span class="line">        // 获取存储的数据并输出</span><br><span class="line">        List&lt;String&gt; list = jedis.lrange(&quot;list&quot;, 0 ,-1);</span><br><span class="line">        for(int i=0; i&lt;list.size(); i++) &#123;</span><br><span class="line">            System.out.println(&quot;列表项为: &quot;+list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 事务操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.yixin;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">import redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line">public class Redis_Transaction &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //连接本地的 Redis 服务</span><br><span class="line">        Jedis jedis = new Jedis(&quot;服务器地址&quot;, 6379);</span><br><span class="line">        String response = jedis.ping();</span><br><span class="line">        System.out.println(response); // PONG</span><br><span class="line">     </span><br><span class="line">        //事务测试</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        JSONObject jsonObject = new JSONObject();</span><br><span class="line">        jsonObject.put(&quot;hello&quot;,&quot;world&quot;);</span><br><span class="line">        jsonObject.put(&quot;name&quot;,&quot;yixin&quot;);</span><br><span class="line">     </span><br><span class="line">        //开启事务</span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        String result = jsonObject.toJSONString();</span><br><span class="line">        // jedis.watch(result)</span><br><span class="line">        try &#123;</span><br><span class="line">            multi.set(&quot;user1&quot;, result);</span><br><span class="line">            multi.set(&quot;user2&quot;, result);</span><br><span class="line">            int i = 1 / 0; // 代码抛出异常事务，执行失败！</span><br><span class="line">            multi.exec(); // 执行事务！</span><br><span class="line">     </span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            multi.discard();// 放弃事务</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            System.out.println(jedis.get(&quot;user1&quot;));</span><br><span class="line">            System.out.println(jedis.get(&quot;user2&quot;));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、SpringBoot集成Redis"><a href="#四、SpringBoot集成Redis" class="headerlink" title="四、SpringBoot集成Redis"></a>四、SpringBoot集成Redis</h3><p>4.1 介绍<br>这次我们并不使用jedis来进行连接，而是使用lettuce来进行连接，jedis和lettuce的对比如下：</p><p>jedis：采用的直连，多个线程操作的话，是不安全的；想要避免不安全，使用jedis pool连接池。更像BIO模式</p><p>lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全的情况；可以减少线程数量。更像NIO模式</p><p>4.2 集成Redis<br>（1）创建Spring Boot项目</p><p>（2）导入依赖</p><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;    &lt;/dependency&gt;</code></pre><p>（3）编写配置文件</p><p>application.properties:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置redis</span><br><span class="line"></span><br><span class="line"># Redis服务器地址</span><br><span class="line"></span><br><span class="line">spring.redis.host=服务器地址</span><br><span class="line"></span><br><span class="line"># Redis服务器连接端口</span><br><span class="line"></span><br><span class="line">spring.redis.port=6379  </span><br><span class="line"></span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line"></span><br><span class="line">spring.redis.database=0</span><br><span class="line"></span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line"></span><br><span class="line">spring.redis.password=</span><br><span class="line"></span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span><br><span class="line"></span><br><span class="line">spring.redis.lettuce.pool.max-active=8</span><br><span class="line"></span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span><br><span class="line"></span><br><span class="line">spring.redis.lettuce.pool.max-wait=-1</span><br><span class="line"></span><br><span class="line"># 连接池中的最大空闲连接 默认 8</span><br><span class="line"></span><br><span class="line">spring.redis.lettuce.pool.max-idle=8</span><br><span class="line"></span><br><span class="line"># 连接池中的最小空闲连接 默认 0</span><br><span class="line"></span><br><span class="line">spring.redis.lettuce.pool.min-idle=0</span><br></pre></td></tr></table></figure><p>（4）编写测试类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.yixin;</span><br><span class="line"></span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringbootRedisApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line">     </span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(&quot;name&quot;,&quot;yixin&quot;);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(&quot;name&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种连接方式中，redisTemplate操作着不同的数据类型，api和我们的指令是一样的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opsForValue：操作字符串 类似String</span><br><span class="line"></span><br><span class="line">opsForList：操作List 类似List</span><br><span class="line"></span><br><span class="line">opsForSet：操作Set，类似Set</span><br><span class="line"></span><br><span class="line">opsForHash：操作Hash</span><br><span class="line"></span><br><span class="line">opsForZSet：操作ZSet</span><br><span class="line"></span><br><span class="line">opsForGeo：操作Geospatial</span><br><span class="line"></span><br><span class="line">opsForHyperLogLog:操作HyperLogLog</span><br></pre></td></tr></table></figure><p>除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的CRUD。</p><p>4.3  保存对象<br>（1）编写实体类</p><p>注意：要实现序列号Serializable。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.yixin.pojo;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public  User()&#123;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    public User(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）编写RedsTemplate配置</p><p>Tip:在开发当中，我们可以直接把这个模板拿去使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.yixin.config;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RedisConfig &#123;</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  @SuppressWarnings(&quot;all&quot;)</span><br><span class="line">  public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class="line"></span><br><span class="line">      //为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span><br><span class="line">      RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">      template.setConnectionFactory(factory);</span><br><span class="line">     </span><br><span class="line">    // Json序列化配置</span><br><span class="line">      Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">      ObjectMapper om = new ObjectMapper();</span><br><span class="line">      om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">      om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">      jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">     </span><br><span class="line">      // String 的序列化</span><br><span class="line">      StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();</span><br><span class="line">     </span><br><span class="line">      // key采用String的序列化方式</span><br><span class="line">      template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">      // hash的key也采用String的序列化方式</span><br><span class="line">      template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">      // value序列化方式采用jackson</span><br><span class="line">      template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">      // hash的value序列化方式采用jackson</span><br><span class="line">      template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">      template.afterPropertiesSet();</span><br><span class="line">     </span><br><span class="line">      return template;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）存储对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.yixin;</span><br><span class="line"></span><br><span class="line">import com.yixin.pojo.User;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class SpringbootRedisApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        User user=new User(&quot;yixin&quot;,18);</span><br><span class="line">        redisTemplate.opsForValue().set(&quot;user&quot;,user);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(&quot;user&quot;));</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis命令</title>
      <link href="/2021/12/10/redis%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/12/10/redis%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a><strong>Redis命令</strong></h1><p>参考</p><h1 id="Redis命令大全（超详细）"><a href="#Redis命令大全（超详细）" class="headerlink" title="Redis命令大全（超详细）"></a><a href="https://www.cnblogs.com/antLaddie/p/15362191.html">Redis命令大全（超详细）</a></h1><p><a href="https://zhuanlan.zhihu.com/p/47692277">Redis 常用操作命令，非常详细！ - 知乎 (zhihu.com)</a></p><p><a href="https://redis.com.cn/commands.html">redis 命令手册</a></p><p><a href="https://redis.io/commands/">Commands | Redis</a></p><p><strong>文章目录</strong></p><ul><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label0">一：序</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label1">二：Redis基本命令及常识</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label2">三：Key值命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label3">四：String（字符串）类型命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label4">五：Hash（哈希表）类型命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label5">六：List（集合）类型命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label6">七：Set（无序集合）类型命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label7">八：SortedSet（有序集合）类型命令</a><ul><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label7_0">1：添加命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label7_1">2：查询命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label7_2">3：删除命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label7_3">4：其它命令</a></li></ul></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label8">九：GeoSpatial（地理空间）特殊类型命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label9">十：HyperLogLog（超级基数统计）特殊类型命令</a></li><li><a href="https://www.cnblogs.com/antLaddie/p/15362191.html#_label10">十一：BitMap（位图）特殊类型命令</a></li></ul><h2 id="一：序"><a href="#一：序" class="headerlink" title="一：序"></a>一：序</h2><p><strong>注意：我全文使用的Redis版本为 6.2.x 版本，低版本可能有些命令不存在；还有要想学习更全的Redis命令，<a href="https://redis.io/commands">推荐官网学习</a></strong></p><p><strong>其实写本次文章让我最初模棱两可的一些命令印在我的脑海，后期在查命令也是有印象</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本文主要介绍通俗易懂的命令，具体文章会有如下内容（红色字体，其它则会在其它文章指出）</span><br><span class="line">连接命令：连接（connection）</span><br><span class="line">基本key类型：键（key）</span><br><span class="line">基本数据类型：字符串（String）、散列（hash）、列表（list）、集合（set）、有序集合（sorted）</span><br><span class="line">特殊数据类型：位图（bitmaps）、超长日志（hyperloglog）、地理空间（geospatial）</span><br><span class="line">发布订阅命令</span><br><span class="line">事务命令...</span><br></pre></td></tr></table></figure><h2 id="二：Redis基本命令及常识"><a href="#二：Redis基本命令及常识" class="headerlink" title="二：Redis基本命令及常识"></a>二：Redis基本命令及常识</h2><p>在真正学习Redis之前，得先了解一下Redis的一些基本命令，这样才可以更快的知道Redis的命令用法和大概的了解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①：连接服务端：</span><br><span class="line">    ./redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">②：Redis默认是有16个数据库的（0~15）通过select命令来切换数据库</span><br><span class="line">    select 1    -- 连接到第 2 个数据库 0开始计算</span><br><span class="line">③：往数据库设置string类型值</span><br><span class="line">    set name zhangsan</span><br><span class="line">④：查看数据库中key的数量</span><br><span class="line">    dbsize</span><br><span class="line">⑤：查看刚才添加的key的值</span><br><span class="line">    get name</span><br><span class="line">⑥：查看所有key的值</span><br><span class="line">    keys *</span><br><span class="line">⑦：清空全部数据库和清空当前库</span><br><span class="line">    flushall（清空全部库） flushdb（清空当前库）  </span><br><span class="line">⑧：删除添加的name key键</span><br><span class="line">    del name</span><br></pre></td></tr></table></figure><p>三：Key值命令</p><p>key值命令可以说是一些类型的公共命令，比如有设置定时时间，排序，数据迁移等等</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：keys pattern</span><br><span class="line">说明：用来匹配和查看指定的key</span><br><span class="line">    pattern：查询条件</span><br><span class="line">        h?llo       匹配 hello, hallo 和 hxllo</span><br><span class="line">        h*llo       匹配 hllo 和 heeeello</span><br><span class="line">        h[ae]llo    匹配 hello 和 hallo, 不匹配如 hillo</span><br><span class="line">        h[^e]llo    匹配 hallo, hbllo, ... 不匹配如 hello</span><br><span class="line">        h[a-e]llo   匹配 hallo 和 hbllo, [a-e]说明是a~e这个范围 ，如hcllo也可以匹配</span><br><span class="line">        若想匹配如转义字符的如下,就需要使用 \ 转义你想匹配的特殊字符。</span><br><span class="line">        set na\me zhangsan</span><br><span class="line">        keys na[\\]me</span><br><span class="line"></span><br><span class="line">语法：del key [key ...]</span><br><span class="line">说明：删除指定的key</span><br><span class="line">    del name age address</span><br><span class="line"></span><br><span class="line">语法：unlink key [key ...]</span><br><span class="line">说明：其实这个和删除del命令很像，也是存在key删除，不存在则忽略；删除几个键值，则返回删除的个数</span><br><span class="line">    unlink name1 name2 name3</span><br><span class="line">    注：del和unlink区别</span><br><span class="line">        del：它是线程阻塞的，当执行del命令是，del在没执行完时，其它后续的命令是无法进入的（要安全就使用del）</span><br><span class="line">        unlink:它不是线程阻塞的，当执行unlink命令时，它会将要删除的键移交给另外线程，然后将当前要删除的键与数据库空间断开连接</span><br><span class="line">                后续则由其它线程异步删除这些键（要效率快就使用unlink）</span><br><span class="line"></span><br><span class="line">语法：exists key [key ...]</span><br><span class="line">说明：返回要查询的key是否存在，存在则返回1，如果设置四个key都存在则会返回4；返回0则代表没有</span><br><span class="line">    exists name -- 查看是否存在name的key</span><br><span class="line">    exists name name  -- 重复写两次name ，如果name存在则返回2</span><br><span class="line">    exists name address -- 查看当前是否存在name和address键</span><br><span class="line">    注：exists后面不管携带单个，多个或者有重复的，最终是存在一个就累加1</span><br><span class="line"></span><br><span class="line">语法：type key</span><br><span class="line">说明：返回当前指定的key的类型。可返回的类型是: string,list,set,zset,hash和stream</span><br><span class="line"></span><br><span class="line">语法：rename key newkey</span><br><span class="line">说明：修改key名称，存在原来则覆盖，不存在则抛错；如果修改key1为key2，key2存在，则key1覆盖key2的值</span><br><span class="line">    rename name name1</span><br><span class="line">    </span><br><span class="line">语法：renamenx key newkey</span><br><span class="line">说明：修改key名称存在则覆盖，不存在则抛错；如果修改key1为key2，key2存在，则key1修改不成功</span><br><span class="line"></span><br><span class="line">语法：randomkey</span><br><span class="line">说明：随机返回一个key名称</span><br><span class="line"></span><br><span class="line">语法：copy source destination [db destination-db] [replace]</span><br><span class="line">说明：拷贝当前某一个key的值，存放到新的key中（可以跨库拷贝）返回 1 成功 0 失败</span><br><span class="line">    copy name1 name2  -- 把 name1 的值 拷贝到 name2 里</span><br><span class="line">    copy name1 name2 db 5 -- 把 name1 的值拷贝到第6号数据库name2里</span><br><span class="line">    copy name1 name2 replace -- 把 name1 的值拷贝到name2里，存在则强行覆盖</span><br><span class="line"></span><br><span class="line">语法：expire key seconds [nx|xx|gt|lt]</span><br><span class="line">    为一个存在的key设置过期时间 秒</span><br><span class="line">语法：pexpire key milliseconds [nx|xx|gt|lt]</span><br><span class="line">    为一个存在的key设置过期时间 毫秒</span><br><span class="line">语法：expireat key timestamp [nx|xx|gt|lt]</span><br><span class="line">    为一个存在的key设置过期时间 格式是uinx时间戳并精确到秒</span><br><span class="line">语法：pexpireat key milliseconds-timestamp [nx|xx|gt|lt]</span><br><span class="line">    为一个存在的key设置过期时间 格式是uinx时间戳并精确到毫秒</span><br><span class="line">说明：先设置一个key，并指定过期时间 秒/毫秒/时间戳秒/时间戳毫秒 ；返回 1 成功 0 失败</span><br><span class="line">    expire name 300 -- 把name键设置300秒过期</span><br><span class="line">    pexpire name 3000 -- 把name键设置3000毫秒过期（3秒）</span><br><span class="line">    expireat name 1633190400 -- 把name键设置为2021-10-2 00:00:00到期(精确秒)</span><br><span class="line">    pexpireat name 1633190400000 -- 把name键设置为2021-10-2 00:00:00到期(精确毫秒)</span><br><span class="line">    注:使用del可以删除定时的key</span><br><span class="line">       使用set可以覆盖定时的key；</span><br><span class="line">       使用getset可以返回并设置值，并会删除定时</span><br><span class="line">       如使用rename修改key名称，那么key定时器会被携带不会被删除</span><br><span class="line"></span><br><span class="line">语法：persist key</span><br><span class="line">说明：清除当前有定时时间的键值，设置永不过期（和普通键值一样了），关闭后并不会删除已有的键值</span><br><span class="line">    persist name    -- 关闭存在定时的键值</span><br><span class="line"></span><br><span class="line">语法：ttl key</span><br><span class="line">说明：查看当前有定时key的剩余时间，返回秒</span><br><span class="line">    </span><br><span class="line">语法：pttl key</span><br><span class="line">说明：查看当前有定时key的剩余时间，返回毫秒</span><br><span class="line">    ttl name</span><br><span class="line">    pttl name</span><br><span class="line">    注：没过期反剩余时间 过期反-2  没设置过期时间的key反-1</span><br><span class="line"></span><br><span class="line">语法：move key db</span><br><span class="line">说明：把指定的键值移动到选定的数据库db当中。如果key在目标数据库中已存在，或者key在源数据库中不存，则key不会被移动。</span><br><span class="line">    move name 2 -- 把name移动到三号数据库里</span><br><span class="line"></span><br><span class="line">语法：touch key [key ...]</span><br><span class="line">说明：修改指定key的最后访问时间。忽略不存在的 key。（我的理解是这个键被设置/更新成功，并且被放到数据库则是成功，会返回1）</span><br><span class="line">    touch name1 name2 name3     -- 返回被设置成功的键个数</span><br></pre></td></tr></table></figure><p><strong>①：scan cursor [match pattern] [count count] [type type]</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">说明：用于迭代当前数据库中的数据库键</span><br><span class="line">    cursor：游标（告诉迭代器从哪开始迭代）</span><br><span class="line">    [match pattern]：过滤筛选条件</span><br><span class="line">    [count count]：迭代的个数</span><br><span class="line">    [type type]：迭代的类型</span><br></pre></td></tr></table></figure><p><strong>②：migrate host port key|”” destination-db timeout [copy] [replace] [auth password] [auth2 username password] [keys key [key …]]</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">说明：将key原子性的从当前实例库传送到目标实例的指定数据库上，一旦迁移成功，key会在目标实例上，而当前实例上的key会被删除（默认删除）</span><br><span class="line">    host：设置迁移的IP地址</span><br><span class="line">    port：设置迁移的端口号</span><br><span class="line">    key|&quot;&quot;：如果要迁移单个key则可以在这设置key，如果是多个key则在这里只需要设置 &quot;&quot; 在后面设置更多的key</span><br><span class="line">    destination-db：迁移到目标Redis服务器的哪个实例数据库</span><br><span class="line">    timeout：超时时间</span><br><span class="line">    [copy]：设置此属性代表复制迁移，不删除源实例中的key。</span><br><span class="line">    [replace]：强行替换，如果目标数据库存在则更新值，不存在则添加；如果不设置replace则代表对方数据库存在迁移的key则不成功</span><br><span class="line">    [auth password]：请求对方数据库的密码</span><br><span class="line">    [auth2 username password]：请求对方数据库的用户名和密码</span><br><span class="line">    [keys key [key ...]]：如果前面没设置 key为&quot;&quot;，则在后面可以设置多个key迁移，如keys aaa bbb ccc</span><br></pre></td></tr></table></figure><p><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="img"> migrate使用说明</p><p><strong>③：sort key [by pattern] [limit offset count] [get pattern [get pattern …]] [asc|desc] [alpha] [store destination]</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">说明：此命令是用来对list,set或sorted中元素排序；默认是按照数值排序的；并且按照两个元素的双精度浮点数类型值进行比较</span><br><span class="line">    key：排序的key</span><br><span class="line">    [by pattern]：通过引用外部key来排序</span><br><span class="line">    [limit offset count]：分页，limit 2,3 从0开始偏移到第2条数据，并查询3条数据</span><br><span class="line">    [get pattern [get pattern ...]]：获取外部key的值</span><br><span class="line">    [asc|desc]：排序的规则</span><br><span class="line">    [alpha]：当排序的集合中存在字符串则需要使用此属性，按照字典顺序排序；因为默认按照两个元素的双精度浮点数类型值进行比较</span><br><span class="line">    [store destination]：把处理好的结果存放到指定的key容器中</span><br></pre></td></tr></table></figure><h2 id="四：String（字符串）类型命令"><a href="#四：String（字符串）类型命令" class="headerlink" title="四：String（字符串）类型命令"></a>四：String（字符串）类型命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：set key value [ex seconds|px milliseconds|exat timestamp|pxat milliseconds-timestamp|keepttl] [nx|xx] [get]</span><br><span class="line">说明：设置string类型的键值，如果key已经保存了一个值，那么这个操作会直接覆盖原来的值，并且忽略原始类型</span><br><span class="line">    key：存储的key名称</span><br><span class="line">    value：存储的value数据</span><br><span class="line">    [ex seconds|px milliseconds|exat timestamp|pxat milliseconds-timestamp|keepttl]：</span><br><span class="line">        ex seconds：设置键key的过期时间，单位时秒</span><br><span class="line">        px milliseconds：设置键key的过期时间，单位时毫秒</span><br><span class="line">        exat timestamp：设置键过期的指定Unix时间，以秒为单位</span><br><span class="line">        pxat milliseconds-timestamp：设置键过期的指定Unix时间，以毫秒为单位</span><br><span class="line">        keepttl：获取key的过期时间</span><br><span class="line">    [nx|xx]：</span><br><span class="line">        nx：只有键key不存在的时候才会设置key的值</span><br><span class="line">        xx：只有键key存在的时候才会设置key的值</span><br><span class="line">    [get]：返回 key 存储的值，如果 key 不存在返回空</span><br><span class="line">set name zhangsan   -- 设置一个最基本的键值</span><br><span class="line">set name zhangsan ex 60     -- 设置一个键值，并指定过期时间秒，ttl可以查看过期时间</span><br><span class="line">set name zhangsan nx        -- 设置一个键值，但是加上nx 代表只能添加不存在的key，如name，如果存在name键则添加失败</span><br><span class="line">set address anhui xx        -- 设置一个键值，但是加上xx 代表只能更新已经存在的，如果address键不存在则无法更新</span><br><span class="line"></span><br><span class="line">语法：setnx key value</span><br><span class="line">说明：设置键值，存在此键则返回0不覆盖，否则正常设置</span><br><span class="line">    setnx name zhangsan     -- 设置name为键，并赋值</span><br><span class="line"></span><br><span class="line">语法：setrange key offset value</span><br><span class="line">说明：偏移量offset&gt;=0开始， 用value参数覆盖键key储存的字符串值。不存在的键key当作空白字符串处理。</span><br><span class="line">    set name zhangsan   --创建原始键值</span><br><span class="line">    setrange name 5 &#x27; yu xiao&#x27;</span><br><span class="line">        -- 把原有的 zhangsan 从第五位之后更改（0下标）；最终变为 &quot;zhang yu xiao&quot;</span><br><span class="line">    setrange name 14 out</span><br><span class="line">        -- 超出偏移则使用空格 &#x27;\x00&#x27; 代替一个空格；最终变为 &quot;zhang yu xiao\x00out&quot;</span><br><span class="line">    setrange address 2 anhui</span><br><span class="line">        -- 如果设置的键不存在则会新建，但是偏移量会以空格代替；最终变为 &quot;\x00\x00anhui&quot;</span><br><span class="line"></span><br><span class="line">语法：strlen key</span><br><span class="line">说明：获取指定key所储存的字符串值的长度。当key储存的不是字符串类型时，返回错误。</span><br><span class="line"></span><br><span class="line">语法：append key value</span><br><span class="line">说明：用于为指定的key追加值，成功后返回当前键里面的字符串全部长度（如果追加有空格需要使用 &#x27;&#x27;）</span><br><span class="line">    append name &#x27;good good boy&#x27;     -- 追加有空格的，并且成功后返回当前key的全部长度</span><br><span class="line"></span><br><span class="line">语法：get key</span><br><span class="line">说明：如果键key不存在，那么返回特殊值nil；否则返回键key的值。</span><br><span class="line">    get name -- 获取name键的值</span><br><span class="line"></span><br><span class="line">语法：getdel key</span><br><span class="line">说明：先获取到指定的key后，再删除获取的那个key；最终返回被删除的值</span><br><span class="line"></span><br><span class="line">语法：getset key value</span><br><span class="line">说明：设置更新key值，设置前先把原有的值返回出来，并设置新的值，如果key不存在时使用getset则返回nil，并设置新值</span><br><span class="line"></span><br><span class="line">语法：getrange key start end</span><br><span class="line">说明：获取指定的范围值，start（从0开始）end（从0开始）</span><br><span class="line">    set name zhangsan</span><br><span class="line">    getrange name 2 5  -- 获取范围值，最终返回 &#x27;angs&#x27;</span><br><span class="line">    getrange name 3 -2 -- 获取范围值，最终返回 &#x27;ngsa&#x27;</span><br><span class="line">    注：若使用getrange name 0 -1 (其中-1代表从后往前数)</span><br><span class="line"></span><br><span class="line">语法：getex key [ex seconds|px milliseconds|exat timestamp|pxat milliseconds-timestamp|persist]</span><br><span class="line">说明：获取指定的key值，并且获取后可以对当前key设置超时时间或者清除超时时间</span><br><span class="line">    [ex seconds|px milliseconds|exat timestamp|pxat milliseconds-timestamp|persist]：</span><br><span class="line">         ex seconds：设置键key的过期时间，单位时秒</span><br><span class="line">         px milliseconds：设置键key的过期时间，单位时毫秒</span><br><span class="line">         exat timestamp：设置键过期的指定Unix时间，以秒为单位</span><br><span class="line">         pxat milliseconds-timestamp：设置键过期的指定Unix时间，以毫秒为单位</span><br><span class="line">         persist：清除超时时间</span><br><span class="line"></span><br><span class="line">语法：mset key value [key value ...]</span><br><span class="line">说明：和set命令差不多，但是这个是批量设置，如果设置键存在则覆盖，不存在则添加</span><br><span class="line">    mset name zhangsn age 22 address anhui  -- 批量设置name和age和address</span><br><span class="line"></span><br><span class="line">语法：mget key [key ...]</span><br><span class="line">说明：批量获取键的值，如果获取的某个不存在则返回（nil），其它正常返回</span><br><span class="line">    mget name aaa   -- 批量获取name和aaa的值（aaa键不存在则返回nil）</span><br><span class="line"></span><br><span class="line">语法：setex key seconds value</span><br><span class="line">说明：将键key的值设置为value ，并将键key的过期时间设置为seconds秒钟，如果key存在则覆盖原有值</span><br><span class="line">    setex name 60 zhangsan  -- 设置key为name，并且设置60秒过期时间</span><br><span class="line"></span><br><span class="line">语法：psetex key milliseconds value</span><br><span class="line">说明：将键key的值设置为value ，并将键key的过期时间设置为milliseconds毫秒，如果key存在则覆盖原有值</span><br><span class="line">    psetex name 70000 zhangsan  -- 设置key为name，并且设置70秒过期时间</span><br><span class="line"></span><br><span class="line">语法：msetnx key value [key value ...]</span><br><span class="line">说明：当且仅当所有给定键都不存在时，为所有给定键设置值（如果添加的其中键在当前数据库存在则都不成功）</span><br><span class="line">    msetnx是一个原子性(atomic)操作，所有给定键要么就全部都被设置，要么就全部都不设置</span><br><span class="line">    msetnx name zhangsan age 22 -- 设置name和age两个键值</span><br><span class="line"></span><br><span class="line">语法：incr key</span><br><span class="line">说明：将key中储存的数字值增一，并返回增加后的值（只能用在整型，字符串啥的会报错）</span><br><span class="line"></span><br><span class="line">语法：incrby key increment</span><br><span class="line">说明：将key中储存的数字值增加指定步长increment，并返回增加后的值（只能用在整型，字符串啥的会报错）</span><br><span class="line"></span><br><span class="line">语法：incrbyfloat key increment</span><br><span class="line">说明：将key中储存的数字值增加指定步长increment，并返回增加后的值（只能用在浮点型，字符串啥的会报错）</span><br><span class="line">    incrbyfloat salary 333.33   -- 对salary添加步长333.33</span><br><span class="line"></span><br><span class="line">语法：decr key</span><br><span class="line">语法：将key中储存的数字值减一，并返回减后的值（只能用在整型，字符串啥的会报错）</span><br><span class="line"></span><br><span class="line">语法：decrby key decrement</span><br><span class="line">说明：将key中储存的数字值减指定步长increment，并返回减后的值（只能用在整型，字符串啥的会报错）</span><br></pre></td></tr></table></figure><h2 id="五：Hash（哈希表）类型命令"><a href="#五：Hash（哈希表）类型命令" class="headerlink" title="五：Hash（哈希表）类型命令"></a>五：Hash（哈希表）类型命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：hset key field value [field value ...]</span><br><span class="line">说明：用于为存储在key中的哈希表的field字段赋值value</span><br><span class="line">    hset student name zhangsan age 22   -- 设置key为student但里面存储着name和age字段</span><br><span class="line"></span><br><span class="line">语法：hmset key field value [field value ...]</span><br><span class="line">说明：用于同时将多个field-value(字段-值)对设置到哈希表中。此命令会覆盖哈希表中已存在的字段</span><br><span class="line">    注：Redis4.0.0起被废弃，推荐使用hset，它也可以一次性添加多个</span><br><span class="line"></span><br><span class="line">语法：hsetnx key field value</span><br><span class="line">说明：用于为存储在key中的哈希表的field字段赋值value；如果当前field存在则添加失败（不可覆盖添加）</span><br><span class="line"></span><br><span class="line">语法：hget key field</span><br><span class="line">说明：用于返回哈希表中指定字段field的值</span><br><span class="line">    hget student name  -- 获取哈希表里的field字段</span><br><span class="line"></span><br><span class="line">语法：hmget key field [field ...]</span><br><span class="line">说明：用于返回哈希表中指定字段field的值；但是可以一次性返回多个field值</span><br><span class="line">     hmget student name age     --  获取哈希表里的field多个字段</span><br><span class="line"></span><br><span class="line">语法：hdel key field [field ...]</span><br><span class="line">说明：用于删除哈希表key中的一个或多个指定字段，不存在的字段将被忽略。如果key不存在，会被当作空哈希表处理并返回0</span><br><span class="line">     hdel student name  -- 删除哈希表中key为student里的name字段</span><br><span class="line"></span><br><span class="line">语法：hexists key field</span><br><span class="line">说明：用于查看哈希表的指定字段field是否存在，1存在，0不存在</span><br><span class="line">    hexists student name    -- 查看哈希表中key为student里的name字段是否存在</span><br><span class="line"></span><br><span class="line">语法：hgetall key</span><br><span class="line">说明：用于返回存储在key中的哈希表中所有的field和value。</span><br><span class="line"></span><br><span class="line">语法：hkeys key</span><br><span class="line">说明：返回存储在key中哈希表的所有field</span><br><span class="line"></span><br><span class="line">语法：hvals key</span><br><span class="line">说明：返回存储在key中哈希表的所有value</span><br><span class="line"></span><br><span class="line">语法：hincrby key field increment</span><br><span class="line">说明：为哈希表key中的field的值加上指定的增量，并返回增量后的值（增量正数累加，增量负数递减）</span><br><span class="line">    hincrby student age 2       -- 对年龄累加</span><br><span class="line">    hincrby student age -28     -- 对年龄递减</span><br><span class="line">    注：当前命令只可操作整数类型，而字符串，浮点类型啥的会报错</span><br><span class="line"></span><br><span class="line">语法：hincrbyfloat key field increment</span><br><span class="line">说明：为哈希表key中的field的值加上指定的增量，并返回增量后的值（增量正数累加，增量负数递减）</span><br><span class="line">    hincrby student salary 300.3       -- 对工资累加</span><br><span class="line">    hincrby student salary -432.84     -- 对工资递减</span><br><span class="line">    注：当前命令只可操作整数类型、浮点类型，而操作字符串会报错</span><br><span class="line"></span><br><span class="line">语法：hstrlen key field</span><br><span class="line">说明：返回存储在key中给定field相关联的值的字符串长度（string length）</span><br><span class="line"></span><br><span class="line">语法：hlen key</span><br><span class="line">说明：用于获取哈希表中字段(fields)的数量</span><br><span class="line"></span><br><span class="line">语法：hrandfield key [count [withvalues]]</span><br><span class="line">说明：随机返回key里的field字段</span><br><span class="line">    count：返回的field个数，如果是正数且超过key里的field总数则全部返回，</span><br><span class="line">                          如果是负数且超过key里的field总数绝对值则返回空，</span><br><span class="line">        整数则返回不重复字段，负数则可能返回重复字段</span><br><span class="line">        注：在传 1 或 -1 它是随机在key里面选择，</span><br><span class="line">        在传 2 则随机返回key里的2个field字段，这两个field不可能存在重复</span><br><span class="line">        在传-2 则随机返回key里的2个field字段，这两个field可能会存在重复</span><br><span class="line">    withvalues：返回field字段时后面还返回当前field的值</span><br><span class="line"></span><br><span class="line">    hset student name zhangsan age 22 address anhui salary 3000.30  -- 初始化</span><br><span class="line">    127.0.0.1:6379&gt; hrandfield student -2</span><br><span class="line">    1) &quot;salary&quot;</span><br><span class="line">    2) &quot;salary&quot;</span><br><span class="line">    127.0.0.1:6379&gt; hrandfield student 2</span><br><span class="line">    1) &quot;name&quot;</span><br><span class="line">    2) &quot;age&quot;</span><br><span class="line">    127.0.0.1:6379&gt; hrandfield student 2 withvalues</span><br><span class="line">    1) &quot;salary&quot;</span><br><span class="line">    2) &quot;3000.30&quot;</span><br><span class="line">    3) &quot;name&quot;</span><br><span class="line">    4) &quot;zhangsan&quot;</span><br><span class="line"></span><br><span class="line">语法：hscan key cursor [match pattern] [count count]</span><br><span class="line">说明：用于遍历哈希表中的键值对</span><br><span class="line">    cursor：游标（告诉迭代器从哪开始迭代）</span><br><span class="line">    [match pattern]：过滤筛选条件</span><br><span class="line">    [count count]：迭代的个数</span><br><span class="line">    hscan student 0 match * count 2</span><br><span class="line">        -- 迭代student里的field字段，下标0开始，过滤条件*全部，但是每次迭代count为2，但2不起作用（没研究）</span><br><span class="line">        -- 具体可以查看我些的scan命令，全文搜索</span><br></pre></td></tr></table></figure><h2 id="六：List（集合）类型命令"><a href="#六：List（集合）类型命令" class="headerlink" title="六：List（集合）类型命令"></a>六：List（集合）类型命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：lpush key element [element ...]</span><br><span class="line">说明：将一个或多个值插入到集合key的头部（头插法），如果当前key不存在则创建新的</span><br><span class="line">     lpush listNumber 8.4 13 14 10.5 4 19.6 10 14 5.2 10 3 2.5 7 4.7 10 11.2 8 2.2 15.7 20.9</span><br><span class="line">     lpush listString  remini Momen Pledg Memo Tende Biode Revie silen Romanti AusL Simpl 　　　　　　Promis Romanti Bautifu smil Initiall sunse lemo firs Chaffere</span><br><span class="line">        -- 插入两个案例，后面以这个说明</span><br><span class="line"></span><br><span class="line">语法：lpushx key element [element ...]</span><br><span class="line">说明：往集合左边插入一个元素；若集合key不存在无法插入</span><br><span class="line"></span><br><span class="line">语法：rpush key element [element ...]</span><br><span class="line">说明：将一个或多个值插入到集合key的尾部（尾插法），如果当前key不存在则创建新的</span><br><span class="line"></span><br><span class="line">语法：rpushx key element [element ...]</span><br><span class="line">说明：往集合右边插入一个元素；若集合key不存在无法插入</span><br><span class="line"></span><br><span class="line">语法：lpop key [count]</span><br><span class="line">说明：从集合左边（头部）弹出（删除）指定的count个元素删除</span><br><span class="line">    lpop listString 2   -- 从集合左边弹出两个元素删除</span><br><span class="line"></span><br><span class="line">语法：rpop key [count]</span><br><span class="line">说明：从集合右边（尾部部）弹出（删除）指定的count个元素删除</span><br><span class="line"></span><br><span class="line">语法：blpop key [key ...] timeout</span><br><span class="line">说明：移出并获取集合头部第一个元素，如果集合没有元素会阻塞集合直到等待超时或发现可弹出元素为止，它是lpop的阻塞版</span><br><span class="line">    key：如果当前key不存在或者key内部没元素，则一直阻塞等待，等待其它客户端创建此key和元素，会立马弹出</span><br><span class="line">        但是超出延迟时间的话还没有弹出元素则会在最后弹出(nil)</span><br><span class="line">    [key ...]：设置多个key时，如果第一个key不存在则会考虑弹出第二个key,第三个key....，如果每个key都不存在或没元素</span><br><span class="line">        则当前客户端会进入一个阻塞状态，直到有元素弹出，或者自动超时弹出(nil)</span><br><span class="line">    127.0.0.1:6379&gt; blpop listA mylist 480</span><br><span class="line">    1) &quot;mylist&quot;</span><br><span class="line">    2) &quot;remini&quot;</span><br><span class="line">        -- 设置两个key，其中listString为空，会自动去找mylist集合，发现存在元素，并立刻弹出</span><br><span class="line"></span><br><span class="line">语法：brpop key [key ...] timeout</span><br><span class="line">说明：移出并获取集合尾部第一个元素，如果集合没有元素会阻塞集合直到等待超时或发现可弹出元素为止，它是lpop的阻塞版</span><br><span class="line"></span><br><span class="line">语法：llen key</span><br><span class="line">说明：获取到集合里元素的总个数</span><br><span class="line"></span><br><span class="line">语法：lrange key start stop</span><br><span class="line">说明：查询集合元素，并设置查询区间</span><br><span class="line">    start：起始值，设置正数则从左往右，设置负数则从右往左开始</span><br><span class="line">    stop：终点值，设置正数则从左往右，设置负数则从右往左开始</span><br><span class="line">    注：start（0） stop（-1）代表查询全部</span><br><span class="line">    lrange listString -5 -3</span><br><span class="line">        -- 起点从尾部往前数5个，终点从尾部往前数3个；最终显示 -5，-4，-3这三个元素</span><br><span class="line">    lrange listString -5 -8</span><br><span class="line">        -- 起点从尾部往前数5个，终点从尾部往前数8个；最终显示(empty array)</span><br><span class="line"></span><br><span class="line">语法：lindex key index</span><br><span class="line">说明：返回集合key里索引index位置存储的元素，0~n从左往右索引、-1~-n从右往左索引</span><br><span class="line">    lindex listString -1    --  获取集合listString里的最后一个索引的元素</span><br><span class="line"></span><br><span class="line">语法：lrem key count element</span><br><span class="line">说明：从集合key中删除前count个值等于element的元素</span><br><span class="line">    count &gt; 0: 从头到尾删除值为 value 的元素</span><br><span class="line">    count &lt; 0: 从尾到头删除值为 value 的元素</span><br><span class="line">    count = 0: 移除所有值为 value 的元素</span><br><span class="line">    lrem listString -2 Romanti</span><br><span class="line">        -- 移除集合listString中的Romanti元素，删除个数-2（代表从尾部查找并删除两个），并返回删除成功个数</span><br><span class="line"></span><br><span class="line">语法：lset key index element</span><br><span class="line">说明：设置集合key中index位置的元素值为新的element，index为正数则从头到位索引，为负数从尾到头索引查询</span><br><span class="line">     lset listString 2 yyds  -- 修改集合listString中索引为2的元素为yyds</span><br><span class="line"></span><br><span class="line">语法：linsert key before|after pivot element</span><br><span class="line">说明：把element元素插入到指定集合key里，但是还要以pivot内部的一个元素为基准，看是插到这个元素的左边还是右边</span><br><span class="line">    before|after：插入元素的前后位置选项</span><br><span class="line">    pivot：集合里的参考元素</span><br><span class="line">    element：待插入的元素</span><br><span class="line">    注：当集合key不存在时，这个list会被看作是空list，什么都不执行</span><br><span class="line">    注：当集合key存在，值不是列表类型时，返回错误</span><br><span class="line">    注：当给定的参考元素pivot不存在是则返回-1，因为程序不知道往哪插入</span><br><span class="line">    linsert listString after Romanti niubi -- 把niubi插入到listString集合里，插入参考Romanti元素的后面</span><br><span class="line"></span><br><span class="line">语法：lpos key element [rank rank] [count num-matches] [maxlen len]</span><br><span class="line">说明：返回集合key中匹配给定element成员的索引</span><br><span class="line">    key：要查询的集合key</span><br><span class="line">    element：要查询索引的元素</span><br><span class="line">    [rank rank]：选择匹配上的第几个元素，若超出集合指定元素的个数则返回(nil)</span><br><span class="line">    [count num-matches]：返回匹配上元素的索引个数，默认返回1个</span><br><span class="line">    [maxlen len]：告知lpos命令查询集合的前len个元素，限制查询个数</span><br><span class="line">    lpos listString Romanti     -- 查询集合listString里的Romanti出现的索引位置（0开始索引）</span><br><span class="line">    lpos listString Romanti rank 2  -- 查询Romanti元素的第二个索引位置</span><br><span class="line">    lpos listString Romanti rank 1 count 3  -- 查询Romanti索引的三条记录</span><br><span class="line">    lpos listString Romanti rank 1 count 3 maxlen 20    -- 限制查询下标为0~20</span><br><span class="line">    1) (integer) 7</span><br><span class="line">    2) (integer) 11</span><br><span class="line"></span><br><span class="line">语法：lmove source destination left|right left|right</span><br><span class="line">说明：用于原子地从source集合左边或者右边弹出一个元素，添加到destination新集合里的左边或右边</span><br><span class="line">    source：源集合</span><br><span class="line">    destination：目标集合</span><br><span class="line">    left|right left|right：</span><br><span class="line">        第一个：代表从源集合的左边或者右边弹出元素</span><br><span class="line">        第二个：代表从目标集合的左边或者右边添加</span><br><span class="line">    lmove listString mylist left right</span><br><span class="line">        -- 从listString源集合的左边弹出个元素，添加到mylist目标集合的右边</span><br><span class="line"></span><br><span class="line">语法：rpoplpush source destination</span><br><span class="line">说明：原子地从集合source中移除并返回最后一个元素，然后把这个元素插入集合destination的第一个元素</span><br><span class="line">    source：源集合</span><br><span class="line">    destination：目标集合</span><br><span class="line">    注：此方法在Redis6.2.0被废除（使用lmove代替）</span><br><span class="line"></span><br><span class="line">语法：blmove source destination left|right left|right timeout</span><br><span class="line">说明：用于原子地从source集合左边或者右边弹出一个元素，添加到destination新集合里的左边或右边，但是它时lmove的阻塞版本</span><br><span class="line">    blmove listString mylist left right 60  -- 从集合listString左边弹出一个元素放到目标集合mylist的尾部</span><br><span class="line">         但是存在60秒的超时时间，超过60秒没有弹出元素则自动失败，返回(nil)</span><br><span class="line"></span><br><span class="line">语法：brpoplpush source destination timeout</span><br><span class="line">说明：原子地从集合source中移除并返回最后一个元素，然后把这个元素插入集合destination的第一个元素（已废弃使用blmove代替）</span><br><span class="line">    brpoplpush listString mylist 50 -- 从集合listString尾部弹出一个元素添加到目标mylist集合的头部，超时时间50秒</span><br><span class="line"></span><br><span class="line">语法：ltrim key start stop</span><br><span class="line">说明：修订一个已经存在的集合；修订一个指定范围的元素放到当前集合中</span><br><span class="line">    127.0.0.1:6379&gt; ltrim listString -10 -5</span><br><span class="line">    OK</span><br><span class="line">    127.0.0.1:6379&gt; lrange listString 0 -1</span><br><span class="line">    1) &quot;Simpl&quot;</span><br><span class="line">    2) &quot;AusL&quot;</span><br><span class="line">    3) &quot;silen&quot;</span><br><span class="line">    4) &quot;Revie&quot;</span><br><span class="line">    5) &quot;Biode&quot;</span><br><span class="line">    6) &quot;Tende&quot;</span><br><span class="line"></span><br><span class="line">补充Redis7.0.0即将提供</span><br><span class="line">语法：lmpop numkeys [key [key ...]] left|right [count count]</span><br><span class="line">语法：blmpop timeout numkeys [key [key ...]] left|right [count count]</span><br></pre></td></tr></table></figure><h2 id="七：Set（无序集合）类型命令"><a href="#七：Set（无序集合）类型命令" class="headerlink" title="七：Set（无序集合）类型命令"></a>七：Set（无序集合）类型命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：sadd key member [member ...]</span><br><span class="line">说明：将一个或多个元素加入到集合中，添加已存在的集合元素将被忽略（不会添加上），返回添加成功的元素个数</span><br><span class="line">    127.0.0.1:6379&gt; sadd mysetA zhangsan lisi wangwu mazi zhangsan</span><br><span class="line">    (integer) 4</span><br><span class="line">        -- 成功添加四个元素，其中一个为重复的，无法添加</span><br><span class="line"></span><br><span class="line">语法：srem key member [member ...]</span><br><span class="line">说明：删除指定的元素；如果指定的元素不是集合成员则被忽略，返回被删除元素个数，不含不存在的元素</span><br><span class="line"></span><br><span class="line">语法：spop key [count]</span><br><span class="line">说明：从集合key中删除一个或多个随机元素，并返回删除的元素</span><br><span class="line"></span><br><span class="line">语法：srandmember key [count]</span><br><span class="line">说明：随机返回集合key中的一个或多个随机元素，若返回个数的count大于集合总数则返回全部</span><br><span class="line">    注：srandmember随机返回不删除原集合，spop返回并删除原集合返回的元素</span><br><span class="line"></span><br><span class="line">语法：sdiff key [key ...]</span><br><span class="line">说明：返回第一个集合与其它集合之间的差异；说白就是第一个集合的某个元素在其它集合都不存在则这个元素会被返回，</span><br><span class="line">    key1 = &#123;a,b,c,d&#125;</span><br><span class="line">    key2 = &#123;c&#125;</span><br><span class="line">    key3 = &#123;a,c,e&#125;</span><br><span class="line">    SDIFF key1 key2 key3  = &#123;b,d&#125;</span><br><span class="line">    注：如果只携带一个key比较则会返回当前集合全部元素</span><br><span class="line">    举例：</span><br><span class="line">        127.0.0.1:6379&gt; sadd mysetA zhangsan lisi wangwu mazi zhangsan</span><br><span class="line">        (integer) 4</span><br><span class="line">        127.0.0.1:6379&gt; sadd mysetB anhui shanghai zhangsan mazi</span><br><span class="line">        (integer) 4</span><br><span class="line">        127.0.0.1:6379&gt; sdiff mysetA mysetB</span><br><span class="line">        1) &quot;wangwu&quot;</span><br><span class="line">        2) &quot;lisi&quot;</span><br><span class="line"></span><br><span class="line">语法：sdiffstore destination key [key ...]</span><br><span class="line">说明：此命令和sdiff功能差不多，不同的是它将结果保存到destination集合，并返回成功添加到新集合上的个数。</span><br><span class="line">    127.0.0.1:6379&gt; sdiffstore newmyset mysetA mysetB</span><br><span class="line">    (integer) 2</span><br><span class="line"></span><br><span class="line">语法：sinter key [key ...]</span><br><span class="line">说明：返回第一个集合与其它集合之间的交集；说白就是第一个集合的某个元素在其它集合都存在则这个元素会被返回，</span><br><span class="line">    key1 = &#123;a,b,c,d&#125;</span><br><span class="line">    key2 = &#123;c&#125;</span><br><span class="line">    key3 = &#123;a,c,e&#125;</span><br><span class="line">    SINTER key1 key2 key3 = &#123;c&#125;</span><br><span class="line">    注：如果只携带一个key比较则会返回当前集合全部元素</span><br><span class="line">    举例：</span><br><span class="line">        127.0.0.1:6379&gt; sadd mysetA zhangsan lisi wangwu mazi zhangsan</span><br><span class="line">        (integer) 4</span><br><span class="line">        127.0.0.1:6379&gt; sadd mysetB anhui shanghai zhangsan mazi</span><br><span class="line">        (integer) 4</span><br><span class="line">        127.0.0.1:6379&gt; sinter mysetA mysetB</span><br><span class="line">        1) &quot;zhangsan&quot;</span><br><span class="line">        2) &quot;mazi&quot;</span><br><span class="line"></span><br><span class="line">语法：sinterstore destination key [key ...]</span><br><span class="line">说明：此命令和sinter功能差不多，不同的是它将结果保存到destination集合，并返回成功添加到新集合上的个数。</span><br><span class="line">    127.0.0.1:6379&gt; sinterstore newmyset mysetA mysetB</span><br><span class="line">    (integer) 2</span><br><span class="line"></span><br><span class="line">语法：sunion key [key ...]</span><br><span class="line">说明：用于返回所有给定集合的并集</span><br><span class="line">    key1 = &#123;a,b,c,d&#125;</span><br><span class="line">    key2 = &#123;c&#125;</span><br><span class="line">    key3 = &#123;a,c,e&#125;</span><br><span class="line">    sunion key1 key2 key3 = &#123;a,b,c,d,e&#125;</span><br><span class="line">    注：如果只携带一个key比较则会返回当前集合全部元素</span><br><span class="line">    举例：</span><br><span class="line">        127.0.0.1:6379&gt; sadd mysetA zhangsan lisi wangwu mazi zhangsan</span><br><span class="line">        (integer) 4</span><br><span class="line">        127.0.0.1:6379&gt; sadd mysetB anhui shanghai zhangsan mazi</span><br><span class="line">        (integer) 4</span><br><span class="line">        127.0.0.1:6379&gt; sunion mysetA mysetB</span><br><span class="line">        1) &quot;mazi&quot;</span><br><span class="line">        2) &quot;zhangsan&quot;</span><br><span class="line">        3) &quot;lisi&quot;</span><br><span class="line">        4) &quot;anhui&quot;</span><br><span class="line">        5) &quot;wangwu&quot;</span><br><span class="line">        6) &quot;shanghai&quot;</span><br><span class="line"></span><br><span class="line">语法：sunionstore destination key [key ...]</span><br><span class="line">说明：类似于sunion，不同的是不返回结果集，而是把返回存储在destination集合中。</span><br><span class="line">    127.0.0.1:6379&gt; sunionstore newset mysetA mysetB</span><br><span class="line">    (integer) 6</span><br><span class="line"></span><br><span class="line">语法：scard key</span><br><span class="line">说明：返回集合中元素的数量（整型值）</span><br><span class="line"></span><br><span class="line">语法：smembers key</span><br><span class="line">说明：返回存储在key中的集合的所有的成员，此命令可以使用携带单个key的sdiff、sinter、sunion命令替代</span><br><span class="line"></span><br><span class="line">语法：sismember key member</span><br><span class="line">说明：判断元素member是否是集合key的成员，是返回1，否则0</span><br><span class="line">    127.0.0.1:6379&gt; sismember mysetA zhangsan</span><br><span class="line">    (integer) 1</span><br><span class="line"></span><br><span class="line">语法：smismember key member [member ...]</span><br><span class="line">说明：批量判断元素members是否是集合key的成员，是返回1，否则0</span><br><span class="line">    127.0.0.1:6379&gt; smismember mysetA zhangsan lisi</span><br><span class="line">    1) (integer) 1</span><br><span class="line">    2) (integer) 1</span><br><span class="line"></span><br><span class="line">语法：smove source destination member</span><br><span class="line">说明：从集合source中移动成员member到集合destination；</span><br><span class="line">    注：返回1代表成功，返回0代表移动element元素在source不存在</span><br><span class="line">    注：移动成功后会把element元素在原集合上删除</span><br><span class="line">    注：若被移动的元素在两个集合都存在，则会覆盖移动，再删除原集合上的元素</span><br><span class="line">    smove mysetA mysetB  zhangsan   -- 把元素zhangsan从集合mysetA移动到mysetB上</span><br><span class="line"></span><br><span class="line">语法：sscan key cursor [match pattern] [count count]</span><br><span class="line">说明：用于遍历集合中键的元素，sscan继承自scan，具体可以参考scan，上面第三章有说明</span><br><span class="line">    key：迭代指定元素</span><br><span class="line">    cursor：游标（告诉迭代器从哪开始迭代）</span><br><span class="line">    [match pattern]：过滤筛选条件</span><br><span class="line">    [count count]：迭代的个数</span><br><span class="line">    举例：每次迭代两个</span><br><span class="line">        127.0.0.1:6379&gt; sscan mysetA 0 match * count 2</span><br><span class="line">        1) &quot;1&quot;</span><br><span class="line">        2) 1) &quot;zhangsan&quot;</span><br><span class="line">           2) &quot;lisi&quot;</span><br><span class="line">        127.0.0.1:6379&gt; sscan mysetA 1 match * count 2</span><br><span class="line">        1) &quot;0&quot;</span><br><span class="line">        2) 1) &quot;wangwu&quot;</span><br><span class="line">           2) &quot;mazi&quot;</span><br><span class="line"></span><br><span class="line">补充Redis7.0.0即将提供</span><br><span class="line">语法：sintercard key [key ...]</span><br></pre></td></tr></table></figure><h2 id="八：SortedSet（有序集合）类型命令"><a href="#八：SortedSet（有序集合）类型命令" class="headerlink" title="八：SortedSet（有序集合）类型命令"></a>八：SortedSet（有序集合）类型命令</h2><p>对于这个有序集合而言，比其它类型复杂一些，我以添加命令、查询命令、删除命令、其它命令等来介绍</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面几节案例的测试数据</span><br><span class="line">zadd myzsetA -5 &amp;&amp; -2 ## 0 @@ 1 aa 5 bb 10 cc 15 dd 20 ee 25 ff 30 gg 35 hh 40 ii 45 jj 50 kk</span><br><span class="line">zadd chinas -10 Anhui 45 Shanghai 24 Beijing 33 Henan 87 Guangdong</span><br><span class="line">zadd zsetA 20 zhangsan 25 lisi 33 wanger 15 mazi 33 babao 23 xiechao</span><br><span class="line">zadd zsetB 5 zhangsan 10 lisi 15 mazi 20 babao</span><br><span class="line">zadd zsetC 10 aa 10 bb 10 cc 10 dd 10 ee 10 ff 10 gg 10 hh</span><br></pre></td></tr></table></figure><h3 id="1：添加命令"><a href="#1：添加命令" class="headerlink" title="1：添加命令"></a>1：添加命令</h3><p><strong>①：zadd key [nx|xx] [gt|lt] [ch] [incr] score member [score member …]</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：zadd key [nx|xx] [gt|lt] [ch] [incr] score member [score member ...]</span><br><span class="line">说明：用于将一个或多个member元素及其score值加入到有序集key当中，若添加的member已存在则更新当前分数</span><br><span class="line">    [nx|xx]:</span><br><span class="line">        nx：只能做添加操作</span><br><span class="line">        xx：只能做更新操作</span><br><span class="line">    [gt|lt]:</span><br><span class="line">        gt：更新的元素分数必须比原分数大</span><br><span class="line">        lt：更新的元素分数必须比原分数小</span><br><span class="line">    [ch]：返回添加和更新成功的个数</span><br><span class="line">    [incr]：累加操作，score代表更新member的步长</span><br><span class="line">    注：gt,lt 和 nx 三者互斥不能同时使用</span><br><span class="line">    注：分数的取值范围-9007199254740992到9007199254740992</span><br></pre></td></tr></table></figure><h3 id="2：查询命令"><a href="#2：查询命令" class="headerlink" title="2：查询命令"></a>2：查询命令</h3><p><strong>①：zrange key min max [byscore|bylex] [rev] [limit offset count] [withscores]</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：zrange key min max [byscore|bylex] [rev] [limit offset count] [withscores]</span><br><span class="line">说明：返回有序集中，指定区间内的成员，其中成员查询可以按照下标，分数，元素来获取指定范围</span><br><span class="line">    key：要查询的有序集合</span><br><span class="line">    min：查询范围的最小值，按照不同的方式写不同的最小值</span><br><span class="line">        下标查询写下标值（默认）,分数查询写分数值（设置byscore），元素查询写元素值（设置bylex）</span><br><span class="line">    max：查询范围的最大值，按照不同的方式写不同的最大值</span><br><span class="line">        下标查询写下标值（默认）,分数查询写分数值（设置byscore），元素查询写元素值（设置bylex）</span><br><span class="line">    [byscore|bylex]：</span><br><span class="line">        byscore：按照分数排序，此时查询时只会按照分数的范围查询，切记不能写字符啥的</span><br><span class="line">            -inf +inf byscore 代表查询分数在负无穷 ~ 正无穷</span><br><span class="line">            -20 20    byscore 代表查询分数在 -20 ~ 20之间的元素(包含-20和20)</span><br><span class="line">            10 (20    byscore 代表查询分数在 10 ~ 20之间的元素(包含10，不包含20)</span><br><span class="line">        bylex：按照元素属性ASCLL来排序，此时查询时只会按照元素范围查询</span><br><span class="line">            - + bylex       代表查询元素范围为全部</span><br><span class="line">            - [cc bylex     代表从开头查询到元素 cc 位置（包含cc）</span><br><span class="line">            [aa [dd bylex   代表查询元素为aa ~ dd之间的范围（包含aa和dd）</span><br><span class="line">            (cc [ff bylex   代表查询元素为cc ~ ff之间的范围（包含ff，不包含cc）</span><br><span class="line">            (aa (ee bylex   代表查询元素为aa ~ ee之间的范围（不包含aa和ee）</span><br><span class="line">    [rev]：设置倒序排列，这时候我们就得注意写最大值和最小值要反过来写</span><br><span class="line">    [limit offset count]：筛选后的结果排序</span><br><span class="line">        offset：起始位（0下标开始数）</span><br><span class="line">        count：查询元素个数</span><br><span class="line">    [withscores]：最终查询结果显示分数，但是只适用于byscore查询和默认下标查询</span><br><span class="line">    注：下标查询时是默认的，不用写[byscore|bylex]，下面写-1，代表右边第一个，所有0 -1代表查询全部</span><br><span class="line">    注：若某个有序集合使用元素查询时（bylex），那么我推荐你最好使用分数都是相同的有序集合！</span><br><span class="line">        因为分数会打乱原有我们添加的顺序，下面举个普通例子：</span><br><span class="line">          执行命令=&gt;：zadd newKey 6 aa 3 bb 4 cc</span><br><span class="line">          有序集合存储元素变为=&gt;：3 bb 4 cc 6 aa</span><br><span class="line">          它会按照分数排序了，这样按照元素获取范围就不准了，如获取[aa [bb bylex</span><br><span class="line">          127.0.0.1:6379&gt; zrange newKey 0 -1</span><br><span class="line">          1) &quot;bb&quot;</span><br><span class="line">          2) &quot;cc&quot;</span><br><span class="line">          3) &quot;aa&quot;</span><br><span class="line">          127.0.0.1:6379&gt; zrange newKey [aa [cc bylex</span><br><span class="line">          1) &quot;bb&quot;</span><br><span class="line">          2) &quot;cc&quot;</span><br><span class="line">          3) &quot;aa&quot;</span><br><span class="line">          127.0.0.1:6379&gt; zrange newKey [aa [bb bylex</span><br><span class="line">          1) &quot;bb&quot;</span><br><span class="line">          此时会发现有点不对劲，[aa [bb bylex 为什么没有aa呢？因为分数打乱了顺序</span><br><span class="line">          其实用到元素查询那么有序集合里面的每个元素分数都是相同的，添加相同分数，元素会强行按照字典ASCII进行排序</span><br><span class="line">          执行命令=&gt;：zadd newKey1 0 bb 0 aa 0 cc</span><br><span class="line">          执行时插入时遇到分数相同的则会对元素的ASCII排序</span><br><span class="line">          127.0.0.1:6379&gt; zrange newKey1 0 -1</span><br><span class="line">          1) &quot;aa&quot;</span><br><span class="line">          2) &quot;bb&quot;</span><br><span class="line">          3) &quot;cc&quot;</span><br><span class="line">          127.0.0.1:6379&gt; zrange newKey1 [aa [bb bylex</span><br><span class="line">          1) &quot;aa&quot;</span><br><span class="line">          2) &quot;bb&quot;</span><br><span class="line">          127.0.0.1:6379&gt;</span><br><span class="line">        再说了，使用bylex元素查询我们也不能指定withscores</span><br><span class="line">    zrange演变命令</span><br><span class="line">        zrangebyscore、zrangebylex、zrangestore</span><br><span class="line">        zrevrange、zrevrangebyscore、zrevrangebylex</span><br></pre></td></tr></table></figure><p><strong>②：zinter numkeys key [key …] [weights weight [weight …]] [aggregate sum|min|max] [withscores]</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：zinter numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max] [withscores]</span><br><span class="line">说明：计算numkeys个有序集合的交集（就是把几个相同元素的分数进行处理）</span><br><span class="line">    numkeys：计算交集的key个数</span><br><span class="line">    key | [key ...]：设置要处理交集的有序集合，按照我们给出的numkeys写指定个数的key</span><br><span class="line">    [weights weight [weight ...]]：权重计算（乘法因子）；要设置权重的话，则有几个key就得写几个权重值</span><br><span class="line">        若key1 key2 weights 10 15 说明：第一个key里面的全部分数要乘于10，第二个key的全部分数乘于15</span><br><span class="line">        注：此属性在交集、并集计算中都存在，只要是符合[交集|并集]的才会计算并返回给客户端</span><br><span class="line">    [aggregate sum|min|max]：你可以指定交集、并集的结果集的聚合方式</span><br><span class="line">        注：指定sum（默认）则交集的元素的分数结合，若指定max，则会选择最大的作为交集的分数</span><br><span class="line">    [withscores]：显示分数</span><br></pre></td></tr></table></figure><p><strong>③：zunion numkeys key [key …] [weights weight [weight …]] [aggregate sum|min|max] [withscores]</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：zunion numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max] [withscores]</span><br><span class="line">说明：计算给定的numkeys个有序集合的并集，并且返回结果</span><br><span class="line">     numkeys：计算交集的key个数</span><br><span class="line">     key | [key ...]：设置要处理交集的有序集合，按照我们给出的numkeys写指定个数的key</span><br><span class="line">     [weights weight [weight ...]]：权重计算（乘法因子）；要设置权重的话，则有几个key就得写几个权重值</span><br><span class="line">         若key1 key2 weights 10 15 说明：第一个key里面的全部分数要乘于10，第二个key的全部分数乘于15</span><br><span class="line">         注：此属性在交集、并集计算中都存在，只要是符合[交集|并集]的才会计算并返回给客户端</span><br><span class="line">     [aggregate sum|min|max]：你可以指定交集、并集的结果集的聚合方式</span><br><span class="line">         注：指定sum（默认）则交集的元素的分数结合，若指定max，则会选择最大的作为交集的分数</span><br><span class="line">     [withscores]：显示分数</span><br><span class="line">     注：并集就是把几个集合的元素并到一起（不漏任何元素），然后单个元素单独计算，多个元素计算后合并到一起</span><br></pre></td></tr></table></figure><p><strong>④：查询基本命令</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：zinterstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]</span><br><span class="line">说明：计算numkeys个有序集合的交集，并且把结果放到destination中；具体操作看zinter，</span><br><span class="line">    destination：新集合名称，用来存放处理好交集的数据</span><br><span class="line"></span><br><span class="line">语法：zintercard numkeys key [key ...]</span><br><span class="line">说明：Redis7.0发布</span><br><span class="line"></span><br><span class="line">语法：zunionstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]</span><br><span class="line">说明：计算给定的numkeys个有序集合的并集，并且把结果放到destination中。（具体参考zunion）</span><br><span class="line">    destination：计算后的结果返回到指定的有序集合里</span><br><span class="line"></span><br><span class="line">语法：zrangebyscore key min max [withscores] [limit offset count]</span><br><span class="line">说明：（演变）返回有序集中，按照分数来指定区间内的成员，具体参考zrange</span><br><span class="line">    zrangebyscore myzsetA -inf +inf withscores  -- 查询分数在负无穷~正无穷</span><br><span class="line"></span><br><span class="line">语法：zrangebylex key min max [limit offset count]</span><br><span class="line">说明：（演变）返回有序集中，按照元素来指定区间内的成员，具体参考zrange</span><br><span class="line">     zrangebylex myzsetA [aa [dd    -- 查询元素在aa ~ dd之间（包含aa和dd）</span><br><span class="line"></span><br><span class="line">语法：zrangestore dst src min max [byscore|bylex] [rev] [limit offset count]</span><br><span class="line">说明：（演变）指定区间内的成员，其中成员查询可以按照下标，分数，元素来获取指定范围，并存储在dst新的有序集合里</span><br><span class="line">    dst：存储查询结果的有序集合</span><br><span class="line">    src：要查询的有序集合</span><br><span class="line">    注：具体操作和参数介绍看zrange</span><br><span class="line">    zrangestore newzset myzsetA 0 -1 -- 查询的全部元素存放到指定有序集合里，返回添加成功的个数</span><br><span class="line"></span><br><span class="line">语法：zrevrange key start stop [withscores]</span><br><span class="line">说明：（演变）返回有序集key中，指定区间内的成员。其中成员的位置按score值递减(从高到低)来排列获取</span><br><span class="line">     zrevrange myzsetA 0 -1 withscores  -- 查询有序集合中myzsetA的全部元素的分数降序</span><br><span class="line"></span><br><span class="line">语法：zrevrangebyscore key max min [withscores] [limit offset count]</span><br><span class="line">说明：（演变）返回有序集合key中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列获取</span><br><span class="line">     zrevrangebyscore myzsetA +inf -inf withscores -- 按照分数降序区间查询</span><br><span class="line"></span><br><span class="line">语法：zrevrangebylex key max min [limit offset count]</span><br><span class="line">说明：（演变）返回有序集合key中指定元素区间的成员列表来获取按元素字典排序递增(从小到大)次序排列获取</span><br><span class="line">     zrevrangebylex myzsetA + -     -- 按照元素降序区间查询</span><br><span class="line"></span><br><span class="line">语法：zcard key</span><br><span class="line">说明：获取有序集的成员个数</span><br><span class="line"></span><br><span class="line">语法：zrank key member</span><br><span class="line">说明：返回有序集key中成员member的排名，其中有序集成员按score值从低到高排列，（推荐分数相同时使用）</span><br><span class="line">    注：推荐在有序集合相同分数的情况下使用，具体可以本章的zrange</span><br><span class="line">    zrank myzsetA cc    -- 获取有序集合中myzsetA的cc下标位置</span><br><span class="line"></span><br><span class="line">语法：zrevrank key member</span><br><span class="line">说明：返回有序集key中成员member的排名，其中有序集成员按score值从高到低排列</span><br><span class="line">     zrevrank myzsetA jj  -- 倒序获取有序集合中的 jj 位置下标</span><br><span class="line"></span><br><span class="line">语法：zscore key member</span><br><span class="line">说明：用于返回有序集和key中成员member的分数（不存在的元素返回nil）</span><br><span class="line"></span><br><span class="line">语法：zmscore key member [member ...]</span><br><span class="line">说明：用于返回有序集和key中多个成员member的分数（不存在的元素返回nil）</span><br><span class="line">    zmscore myzsetA aa bb ccc   查看aa、bb、ccc分数（ccc不存在返回nil）</span><br><span class="line">    1) &quot;1&quot;</span><br><span class="line">    2) &quot;5&quot;</span><br><span class="line">    3) (nil)</span><br><span class="line"></span><br><span class="line">语法：zrandmember key [count [withscores]]</span><br><span class="line">说明：随机获取有序集合key内部的指定元素个数的，</span><br><span class="line">    注：当count为1 或者 -1 看不出效果</span><br><span class="line">    注：当count为 2 ~ 正无穷 ，则会返回不同的元素，不会重复，若集合5个元素，你count为10，最终也返回5个几个（不能重复）</span><br><span class="line">    注：当count为 -2 ~ 负无穷，则可能会出现返回重复的元素，若集合5个元素，你count为100，最终会随机获取100个返回</span><br><span class="line">    127.0.0.1:6379&gt; zrandmember zsetB 6 withscores      -- 把集合内部的4个元素全部返回出来了，无法返回6个（不能重复）</span><br><span class="line">    1) &quot;babao&quot;</span><br><span class="line">    2) &quot;20&quot;</span><br><span class="line">    3) &quot;mazi&quot;</span><br><span class="line">    4) &quot;15&quot;</span><br><span class="line">    5) &quot;lisi&quot;</span><br><span class="line">    6) &quot;10&quot;</span><br><span class="line">    7) &quot;zhangsan&quot;</span><br><span class="line">    8) &quot;5&quot;</span><br><span class="line">    127.0.0.1:6379&gt; zrandmember zsetB -5 withscores   -- 随机从集合内部选出5个元素</span><br><span class="line">     1) &quot;lisi&quot;</span><br><span class="line">     2) &quot;10&quot;</span><br><span class="line">     3) &quot;mazi&quot;</span><br><span class="line">     4) &quot;15&quot;</span><br><span class="line">     5) &quot;mazi&quot;</span><br><span class="line">     6) &quot;15&quot;</span><br><span class="line">     7) &quot;lisi&quot;</span><br><span class="line">     8) &quot;10&quot;</span><br><span class="line">     9) &quot;babao&quot;</span><br><span class="line">    10) &quot;20&quot;</span><br><span class="line"></span><br><span class="line">语法：zscan key cursor [match pattern] [count count]</span><br><span class="line">说明：迭代遍历集合内部元素（具体查看scan命令）</span><br><span class="line">    cursor：游标（告诉迭代器从哪开始迭代）</span><br><span class="line">    [match pattern]：过滤筛选条件</span><br><span class="line">    [count count]：迭代的个数</span><br><span class="line">    zscan  myzsetA 0 match * count 2</span><br><span class="line">        -- 遍历有序集合myzsetA，从游标0开始（最头部），查询两个</span><br></pre></td></tr></table></figure><h3 id="3：删除命令"><a href="#3：删除命令" class="headerlink" title="3：删除命令"></a>3：删除命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：zrem key member [member ...]</span><br><span class="line">说明：用于从有序集合key中删除指定的多个成员member。如果member不存在则被忽略</span><br><span class="line"></span><br><span class="line">语法：zremrangebyrank key start stop</span><br><span class="line">说明：移除有序集key中，指定排名(rank)区间start和stop内的所有成员，下标参数start和stop都是从0开始计数</span><br><span class="line">    注：按照下标删除元素</span><br><span class="line">    zremrangebyrank myzsetA 0 -2 -- 删除从左边开始到右边倒数第二个的范围元素</span><br><span class="line"></span><br><span class="line">语法：zremrangebylex key min max</span><br><span class="line">说明：删除成员名称按字典由低到高排序介于min和max之间的所有成员；按照元素删除的话推荐在分数相同</span><br><span class="line">     的情况下使用，因为每次添加带有不同分数的元素会找到自己的位置插入添加，不是按照字典由低到高插入添加</span><br><span class="line">     所有我们后期删除时结果由于分数的影像导致删除不准确</span><br><span class="line">    注：按照元素删除元素</span><br><span class="line">    zremrangebylex myzsetA [aa (kk -- 删除元素在aa ~ kk 之间的（包括aa，不包括kk）</span><br><span class="line"></span><br><span class="line">语法：zremrangebyscore key min max</span><br><span class="line">说明：移除有序集key中，所有score值介于min和max之间(包括等于min或max)的成员</span><br><span class="line">    注：按照分数删除元素</span><br><span class="line">    zremrangebyscore myzsetA (-2 (30    -- 根据分数删除指定范围的元素（不包含-2和30）</span><br><span class="line"></span><br><span class="line">语法：zpopmax key [count]</span><br><span class="line">说明：删除分数最高的count个元素，如果未指定count则默认为1 ，删除会按照排序从高到低删除指定count个元素</span><br><span class="line"></span><br><span class="line">语法：zpopmin key [count]</span><br><span class="line">说明：删除分数最低的count个元素，如果未指定count则默认为1 ，删除会按照排序从低到高删除指定count个元素</span><br><span class="line"></span><br><span class="line">语法：bzpopmax key [key ...] timeout</span><br><span class="line">说明：和zpopmax一样，只不过是阻塞删除（若没有指定集合或元素则等待被创建），一次性删除一个，超时就自动退出</span><br><span class="line"></span><br><span class="line">语法：bzpopmin key [key ...] timeout</span><br><span class="line">说明：和zpopmin一样，只不过是阻塞删除（若没有指定集合或元素则等待被创建），一次性删除一个，超时就自动退出</span><br></pre></td></tr></table></figure><h3 id="4：其它命令"><a href="#4：其它命令" class="headerlink" title="4：其它命令"></a>4：其它命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：zcount key min max</span><br><span class="line">说明：返回有序集key中，score值在min和max之间(min&lt;=score&gt;=max)的成员的数量</span><br><span class="line">    min：最小值，可以使用 -inf 代表负无穷大，默认是包含最小值，source&gt;=min；若不包含可在值前面添加 &#x27;(&#x27; 如 (-20</span><br><span class="line">    max：最大值，可以使用 +inf 代表正无穷大，默认是包含最大值，source&lt;=max；若不包含可在值前面添加 &#x27;(&#x27; 如 (20</span><br><span class="line">    举例：</span><br><span class="line">        zcount myzsetA -inf +inf    -- 查询有序集合里的全部成员数量</span><br><span class="line">        zcount myzsetA -20 15       -- 查询成员分数在-20 ~ 15 之间，包含-20和15</span><br><span class="line">        zcount myzsetA (-20 (20     -- 查询成员分数在-20 ~ 20 之间，不包含-20和20</span><br><span class="line"></span><br><span class="line">语法：zlexcount key min max</span><br><span class="line">说明：返回有序集合key中，元素在min和max之间的成员数量，元素是按照字典排序（ASCII）的方式存在min和max</span><br><span class="line">    注：关于对元素范围统计，推荐元素的分数都为一个固定的相同值，要不然会有一个偏差，（具体看range参数说明）</span><br><span class="line">    zlexcount zsetC  [bb [gg -- 获取有序集合zsetC里bb ~ gg范围元素个数（包含bb和gg）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法：zincrby key increment member</span><br><span class="line">说明：为有序集key的成员member的score值加上增量increment</span><br><span class="line">    注：若key不存在，或者member不是当前key成员，则此命令自动转换为zadd命令</span><br><span class="line">    zincrby chinas 4 Anhui  -- 在有序集合上的Anhui元素分数增量 +4</span><br><span class="line"></span><br><span class="line">语法：zdiff numkeys key [key ...] [withscores]</span><br><span class="line">说明：计算第一个有序集合与其它集合的元素差异，并返回给客户端，若指定一个有序集合key则返回全部元素</span><br><span class="line">    注：numkeys设置key的数量，必须与key个数对应</span><br><span class="line">    zdiff 2 zsetA zsetB</span><br><span class="line">    1) &quot;xiechao&quot;</span><br><span class="line">    2) &quot;wanger&quot;</span><br><span class="line">        -- 以zsetA为基准计算与其它集合的差异</span><br><span class="line"></span><br><span class="line">语法：zdiffstore destination numkeys key [key ...]</span><br><span class="line">说明：计算第一个有序集合与其它集合的元素差异，并存放到新集合中，若新集合存在则覆盖里面内容</span><br><span class="line">    注：numkeys设置key的数量，必须与key个数对应</span><br><span class="line">    zdiffstore newzset 2 zsetA zsetB</span><br><span class="line">    (integer) 2</span><br><span class="line">         -- 以zsetA为基准计算与其它集合的差异，并存放到newzset集合中</span><br></pre></td></tr></table></figure><h2 id="九：GeoSpatial（地理空间）特殊类型命令"><a href="#九：GeoSpatial（地理空间）特殊类型命令" class="headerlink" title="九：GeoSpatial（地理空间）特殊类型命令"></a>九：GeoSpatial（地理空间）特殊类型命令</h2><p>geospatial地理位置命令其实底层使用的是zset，我们可以通过type来验证geospatial的空间集合key，会返回zset，那么就可以说明geospatial里面添加的全部元素我基本上可以使用zset的命令处理，但是针对geospatial内的一些特有命令是无法使用zset命令来处理的，我们最多使用zset内的zrange（查询）,zrem（删除）等</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试数据：geoadd wan 117.30794 31.79322 hefei 118.38548 31.34072 wuhu 116.53949 31.74933 luan 115.77914 33.87641 bozhou 117.56733 30.68673 chizhou 118.75634 30.94622 xuancheng 118.30553 32.2948 chuzhou 116.97728 33.64004 suzou</span><br><span class="line">语法：geoadd key [nx|xx] [ch] longitude latitude member [longitude latitude member ...]</span><br><span class="line">说明：将指定的地理空间(经度、纬度、名称)添加到指定的键中。数据以排序集的形式存储到键中</span><br><span class="line">    [nx|xx]：</span><br><span class="line">        nx：只能进行添加操作，无法更新已经存在的坐标</span><br><span class="line">        xx：只能进行更新操作，无法添加一个不存在的坐标</span><br><span class="line">    [ch]：ch是changed缩写，添加此属性，就会在每次成功后返回添加成功的坐标和更改成功的坐标的次数汇总</span><br><span class="line">        注：geoadd的默认不添加ch的返回值只计算新增元素的数量，而更新的则不统计在内</span><br><span class="line">    longitude：经度</span><br><span class="line">    latitude：纬度</span><br><span class="line">    member：坐标名称</span><br><span class="line">    注：有效经度 -180° ~ 180°</span><br><span class="line">    注：有效纬度 -85.05112878° ~ 85.05112878°</span><br><span class="line">    举例：</span><br><span class="line">        geoadd Anhui 117.30794 31.79322 hefei 118.38548 31.34072 wuhu 116.53949 31.74933 luan</span><br><span class="line">        (integer) 3</span><br><span class="line">            -- 在安徽key里面添加合肥、芜湖、六安三地坐标</span><br><span class="line">        geoadd Anhui 115 32 hefei 119 32 wuhu 117.03424 30.51227 anqing</span><br><span class="line">        (integer) 1</span><br><span class="line">            -- 在安徽key里面更新 合肥、芜湖，并添加一个 安庆 （参考第一条命令）</span><br><span class="line">        geoadd Anhui nx 118.75634 30.94622 xuancheng</span><br><span class="line">        (integer) 1</span><br><span class="line">            -- 用nx修饰，只能添加元素，无法修改，添加 宣城坐标</span><br><span class="line">        geoadd Anhui xx 119.75634 32.94622 xuancheng</span><br><span class="line">        (integer) 0</span><br><span class="line">            -- 用xx修饰，只能修改元素，无法添加，修改 宣城坐标；；这里默认修改是不返回具体数据，只返回0</span><br><span class="line">        geoadd Anhui ch 119 33 xuancheng 118 32 anqing 116.83359  32.63142 huainan</span><br><span class="line">        (integer) 3</span><br><span class="line">            -- 用ch修饰，表示更改、添加都会被记录统计，两次修改一次添加（三次操作）</span><br><span class="line">安徽省16个市的坐标</span><br><span class="line">   经度       纬度      名称</span><br><span class="line">117.30794  31.79322   合肥市</span><br><span class="line">118.38548  31.34072   芜湖市</span><br><span class="line">117.36779  32.94448   蚌埠市</span><br><span class="line">116.83359  32.63142   淮南市</span><br><span class="line">118.84432  31.55856   马鞍山市</span><br><span class="line">116.82803  33.99141   淮北市</span><br><span class="line">117.80103  30.90466   铜陵市</span><br><span class="line">117.03424  30.51227   安庆市</span><br><span class="line">118.14161  30.27296   黄山市</span><br><span class="line">115.85668  32.91303   阜阳市</span><br><span class="line">116.97728  33.64004   宿州市</span><br><span class="line">118.30553  32.2948    滁州市</span><br><span class="line">116.53949  31.74933   六安市</span><br><span class="line">118.75634  30.94622   宣城市</span><br><span class="line">117.56733  30.68673   池州市</span><br><span class="line">115.77914  33.87641   亳州市</span><br><span class="line"></span><br><span class="line">语法：geopos key member [member ...]</span><br><span class="line">说明：从键里面返回所有给定位置元素的位置（经度和纬度）</span><br><span class="line">    注：返回的坐标可能不完全是当初添加元素的坐标，可能会有一点点误差</span><br><span class="line">    127.0.0.1:6379&gt; geopos Anhui hefei luan     -- 获取合肥和六安的地理空间经纬度</span><br><span class="line">    1) 1) &quot;117.30793744325637817&quot;</span><br><span class="line">       2) &quot;31.79321915080526395&quot;</span><br><span class="line">    2) 1) &quot;116.53948992490768433&quot;</span><br><span class="line">       2) &quot;31.74933045393131437&quot;</span><br><span class="line"></span><br><span class="line">语法：geodist key member1 member2 [m|km|ft|mi]</span><br><span class="line">说明：计算并返回两个元素地理空间之间的距离，若其中一个地理空间不存在则计算返回一个（nil）空</span><br><span class="line">    [m|km|ft|mi]：</span><br><span class="line">    m(meter)：米     km(kilometer)：千米   ft(ft)：英尺   mi(miles)：英里</span><br><span class="line">    1000m = 1km ；5280ft = 1mi ；1mi = 1609.34m</span><br><span class="line">    举例：</span><br><span class="line">        geodist Anhui hefei luan km     -- 计算千米</span><br><span class="line">        &quot;72.8279&quot;</span><br><span class="line">        geodist Anhui hefei luan m      -- 计算米</span><br><span class="line">        &quot;72827.8708&quot;</span><br><span class="line"></span><br><span class="line">语法：geohash key member [member ...]</span><br><span class="line">说明：返回一个有效的hash字符串，返回的字符串是11位的字符，它与Redis内部的52位表示精度相差可以忽略</span><br><span class="line">     若两个11位的hash字符串越接近，那么代表坐标越接近</span><br><span class="line">     127.0.0.1:6379&gt; geohash Anhui luan hefei       -- 获取六安和合肥的距离</span><br><span class="line">     1) &quot;wtduegv3qb0&quot;</span><br><span class="line">     2) &quot;wtekv7v0cj0&quot;</span><br><span class="line"></span><br><span class="line">语法：georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count [any]] [asc|desc] [store key] [storedist key]</span><br><span class="line">说明：获取指定空间集合key里空间元素在给定的经纬度范围之内的空间元素，可以用于实现附近的人功能</span><br><span class="line">    （我们提供一个经纬度（中心点），再指定一个之前geoadd添加的空间集和，然后再设置查询范围，看看哪些地理空间元素在空间范围内（参考雷达图））</span><br><span class="line">    注：在Redis6.2.0版本中推荐使用geosearch、geosearchstore，当前方式已废弃并不推荐使用</span><br><span class="line">    key：提供一个我们添加好的空间集合</span><br><span class="line">    longitude：中心点位置经度</span><br><span class="line">    latitude：中心点位置纬度</span><br><span class="line">    radius：半径的值（搜素的范围，参考雷达图）</span><br><span class="line">    m|km|ft|mi：半径的值是以什么为单位</span><br><span class="line">    [withcoord]：返回的结果中包含经纬度</span><br><span class="line">    [withdist]：返回的结果中包含离中心点的位置距离</span><br><span class="line">    [withhash]：返回的结果中包含geohash（此值用来表示经纬度，但是用hash不是太准）</span><br><span class="line">    [count count [any]]：指定返回结果的数量</span><br><span class="line">    [asc|desc]：返回结果按照离中心节点的距离做升序或者降序</span><br><span class="line">    [store key]：（结果存储到外部集合）将返回结果的地理位置信息保存到指定空的空间集合中</span><br><span class="line">    [storedist key]：（结果存储到外部集合）将返回结果的空间元素离中心节点的距离保存到指定空的空间集合中</span><br><span class="line">    注：withcoord、withdist、withhash三个属性不能与store、storedist一起使用，因为前三个with*是用来直接返回展示的</span><br><span class="line">    举例：</span><br><span class="line">        georadius wan 114.22 30.33 440 km</span><br><span class="line">        1) &quot;luan&quot;</span><br><span class="line">        2) &quot;chizhou&quot;</span><br><span class="line">        3) &quot;hefei&quot;</span><br><span class="line">        4) &quot;xuancheng&quot;</span><br><span class="line">        5) &quot;wuhu&quot;</span><br><span class="line">        6) &quot;bozhou&quot;</span><br><span class="line">            -- 获取坐标114.22 30.33在空间集合wan（皖）里中心点440km范围的全部元素</span><br><span class="line"></span><br><span class="line">        127.0.0.1:6379&gt; georadius wan 114.22 30.33 440 km withcoord withdist withhash count 1</span><br><span class="line">        1) 1) &quot;luan&quot;</span><br><span class="line">           2) &quot;271.6188&quot;            -- 注：我们设置中心点范围什么单位，这里就什么单位</span><br><span class="line">           3) (integer) 4052658908461674    -- geohash</span><br><span class="line">           4) 1) &quot;116.53948992490768433&quot;    -- 经度</span><br><span class="line">              2) &quot;31.74933045393131437&quot;     -- 纬度</span><br><span class="line">            -- 获取中心点范围的空间元素，并在返回结果中返回当前空间元素经纬度、举例中心点举例、geohash值，并设置返回一个</span><br><span class="line"></span><br><span class="line">        127.0.0.1:6379&gt; georadius wan 114.22 30.33 440 km count 1 store map1</span><br><span class="line">        (integer) 1</span><br><span class="line">        127.0.0.1:6379&gt; zrange map1 0 -1 withscores</span><br><span class="line">        1) &quot;luan&quot;</span><br><span class="line">        2) &quot;4052658908461674&quot;</span><br><span class="line">            -- 把结果写出到外部集合中，store代表写出到外部集合，元素为空间名称，”分数store“为geohash</span><br><span class="line"></span><br><span class="line">        127.0.0.1:6379&gt; georadius wan 114.22 30.33 440 km count 1 storedist map2</span><br><span class="line">        (integer) 1</span><br><span class="line">        127.0.0.1:6379&gt; zrange map2 0 -1 withscores</span><br><span class="line">        1) &quot;luan&quot;</span><br><span class="line">        2) &quot;271.61880150367676&quot;</span><br><span class="line">            -- 把结果写出到外部集合中，storedist代表写出外部集合（并携带距离中心点距离），</span><br><span class="line">                元素为空间名称，”分数store“为距离中心点的距离</span><br><span class="line"></span><br><span class="line">语法：georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count [any]] [asc|desc] [store key] [storedist key]</span><br><span class="line">说明：和georadius命令相似，当前命令是以指定空间名称位置为中心点来往外扩展范围查询</span><br><span class="line">    member：从设置的key内部选择一个空间名称当中心点来计算范围</span><br><span class="line">    注：具体参考georadius；因为georadius以经纬度定位中心点、georadiusbymember以空间元素定位中心点</span><br><span class="line">    注：在Redis6.2.0版本中推荐使用geosearch、geosearchstore，当前方式已废弃并不推荐使用</span><br><span class="line"></span><br><span class="line">语法：geosearch key [frommember member] [fromlonlat longitude latitude] [byradius radius m|km|ft|mi] [bybox width height m|km|ft|mi] [asc|desc] [count count [any]] [withcoord] [withdist] [withhash]</span><br><span class="line">说明：计算给定的中心点（空间名称或者经纬度）的指定半径内的全部空间元素，（参考雷达图）</span><br><span class="line">    key：提供一个geoadd的空间集合key</span><br><span class="line">    [frommember member]：在我们指定的空间集合中选择一个空间元素作为中心点</span><br><span class="line">    [fromlonlat longitude latitude]：我们指定经纬度来作为中心点</span><br><span class="line">    [byradius radius m|km|ft|mi]：根据给定的radius范围在圆形区域内搜素（参考雷达图）</span><br><span class="line">    [bybox width height m|km|ft|mi]：根据给定的width X坐标 height Y坐标 中轴对齐的矩形内中心点搜素</span><br><span class="line">    [asc|desc]：返回结果按照离中心节点的距离做升序或者降序</span><br><span class="line">    [count count [any]]：指定返回结果的数量</span><br><span class="line">    [withcoord]：返回的结果中包含经纬度</span><br><span class="line">    [withdist]：返回的结果中包含离中心点的位置距离</span><br><span class="line">    [withhash]：返回的结果中包含geohash（此值用来表示经纬度，但是用hash不是太准）</span><br><span class="line">    注：frommember与fromlonlat不能同时出现，只能选择其一</span><br><span class="line">    注：byradius与bybox不能同时出现，只能选择其一</span><br><span class="line">    举例：</span><br><span class="line">        127.0.0.1:6379&gt; geosearch wan frommember hefei  byradius 500 km count 2 withcoord withdist withhash</span><br><span class="line">        1) 1) &quot;hefei&quot;</span><br><span class="line">           2) &quot;0.0000&quot;</span><br><span class="line">           3) (integer) 4052763834193093</span><br><span class="line">           4) 1) &quot;117.30793744325637817&quot;</span><br><span class="line">              2) &quot;31.79321915080526395&quot;</span><br><span class="line">        2) 1) &quot;luan&quot;</span><br><span class="line">           2) &quot;72.8279&quot;</span><br><span class="line">           3) (integer) 4052658908461674</span><br><span class="line">           4) 1) &quot;116.53948992490768433&quot;</span><br><span class="line">              2) &quot;31.74933045393131437&quot;</span><br><span class="line">           -- 按照指定空间元素为中心点，并以圆形区域搜素；但是hefei自身离自己距离是0.0km也输出</span><br><span class="line"></span><br><span class="line">        127.0.0.1:6379&gt; geosearch wan fromlonlat 115.22 29.34 bybox 500 400 km count 2 withcoord withdist withhash</span><br><span class="line">        1) 1) &quot;chizhou&quot;</span><br><span class="line">           2) &quot;271.1848&quot;</span><br><span class="line">           3) (integer) 4052698622569884</span><br><span class="line">           4) 1) &quot;117.56732851266860962&quot;</span><br><span class="line">              2) &quot;30.68672971895555435&quot;</span><br><span class="line">           -- 按照指定经纬度为中心点坐矩形范围查询</span><br><span class="line"></span><br><span class="line">语法：geosearchstore destination source [frommember member] [fromlonlat longitude latitude] [byradius radius m|km|ft|mi] [bybox width height m|km|ft|mi] [asc|desc] [count count [any]] [storedist]</span><br><span class="line">语法：和geosearch相似，只不过geosearchstore命令是将结果返回到指定空间集合里</span><br><span class="line">    destination：新空间集合名称（返回的结果保存到此集合）</span><br><span class="line">    source：空间集合key，和geosearch里的key一样</span><br><span class="line">    storedist：storedist代表写出外部集合（并携带距离中心点距离），默认”store分数“为geohash</span><br><span class="line">    举例：</span><br><span class="line">        127.0.0.1:6379&gt; geosearchstore newWan wan fromlonlat 115.22 29.66 byradius 500 km storedist count 1</span><br><span class="line">        (integer) 1</span><br><span class="line">        127.0.0.1:6379&gt; zrange newWan 0 -1 withscores</span><br><span class="line">        1) &quot;chizhou&quot;</span><br><span class="line">        2) &quot;252.94646681717083&quot;</span><br></pre></td></tr></table></figure><h2 id="十：HyperLogLog（超级基数统计）特殊类型命令"><a href="#十：HyperLogLog（超级基数统计）特殊类型命令" class="headerlink" title="十：HyperLogLog（超级基数统计）特殊类型命令"></a>十：HyperLogLog（超级基数统计）特殊类型命令</h2><p>HyperLogLog主要是用来大数据量统计的类型算法，比如我们统计网站的一天访问量；虽然我们可以使用Redis中String类型的incr、incrby来实现，但是它只能统计访问本网站的每个请求计数累加（除了程序控制），但是我要说每个IP请求多少次都算作一次，对于多个相同IP的请求需要去重计数，在这种环境下HyperLogLog是优选，虽然hash、set、bitmaps可以解决这种问题，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的；</p><p>其实HyperLogLog底层还是一个Redis的String类型，只是用特有算法来实现这个数据类型，它是在降低一定的精确度来平衡和减少空间的存储，**标准误差只有0.81%**；对于统计这些数据精确度不是太大的完全够用了，如果需要统计准确的计数，那还是老老实实使用set这些类型，只能牺牲空间来维持精度；</p><p>HyperLogLog用来做基数统计的算法，优点是在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。<strong>每个HyperLogLog键只需要花费12KB内存，就可以计算接近2^64个不同元素的基数</strong>。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。但是<strong>HyperLogLog只会根据输入元素来计算基数，而不会储存输入元素本身</strong>，所以HyperLogLog不能像集合那样，返回输入的各个元素。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：pfadd key [element [element ...]]</span><br><span class="line">说明：添加指定元素到hyperloglog中，如果指定的键不存在，该命令会自动创建一个空的hyperloglog结构</span><br><span class="line">    注：添加的元素已存在的话将不在执行计数统计，都为相同元素的话将返回0，若有添加成功的都会返回1</span><br><span class="line">    pfadd nameA zhangsan lisi wangwu mazi zhangsan xiejun mazi  -- 添加元素</span><br><span class="line">    pfadd nameB xiechao xiaoyang wangwu xiexiao</span><br><span class="line"></span><br><span class="line">语法：pfcount key [key ...]</span><br><span class="line">说明：返回一个或多个键内统计基数（就是返回不相同的元素个数，用来统计），计算统计误差在0.81%</span><br><span class="line">    127.0.0.1:6379&gt; pfcount nameA nameB     -- 统计nameA 和 nameB 里的不重复基数</span><br><span class="line">    (integer) 8</span><br><span class="line"></span><br><span class="line">语法：pfmerge destkey sourcekey [sourcekey ...]</span><br><span class="line">说明：统计一个或多个键内统计基数并放到外部集合里</span><br><span class="line">    127.0.0.1:6379&gt; pfmerge newCount nameA nameB    -- newCount为外部集合，nameA，nameB为要统计的数据</span><br><span class="line">    OK</span><br><span class="line">    127.0.0.1:6379&gt; pfcount newCount</span><br><span class="line">    (integer) 8</span><br></pre></td></tr></table></figure><h2 id="十一：BitMap（位图）特殊类型命令"><a href="#十一：BitMap（位图）特殊类型命令" class="headerlink" title="十一：BitMap（位图）特殊类型命令"></a>十一：BitMap（位图）特殊类型命令</h2><p>BitMap是一串连续的二进制数字（0和1），类似于位数组，每一位所在的位置为偏移量（offset），类似于数组索引，BitMap就是通过最小的单位bit来进行0|1的设置，时间复杂度位O(1)，表示某个元素的值或者状态。由于bit是计算机中最小的单位，使用它进行储存将非常节省空间。特别适合一些数据量大的场景。例如，统计每日活跃用户、统计每月打卡数等统计场景。1天记录1000W用户的活跃统计数据，只需要10000000&#x2F;8&#x2F;1024&#x2F;1024 ≈1.2M。</p><p>Redis从2.2.0 ~ 6.2.0这些版本中陆陆续续新增了setbit，getbit，bitcount，bitop等几个BitMap相关命令，虽然是新命令，但是并没有增加新的数据类型，它还是属于String类型。Redis中的BitMap最大占用内存大小限制在512M之内，即2^32。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基本介绍：</span><br><span class="line">    在计算机中我们常常使用byte（字节）来作为最小单位，每一个byte由8位二进制数组成，即8bit（比特，也称&quot;位&quot;，8位二进制数0和1组成）</span><br><span class="line">    8bit(位) = 1B      [Byte=B]     字节(最小单位)</span><br><span class="line">    1024 B  = 1 KB    [KiloByte]    千字节</span><br><span class="line">    1024 KB = 1 MB    [MegaByte]    兆字节</span><br><span class="line">    1024 MB = 1 GB    [GigaByte]    吉字节</span><br><span class="line">    1024 GB = 1 TB    [TeraByte]    太字节</span><br><span class="line">    1024 TB = 1 PB    [PetaByte]    拍字节</span><br><span class="line">    1024 PB = 1 EB    [ExaByte]     艾字节</span><br><span class="line">    1024 EB = 1 ZB    [ZetaByte]    皆字节</span><br><span class="line">    1024 ZB = 1 YB    [YottaByte]   佑字节</span><br><span class="line">    1024 YB = 1 BB    [Brontobyte]  珀字节</span><br><span class="line">    1024 BB = 1 NB    [NonaByte]    诺字节</span><br><span class="line">    1024 NB = 1 DB    [DoggaByte]   刀字节</span><br><span class="line">BitMap：</span><br><span class="line">    bitMap就是通过最小单位bit来设置值，用来表示不同的两个状态；一个bit只能设置0或者1，所以bit只能存储两个状态</span><br></pre></td></tr></table></figure><p><strong>1：常用命令</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：setbit key offset value</span><br><span class="line">说明：设置或清除存在当前key里指定offset(偏移)位置上的位（可设置0或1，否和是）</span><br><span class="line">    举例：</span><br><span class="line">        setbit  record 0 1     setbit  record 8 1      setbit  record 16 1     setbit  record 24 1</span><br><span class="line">        setbit  record 1 1     setbit  record 9 1      setbit  record 17 1     setbit  record 25 0</span><br><span class="line">        setbit  record 2 1     setbit  record 10 1     setbit  record 18 0     setbit  record 26 0</span><br><span class="line">        setbit  record 3 1     setbit  record 11 0     setbit  record 19 0     setbit  record 27 0</span><br><span class="line">        setbit  record 4 1     setbit  record 12 0     setbit  record 20 1     setbit  record 28 0</span><br><span class="line">        setbit  record 5 1     setbit  record 13 0     setbit  record 21 0     setbit  record 29 0</span><br><span class="line">        setbit  record 6 1     setbit  record 14 0     setbit  record 22 1     setbit  record 30 1</span><br><span class="line">        setbit  record 7 1     setbit  record 15 1     setbit  record 23 1     setbit  record 31 0</span><br><span class="line">    解释：1字节八位，所以我上面是0~7一组、8~15一组、16~23一组、24~31一组，正好可以用来记录一个月的签到情况；</span><br><span class="line">        11111111   11100001   11001011   10000010      ==&gt;存储这几个记录用了 4Byte字节，可以记录一个月</span><br><span class="line">        使用strlen来计算长度   strlen record   等于 4Byte</span><br><span class="line">    注：我们设置值有时不需要一个一个设置，比如</span><br><span class="line">        setbit test 5 1</span><br><span class="line">        setbit test 20 1</span><br><span class="line">        最终存储是这样的 =&gt; 00000100   00000000   00001000    【从左往右看或者获取】</span><br><span class="line"></span><br><span class="line">语法：getbit key offset</span><br><span class="line">说明：返回存储在key的字符串值中offset处的位值，就和我们上面添加的获取一样，获取22位=1、21位=0，0位=1</span><br><span class="line">    getbit record 22</span><br><span class="line">    注：以record的key来说，当获取偏移量超过31的话，那么字符串就会假定为一个连续的空间，那些连续的空间都当作0，</span><br><span class="line">        所有我获取偏移量500的话，那么会从31~500都是0，最后我们返回也是0；若当前key不存在，获取一个随机偏移量，那么</span><br><span class="line">        也会从0位往后都被假定为0，返回也是0</span><br><span class="line"></span><br><span class="line">语法：bitcount key [start end]</span><br><span class="line">说明：计算字符串中设置位数为1的个数，默认情况下获取字符串中所有字节的统计，指定范围则使用start、end；</span><br><span class="line">    [start end]：</span><br><span class="line">        我们以上面设置的为例：=&gt; 11111111   11100001   11001011   10000010</span><br><span class="line">        存储可以看为字符串数组一样正好对应上面 【0 , 1 , 2 , 3】</span><br><span class="line">    注：start和end可以设置负数，负数代表从后往前</span><br><span class="line">    bitcount record 0 0      代表查询【11111111】=8</span><br><span class="line">    bitcount record 0 2      代表查询【11111111 11100001 11001011】=17</span><br><span class="line">    bitcount record 1 2      代表查询【11100001 11001011】=9</span><br><span class="line">    bitcount record 0 -1     代表查询【11111111 11100001 11001011 10000010】=19</span><br><span class="line">    bitcount record 0 -2     代表查询【11111111 11100001 11001011】=17</span><br><span class="line">    bitcount record -3 3     代表查询【11100001 11001011 10000010】=11</span><br><span class="line">    bitcount record -1 -2    代表查询【】=0</span><br><span class="line">    bitcount record -3 -1    代表查询【10000010 11001011 11100001】=11</span><br><span class="line">    bitcount record -3 -3    代表查询【11100001】=4</span><br><span class="line">    bitcount record -3 -4    代表查询【】=0</span><br><span class="line">    注：如果都是负数偏移则是反过来的[正数从左往右，负数从右往左]，以下面为例</span><br><span class="line">        bitcount record -3 -4     -3代表终止，-4代表起始</span><br><span class="line">        以上面字节可看作：-4 -3 -2 -1    ；-3是终止点，而-4在后面</span><br><span class="line"></span><br><span class="line">语法：bitop operation destkey key [key ...]</span><br><span class="line">说明：在多个键中执行位运算，并将结果存储到目标键中</span><br><span class="line">    operation：支持四种按位运算分别是：and、or、xor、not；</span><br><span class="line">        and：多个键中对应的位值都相同时才为1</span><br><span class="line">        or：多个键中对应的位值有1则为1</span><br><span class="line">        xor：多个键中对应的位值有1则为1，都为1则为0</span><br><span class="line">        not：值接收一个键，并取当前键里面位的反转值0变为1，1变为0</span><br><span class="line">    destkey：结果存放的key</span><br><span class="line">    示例：</span><br><span class="line">        setbit bitA 0 1       setbit bitB 0 1</span><br><span class="line">        setbit bitA 1 1       setbit bitB 1 0</span><br><span class="line">        setbit bitA 2 0       setbit bitB 2 1</span><br><span class="line">        setbit bitA 3 1       setbit bitB 3 0</span><br><span class="line">        setbit bitA 4 1       setbit bitB 4 0</span><br><span class="line">        setbit bitA 5 0       setbit bitB 5 0</span><br><span class="line">        setbit bitA 6 0       setbit bitB 6 1</span><br><span class="line">        setbit bitA 7 1       setbit bitB 7 1</span><br><span class="line">        bitop and newBit bitA bitB</span><br><span class="line">            and =&gt; newBit内部存储【10000001】=&gt;2</span><br><span class="line">        bitop or newBit bitA bitB</span><br><span class="line">            or =&gt; newBit内部存储【11111011】=&gt;7</span><br><span class="line">        bitop xor newBit bitA bitB</span><br><span class="line">            xor =&gt; newBit内部存储【01111010】=&gt;5</span><br><span class="line">        bitop not newBit bitA</span><br><span class="line">            not =&gt; newBit内部存储【00100110】=&gt;3</span><br><span class="line"></span><br><span class="line">语法：bitpos key bit [start [end]]</span><br><span class="line">说明：返回位图中第一次出现1或者0的位置，默认是从位图0位置开始查找，也可指定start、end</span><br><span class="line">    key：要查询的位图</span><br><span class="line">    bit：值只可写0或者1，告知在位图中查询第一次出现的位置</span><br><span class="line">    [start [end]]：范围，可以单写start，或者start和end一起</span><br><span class="line">    举例：record：=&gt; 11111111   11100001   11001011   10000010</span><br><span class="line">        bitpos record 1</span><br><span class="line">            返回0；代表所有字节查询，查询第一次出现位值为1的位置</span><br><span class="line">        bitpos record 0</span><br><span class="line">            返回11；代表所有字节查询，查询第一次出现位值为0的位置（0开始索引）</span><br><span class="line">        bitpos record 0 2 3</span><br><span class="line">            返回18；代表范围查询，查询第一次出现位值为0的位置（0开始索引）</span><br><span class="line">    注：默认情况下，检查位图包含的所有字节，若指定范围则可以使用start和end来定位，start和end的范围</span><br><span class="line">        查询是以字节来说明的，比如start=1，end=2，则查询范围为【11100001 11001011】；还有就是，即使设置</span><br><span class="line">        start和end来指定范围，位位置也始终从0开始；算上start之前的字节＋start~end之间查询到第一次出现的位置</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2021/12/04/redis/"/>
      <url>/2021/12/04/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a><strong>redis</strong></h1><h3 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h3><p><strong>下载地址</strong> <a href="https://github.com/tporadowski/redis/releases">Releases · tporadowski&#x2F;redis (github.com)</a></p><p><a href="https://www.runoob.com/redis/redis-intro.html">Redis 简介 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://blog.csdn.net/zhizhengguan/article/details/103681045">redis：命令行查看修改配置文件项、配置文件说明_OceanStar的学习笔记的博客-CSDN博客_redis查看配置文件</a></p><p><a href="https://blog.csdn.net/weixin_43343144/article/details/107247965">【非常重要】Windows Redis默认配置文件，Redis配置不生效解决方案【windows-redis配置有一个坑】_比特币爱好者007的博客-CSDN博客_redis windows 配置文件不生效</a></p><p><a href="https://blog.csdn.net/weixin_44853310/article/details/131832499">windows设置Redis服务后台自启动_redis window 后台启动_ThatMonth的博客-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 通过 CMD 命令行工具进入 Redis 安装目录，将 Redis 服务注册到 Windows 服务中</span><br><span class="line"></span><br><span class="line">redis-server.exe --service-install redis.windows.conf --loglevel verbose</span><br><span class="line"></span><br><span class="line">2. 查看一下Redis服务是否注册</span><br><span class="line"></span><br><span class="line">Win+R输入services.msc，确定进入，再查找是否有Redis</span><br><span class="line"></span><br><span class="line">3. 启动Redis服务</span><br><span class="line"></span><br><span class="line">redis-server --service-start</span><br><span class="line"></span><br><span class="line">4. 将 Redis 加入到环境变量中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\java\Redis-x64-3.2.100</span><br></pre></td></tr></table></figure><h3 id="redis设置密码"><a href="#redis设置密码" class="headerlink" title="redis设置密码"></a>redis设置密码</h3><p><a href="https://www.php.cn/redis/422222.html">Redis怎么设置密码-Redis-PHP中文网</a></p><p><a href="https://www.cnblogs.com/tenny-peng/p/11543440.html">Redis设置密码 - 淘气的小饼干 - 博客园 (cnblogs.com)</a></p><p>redis可视化工具redis-desktop-manager</p><p><a href="https://www.jianshu.com/p/ccc3ebe29f7b">Redis可视化工具 Redis Desktop Manager - 简书 (jianshu.com)</a></p><h3 id="下载-Redis-Desktop-Manager"><a href="#下载-Redis-Desktop-Manager" class="headerlink" title="下载 Redis Desktop Manager"></a>下载 Redis Desktop Manager</h3><p>百度网盘：<a href="http://pan.baidu.com/s/1kU8sY3P">http://pan.baidu.com/s/1kU8sY3P</a></p><p>文件名称：redis-desktop-manager-0.8.8.384.exe</p><h3 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型"></a>redis数据类型</h3><p><a href="https://baijiahao.baidu.com/s?id=1709170155160213718&wfr=spider&for=pc">Redis数据类型大全：“5种基础”数据类型+“3种特殊”数据类型 (baidu.com)</a></p><p><a href="https://www.cnblogs.com/hill1126/p/11523329.html">Redis五大数据类型详解 - 半生瓜丶 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_42972832/article/details/122476867">Redis系列–五种数据类型详解_redis的五种数据类型-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis 支持以下五种数据类型：</span><br><span class="line"></span><br><span class="line">1. 字符串类型（string）：字符串是 Redis 最基本的数据类型，一个 key 对应一个 value。Redis 使用字符串作为 key 的编码格式，可以设置键值的过期时间，最大限制是 512MB。</span><br><span class="line"></span><br><span class="line">2. 哈希类型（hash）：Redis 哈希类型类似于 Map 结构，它是一个字符串字段和字符串值之间的映射，映射的每个字段都有一个字符串值。</span><br><span class="line"></span><br><span class="line">3. 列表类型（list）：Redis 的列表类型是一个有序的字符串列表，在 Redis 中可以通过插入到列表头部或尾部来添加新成员，可以通过 LPOP 和 RPOP 命令删除列表的头和尾。</span><br><span class="line"></span><br><span class="line">4. 集合类型（set）：Redis 的集合类型是一个无序的字符串元素集合，与列表的区别是集合元素不能重复，支持对集合元素的添加、删除和交集/并集/差集等操作。</span><br><span class="line"></span><br><span class="line">5. 有序集合类型（sorted set）：有序集合是通过每个元素的一个分数值来排序。该数据类型在 Redis 中非常重要，因为它是实现排行榜和计分系统的理想方式。</span><br><span class="line"></span><br><span class="line">这些数据类型的主要区别在于存储结构和操作方式不同。字符串类型适用于单一的数值或文本，哈希类型适用于存储多个键值对，列表类型适用于按插入顺序有序的元素集合，集合类型适用于不重复的元素的无序集合，有序集合类型适用于有序的、可分数排列的元素集合。</span><br></pre></td></tr></table></figure><h2 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a><strong>redis命令</strong></h2><p>官网命令 <a href="https://redis.io/commands/">Commands | Redis</a></p><p><a href="https://redis.com.cn/commands.html">redis 命令手册</a></p><p><a href="https://www.cnblogs.com/antLaddie/p/15362191.html">Redis命令大全（超详细） - 蚂蚁小哥 - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/47692277">Redis 常用操作命令，非常详细！ - 知乎 (zhihu.com)</a></p><h2 id="jredis"><a href="#jredis" class="headerlink" title="jredis"></a><strong>jredis</strong></h2><p><a href="https://blog.csdn.net/weixin_39478524/article/details/121180059">JavaWeb——（17）Redis和Jedis_javaweb jedis工具类-CSDN博客</a></p><p><a href="https://blog.csdn.net/Huang_ZX_259/article/details/122906569">(48条消息) 使用Java操作Redis_一心同学的博客-CSDN博客_java操作redis</a></p><p><a href="https://blog.csdn.net/my13413527259/article/details/85063445">(48条消息) Jedis常用方法_雨后浅浅唱的博客-CSDN博客_jedis方法</a></p><h2 id="redis复制数据"><a href="#redis复制数据" class="headerlink" title="redis复制数据"></a>redis复制数据</h2><p><a href="https://www.cnblogs.com/xincha/p/16165731.html">【REDIS】redis的数据复制到另一台redis - 新茶煮酒 - 博客园 (cnblogs.com)</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【REDIS】redis的数据复制到另一台redis</span><br><span class="line">解决方法一：</span><br><span class="line"></span><br><span class="line">redis-dump导出</span><br><span class="line">[root@ ~]# redis-dump -u :password@172.20.0.1:6379 &gt; 172.20.0.1.json</span><br><span class="line"></span><br><span class="line">redis-load导入</span><br><span class="line">[root@ ~]# cat 172.20.0.1.json | redis-load -u :password@172.20.0.2:6379</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">解决方法二：</span><br><span class="line"></span><br><span class="line">1.复制redis的安装目录下的/usr/local/java/redis-3.2.3/datas目录下dump.rdb文件。</span><br><span class="line"></span><br><span class="line">2.粘贴到要复制的redis的安装目录下的/usr/local/java/redis-3.2.3/datas目录下即可。</span><br><span class="line"></span><br><span class="line">3.bin目录下重启redis服务：./redis-server /usr/local/java/redis-3.2.3/etc/redis.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find / -name  dump.rdb    </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">如果redis是一主二从的，则先关闭从redis，然后关闭主redis，再把rdb文件传过去，然后重启主redis，最后重启从redis使数据同步</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装redis可视化工具AnotherRedisDesktopManager</title>
      <link href="/2021/12/03/%E5%AE%89%E8%A3%85redis%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7AnotherRedisDesktopManager/"/>
      <url>/2021/12/03/%E5%AE%89%E8%A3%85redis%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7AnotherRedisDesktopManager/</url>
      
        <content type="html"><![CDATA[<p>安装redis可视化工具AnotherRedisDesktopManager</p><p>git项目地址：<a href="https://github.com/qishibo/AnotherRedisDesktopManager">https://github.com/qishibo/AnotherRedisDesktopManager</a></p><p>参考<br><a href="https://blog.csdn.net/qq_41521682/article/details/122788838">(76条消息) AnotherRedisDesktopManager下载安装与连接Redis数据库_another-redis-desktop-manager.1.5.9.exe_pingcode的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_43561507/article/details/108637184">(76条消息) 免费又好用的Redis客户端工具！AnotherRedisDesktopManager_redis 免安装客户端工具_我不是臭弟弟的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下Redis的安装</title>
      <link href="/2021/12/02/Linux%E4%B8%8BRedis%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2021/12/02/Linux%E4%B8%8BRedis%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下Redis的安装"><a href="#Linux下Redis的安装" class="headerlink" title="Linux下Redis的安装"></a>Linux下Redis的安装</h1><p>参考<br>[Linux下Redis的安装、配置及开机自启动-阿里云开发者社区 (aliyun.com)](<a href="https://developer.aliyun.com/article/789869#:~:text=2.5">https://developer.aliyun.com/article/789869#:~:text=2.5</a> Redis开机启动 1 2.5.1 在%2Fetc目录下新建redis目录 2 2.5.2 复制配置文件,2.5.3 复制启动脚本 4 2.5.4 执行自启命令 5 2.5.5 启动Redis)</p><p>（最标准）<a href="https://www.jianshu.com/p/bc84b2b71c1c">Linux下redis安装和部署 - 简书 (jianshu.com)</a></p><p>redis只要make就行 ，不需要install</p><p><a href="https://blog.csdn.net/qq_39715000/article/details/120696149">(60条消息) CentOS安装Redis及redis启动与关闭、配置（详细）_乞力马扎罗の黎明的博客-CSDN博客_centos redis</a></p><p><a href="https://blog.csdn.net/JacaCao/article/details/111595360">(93条消息) Redis如何查看服务状态、关闭和启动_查看redis状态_南风孤梦晓辰星的博客-CSDN博客</a></p><p>[(60条消息) centos7卸载安装redis-6.0.16教程_geekmice的博客-CSDN博客_centos7卸载redis](<a href="https://blog.csdn.net/greek7777/article/details/121787631#:~:text=%E5%8D%B8%E8%BD%BDredis">https://blog.csdn.net/greek7777/article/details/121787631#:~:text=卸载redis</a> 1 删除redis的安装目录，此处目录是 rm -rf %2Fusr%2Flocal%2Fredis 2 删除redis服务脚本，以6379实例为主，,%2Fetc%2Fredis%2F6349.conf 4 删除%2Fetc%2Fprofile中的redis_home%2C rm -rf %2Fetc%2Fprofile%2Fredis_home 5 再次验证redis是否存在)</p><p><a href="https://blog.csdn.net/lw305993897/article/details/92991210">(60条消息) centos 删除Redis_请叫我卫卫的博客-CSDN博客_centos彻底删除redis</a></p><p><a href="https://blog.csdn.net/qq_39387475/article/details/88605248">(60条消息) Linux下Redis的安装和使用_歪才的博客-CSDN博客_redis安装linux</a></p><p>（试过不得行）<a href="https://gblfy.blog.csdn.net/article/details/114371657">(60条消息) Redis-6.2.5 安装 Linux环境(单机)_gblfy的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/wcuuchina/article/details/86610045">(93条消息) linux redis-连接命令_linux连接redis_wcuuchina的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/bc84b2b71c1c">Linux下redis安装和部署 - 简书 (jianshu.com)</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修改配置</span><br><span class="line">vim /usr/local/redis/bin/redis.conf</span><br><span class="line"></span><br><span class="line">设置后台启动</span><br><span class="line"></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line">修改为：</span><br><span class="line"></span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">将<span class="built_in">bind</span> 127.0.0.1须改成 <span class="built_in">bind</span> 0.0.0.0，否则只能在本机访问</span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0 </span><br><span class="line"></span><br><span class="line">添加密码：</span><br><span class="line"></span><br><span class="line">取消requirepass yourpassword注释或直接添加密码，修改yourpassword为自已要设置的密码(假如我的密码是123456)：</span><br><span class="line"></span><br><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启动redis：</span><br><span class="line"><span class="built_in">cd</span>  /usr/local/redis</span><br><span class="line">./bin/redis-server ./bin/redis.conf</span><br><span class="line"></span><br><span class="line">查看进程:</span><br><span class="line">ps -ef|grep redis</span><br><span class="line"></span><br><span class="line">root     23867     1  0 15:27 ?        00:00:00 ./redis-server 0.0.0.0:6607</span><br><span class="line"></span><br><span class="line">杀进程可以 <span class="built_in">kill</span> -9 23867</span><br><span class="line"></span><br><span class="line">连接redis-cli （客户端）</span><br><span class="line">redis-cli -h hostname(ip) -p port（端口）</span><br><span class="line">例如 /usr/local/redis/bin/redis-cli -h 127.0.0.1 -p 6607</span><br><span class="line"></span><br><span class="line">关闭redis</span><br><span class="line">强行终止redis进程可能会导致redis持久化数据丢失。正确停止Redis的方式应该是向Redis发送SHUTDOWN命令，命令为：</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local/redis</span><br><span class="line">./bin/redis-cli shutdown</span><br><span class="line"></span><br><span class="line">强行终止redis</span><br><span class="line">pkill redis-server</span><br><span class="line"></span><br><span class="line">让redis开机自启</span><br><span class="line">vim /etc/rc.local</span><br><span class="line">//添加</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis-conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在GET、POST请求中，常见的几种传参格式.md</title>
      <link href="/2021/12/01/%E5%9C%A8GET%E3%80%81POST%E8%AF%B7%E6%B1%82%E4%B8%AD%EF%BC%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%A0%BC%E5%BC%8F-md/"/>
      <url>/2021/12/01/%E5%9C%A8GET%E3%80%81POST%E8%AF%B7%E6%B1%82%E4%B8%AD%EF%BC%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E4%BC%A0%E5%8F%82%E6%A0%BC%E5%BC%8F-md/</url>
      
        <content type="html"><![CDATA[<h2 id="在GET、POST请求中，常见的几种传参格式"><a href="#在GET、POST请求中，常见的几种传参格式" class="headerlink" title="在GET、POST请求中，常见的几种传参格式"></a>在GET、POST请求中，常见的几种传参格式</h2><p><a href="https://blog.csdn.net/me_never/article/details/101202679">http之GET请求的传递参数的方式_get请求传参-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/2331610">在GET、POST请求中，常见的几种传参格式-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://www.cnblogs.com/williamjie/p/9099940.html">浅谈HTTP中GET、POST用法以及它们的区别 - 割肉机 - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1710394">POST请求和GET请求如何传递和接收解析参数-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/sgx1825192/article/details/135730276">接口参数校验之路径变量：@PathVariable_因为pathvariable造成的服务端请求伪造的问题-CSDN博客</a></p><p>[路径参数（Path Parameters）和查询参数（Query Parameters）_path参数和query参数-CSDN博客](<a href="https://blog.csdn.net/z142536x/article/details/132322295#:~:text=%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0%EF%BC%88Path">https://blog.csdn.net/z142536x/article/details/132322295#:~:text=路径参数（Path</a> Parameters）：,- 传递方式：路径参数是通过URL的路径部分来传递的，通常以<code>%2F</code>分隔路径段，并使用占位符来表示参数的值。)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP中定义了以下几种请求方法：</span><br><span class="line"></span><br><span class="line">- GET方法；</span><br><span class="line">- POST方法；</span><br><span class="line">- PUT方法；</span><br><span class="line">- DELETE方法。</span><br><span class="line">- HEAD方法；</span><br><span class="line">- TRACE方法；</span><br><span class="line">- OPTIONS方法；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在GET、POST请求中，常见的几种传参格式</span><br><span class="line"></span><br><span class="line">一： 在GET请求中，常见的几种传参格式包括：</span><br><span class="line">1：查询字符串（Query String）：</span><br><span class="line">规则为：参数和 URI 之间用问号?隔开, 参数键值用等号=连接,然后参数之间用连接符&amp;拼接起来</span><br><span class="line"> 在URL中使用?符号将参数附加到URL末尾，多个参数之间使用&amp;符号分隔。例如：</span><br><span class="line"></span><br><span class="line">GET /api/users?id=12345&amp;name=John</span><br><span class="line"></span><br><span class="line">2：RESTful风格的URL参数：</span><br><span class="line"> 将参数直接作为URL的一部分，一般用于表示资源的唯一标识符或路径参数。例如：</span><br><span class="line"></span><br><span class="line">GET /api/users/12345</span><br><span class="line"></span><br><span class="line">3：参数数组：</span><br><span class="line"> 使用相同的参数名，但允许多个值的情况。参数值使用[]表示。例如：</span><br><span class="line"></span><br><span class="line">GET /api/users?filter[]=admin&amp;filter[]=active</span><br><span class="line"></span><br><span class="line">4：参数对象（JSON格式）：</span><br><span class="line"> 将参数封装在一个对象中，然后将该对象作为查询字符串的值传递。例如：</span><br><span class="line"></span><br><span class="line">GET /api/users?filter=&#123;&quot;role&quot;:&quot;admin&quot;,&quot;status&quot;:&quot;active&quot;&#125;</span><br><span class="line"></span><br><span class="line">需要根据后端服务的要求来确定使用哪种传参格式。</span><br><span class="line"></span><br><span class="line">一般查询字符串是最常见和通用的传参方式，但某些情况下，使用RESTful风格的URL参数或参数数组或参数对象也是常见的做法。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二：在POST请求中，常见的几种传参格式</span><br><span class="line">在POST请求中，常见的几种传参格式包括：</span><br><span class="line"></span><br><span class="line">1：JSON 数据格式：</span><br><span class="line"> 在请求的数据体中使用 JSON 格式来传递参数。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">POST /api/users</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;John&quot;,</span><br><span class="line">  &quot;age&quot;: 25</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在上述示例中，请求的数据体是一个 JSON 对象，通过设置请求头部的 Content-Type 为 application/json，将参数以 JSON 格式发送给服务器。</span><br><span class="line"></span><br><span class="line">2：表单数据（application/x-www-form-urlencoded）格式：</span><br><span class="line"> 在请求的数据体中使用表单数据格式来传递参数。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">POST /api/users</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">name=John&amp;age=25</span><br><span class="line"></span><br><span class="line">请求的数据体是一个使用 &amp; 连接的键值对字符串，通过设置请求头部的 Content-Type 为 application/x-www-form-urlencoded，将参数以表单数据格式发送给服务器。</span><br><span class="line"></span><br><span class="line">3：文件上传（multipart/form-data）格式：</span><br><span class="line"> 在请求的数据体中使用多部分表单数据格式来传递参数，适用于文件上传等场景。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">POST /api/upload</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryABC123</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryABC123</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;example.jpg&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">[file content]</span><br><span class="line">------WebKitFormBoundaryABC123--</span><br><span class="line"></span><br><span class="line">请求的数据体是一个多部分表单数据，包含了一个文件字段 file，并设置了适当的请求头部 Content-Type 来指示数据格式。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GET、POST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GET、POST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地项目上传的到github</title>
      <link href="/2021/11/27/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%88%B0github/"/>
      <url>/2021/11/27/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<p>[Git的使用–如何将本地项目上传到Github（三种简单、方便的方法）（二）（详解） - 腾讯云开发者社区-腾讯云 (tencent.com)](<a href="https://cloud.tencent.com/developer/article/1504684#:~:text=%E6%80%BB%E7%BB%93%EF%BC%9A%E5%85%B6%E5%AE%9E%E5%8F%AA%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%B8%8B%E9%9D%A2%E5%87%A0%E6%AD%A5%E5%B0%B1%E8%83%BD%E6%8A%8A%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github">https://cloud.tencent.com/developer/article/1504684#:~:text=总结：其实只需要进行下面几步就能把本地项目上传到Github</a> 1、在本地创建一个版本库（即文件夹），通过git init把它变成Git仓库； 2、把项目复制到这个文件夹里面，再通过git,add.把项目添加到仓库； 3、再通过git commit -m “注释内容”把项目提交到仓库；)</p><p><a href="https://blog.csdn.net/dietime1943/article/details/85682688">(53条消息) 解决办法：git错误 error: failed to push some refs to ‘https://github.com/..._bluetata的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/good_good_xiu/article/details/118567249">(53条消息) git提交或克隆报错fatal: unable to access ‘https://github.com/tata20191003/autowrite.git/‘: Failed to connec_good_good_xiu的博客-CSDN博客_git unable to access</a></p><p><a href="https://blog.csdn.net/weixin_46872121/article/details/111404455">(52条消息) 解决办法：git错误 error: failed to push some refs to ‘https://github.com/..._学学学无止境的博客-CSDN博客</a></p><p><a href="https://www.runoob.com/note/56524">Git 常用命令大全 (runoob.com)</a></p><p><a href="https://blog.csdn.net/m0_45234510/article/details/120181503">(55条消息) Git克隆、拉取最新代码、上传代码到远程仓库_x-dragon8899的博客-CSDN博客_git 拉取最新代码</a></p><p><strong><code>将本地项目上传的到github</code></strong></p><p><code>打开一个文件</code></p><p><code>1、git bash  here</code></p><p><code>2、git lone https://github.com/hejixing/xiaxin-web.git</code></p><p><code>3、把代码放到克隆生成的xiaxin-web文件夹里面，注意如果代码里面有git文件要删掉，因为一个项目只能有一个.git文件</code></p><p><code>4、可以通过git status 查看状态</code></p><p><code>5.代码复制到文件夹后</code></p><p><code>6、git add .</code></p><p><code>7、git  commit -m &quot;项目备注&quot;</code></p><p><code>8、git push -u origin main</code></p><p><code>会报错fatal: unable to access &#39;https://github.com/xxx/autowrite.git/&#39;:</code><br><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></p><p>参考</p><p><a href="https://blog.csdn.net/good_good_xiu/article/details/118567249">(55条消息) git提交或克隆报错fatal: unable to access ‘https://github.com/tata20191003/autowrite.git/‘: Failed to connec_good_good_xiu的博客-CSDN博客_git unable to access</a></p><p><code>9、</code></p><p><code>//取消http代理</code><br><code>git config --global --unset http.proxy</code><br><code>//取消https代理</code><br><code>git config --global --unset https.proxy</code></p><p><code>10、git push -u origin main  ，这个命令不成功的话 可以加个-f 强制推送 git push -u  -f origin main</code></p><p><code>**注意gitpush上去的文件不能大于100M，如果大于会报错**</code></p><p>11、<strong>git fetch –all  &#x2F; git pull origin master</strong></p><p><a href="https://blog.csdn.net/m0_45234510/article/details/120181503">(55条消息) Git克隆、拉取最新代码、上传代码到远程仓库_x-dragon8899的博客-CSDN博客_git 拉取最新代码</a></p><p><code>如果出现</code></p><p><code>unable to access &#39;https://github.com/hejixing/xiaxin.git/&#39;: Failed to connect to github.com port 443 after 21035 ms: Timed out</code></p><p><code>即拉取超时</code></p><p><code>则设置如果还超时，可以设置超时参数：</code></p><p><code>git config --global http.lowSpeedLimit 0</code></p><p><code>git config --global http.lowSpeedTime 999999</code></p><p><code>方法1：可以直接用命令行试，不要使用代理。如git clone [https://github.com/xxx/yyy](https://link.zhihu.com/?target=https%3A//github.com/xxx/yyy)，观察是否还是报timeout。</code></p><p><code>方法2：如果还超时，可以设置超时参数：git config --global http.lowSpeedLimit 0 和 git config --global http.lowSpeedTime 999999。方法3：使用github加速网站 [https://gitclone.com](https://link.zhihu.com/?target=https%3A//gitclone.com) ,用命令行： git clone https://**[http://gitclone.com/](https://link.zhihu.com/?target=http%3A//gitclone.com/)**[http://github.com/xxx/yyy](https://link.zhihu.com/?target=http%3A//github.com/xxx/yyy)</code></p><p><code>最后完成拉取代码</code></p><hr><p>关于git 已提交未push的情况</p><p><a href="https://blog.csdn.net/zhang_980/article/details/102819183">(55条消息) IDEA git 撤回commit(已提交未push)方法 回滚方法_ZHANG_980的博客-CSDN博客_idea git已提交未push回滚</a></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安裝nvm-nodejs切换版本</title>
      <link href="/2021/11/27/%E5%AE%89%E8%A3%9Dnvm-nodejs%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC/"/>
      <url>/2021/11/27/%E5%AE%89%E8%A3%9Dnvm-nodejs%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><strong>nodejs切换版本和安装 pnpm</strong></p><p><a href="https://blog.csdn.net/u010616713/article/details/106836524">(82条消息) node.js安装，查看node.js版本号，查看npm版本号_node 版本号_职场爱学习的博客-CSDN博客</a></p><p>查看node.js版本号 ： node -v</p><p>查看npm版本号 : npm -v</p><p>管理工具<strong>nvm</strong>github地址：<a href="https://github.com/coreybutler/nvm-windows/releases">Releases · coreybutler&#x2F;nvm-windows (github.com)</a></p><p>参考链接：<a href="https://www.jianshu.com/p/e22349233b18">nodejs 版本切换（windows版） - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/a3882e9916e3">使用nvm实现多版本node自由切换 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/hanxiaosao/article/details/113964644">(82条消息) nvm安装 切换Node版本 保姆级教程_nvm转node_老实敦厚的小骚的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/l_ymttt/article/details/119598032">(82条消息) nvm安装使用及卸载_卸载nvm_『荼』的博客-CSDN博客</a></p><p><a href="https://www.dgrt.cn/a/1170936.html?action=onClick">nvm （node版本管理工具）安装的详细步骤，并解决安装过程中遇到的问题 (dgrt.cn)</a></p><p><a href="https://juejin.cn/post/7143215573378269198">快速掌握pnpm使用命令和实现原理 - 掘金 (juejin.cn)</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、先卸载原先的node</span><br><span class="line">按健win+R弹出窗口，键盘输入cmd,然后敲回车。然后进入命令控制行窗口</span><br><span class="line">输入 node -v 查看版本  v14.16.1</span><br><span class="line">输入 npm -v 查看版本  8.1.3</span><br><span class="line">输入 where node  D:\Program Files\nodejs\node.exe</span><br><span class="line">删除掉路径 D:\Program Files\nodejs\中的所有文件</span><br><span class="line">2、从官网下载安装包 https://github.com/coreybutler/nvm-windows/releases，下载红框里面的那个</span><br><span class="line">nvm-setup.exe 和 nvm-setup.zip都一样，里面放的都是安装的exe文件</span><br><span class="line">下载完成后是一个压缩包，解压之后双击安装。</span><br><span class="line">最好不要装在c盘，也不要有空格路径其它特殊字符，不然切换会出错</span><br><span class="line">在下面这个界面中是nvm的安装位置，D:\Java\nvm\nvm尽量安装到清晰容易找到的路径，以便后续修改内容，然后点击next下一步。</span><br><span class="line">这个界面是node的安装位置，D:\Java\nvm\nodejs在这个界面里面推荐跟我路径一样，当然可以按照自己喜好来，然后点击next下一步。</span><br><span class="line">点击install 后就会进行安装，安装完成，点击Finish即可。</span><br><span class="line">安装成功后 </span><br><span class="line">环境变量那边会出现</span><br><span class="line">NVM_HOME D:\Java\nvm\nvm</span><br><span class="line">NVM_SYMLINK  D:\Java\nvm\nodejs</span><br><span class="line">检验</span><br><span class="line">安装完成后，用Win+R打开CMD，可以通过nvm -v命令来检验一下是否安装成功。</span><br><span class="line">更改settings.txt</span><br><span class="line">因为后面需要通过nvm来安装不同版本的node，而默认的安装源速度较慢，所以可以通过更改settings.txt的形式来调整源地址，提高安装速度。</span><br><span class="line">在nvm的安装目录里面找到settings.txt文件，双击打开。</span><br><span class="line">打开文件，在最后面添加上下面的源地址：</span><br><span class="line">注意要隔一行</span><br><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br><span class="line">更改完成保存即可。</span><br><span class="line">node_mirror是更改nvm下载node时的镜像，这里是设置为淘宝镜像，npm_mirror是更改npm下载依赖包的镜像，也是修改为了淘宝镜像。</span><br><span class="line">淘宝镜像已经换成了新的了，所以需改为</span><br><span class="line">node_mirror: https://npmmirror.com/mirrors/node/</span><br><span class="line">npm_mirror: https://npmmirror.com/mirrors/npm/</span><br><span class="line">注意</span><br><span class="line">需要注意的是，尽量把nvm安装到盘符的根目录，这样就不会在切换版本的时候因为nvm上一层目录存在特殊字符或者空格导致切换node版本失败。</span><br><span class="line"></span><br><span class="line">例如，将nvm安装到了D盘下的Program Files (x86)这个目录里面，最终形成的目录地址为:D:\Program Files (x86)\nvm，结果因为Program Files (x86)这个名称里面包含空格，结果导致切换node版本时发生了报错。最终没有办法只能卸载nvm重新安装一遍，将安装地址变为了D:\nvm，才解决问题。</span><br><span class="line"></span><br><span class="line">总结</span><br><span class="line">Program Files (x86)\nvm，结果因为Program Files (x86)这个名称里面包含空格，结果导致切换node版本时发生了报错。最终没有办法只能卸载nvm重新安装一遍，将安装地址变为了D:\nvm`，才解决问题。</span><br><span class="line"></span><br><span class="line">3、卸载NVM</span><br><span class="line">     1.先删除你当初所安装的nvm的文件夹即可。</span><br><span class="line">     2.文件夹内右键 此电脑 -- 点击属性 -- 找到高级系统设置 -- 环境变量。</span><br><span class="line">     3.删除用户变量 和 系统变量中名为 NVM_HOME 和 NVM_SYMLINK 两个变量。其他的不要改。</span><br><span class="line">     4.用户变量和系统变量中path中的 %NVM_HOME%;%NVM_SYMLINK% 两个属性，其他的不要改。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看用nvm安装下来的npm的安装路径在哪</span><br><span class="line">C:\Users\Administrator&gt;npm config get cache</span><br><span class="line">D:\Program Files\nodejs\node_cache</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;npm config get prefix</span><br><span class="line">D:\Program Files\nodejs\node_global</span><br><span class="line"></span><br><span class="line">重新设置 npm 下载的路径</span><br><span class="line">C:\Users\Administrator&gt;npm  config set prefix &quot;D:\Java\nvm\nodejs\node_global&quot;</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;npm  config set cache &quot;D:\Java\nvm\nodejs\node_cache&quot;</span><br><span class="line"></span><br><span class="line">不然到时候我们用nvm安装的node，npm版本的一些产生的缓存不在我们的D:\Java\nvm\nodejs文件里，导致文件乱掉，最好统一在一个文件里面</span><br><span class="line"></span><br><span class="line">访问pnpm -v 会报错没有这个命令</span><br><span class="line">是因为他们识别到这个D:\Java\nvm\nodejs\node_global的环境变量</span><br><span class="line">我们需要配置环境变量 </span><br><span class="line">直接在path里面新建一个环境变量：D:\Java\nvm\nodejs\node_global</span><br><span class="line">即可</span><br><span class="line">再次输入 pnpm -v </span><br><span class="line">C:\Users\Administrator&gt;pnpm -v</span><br><span class="line">8.6.0</span><br><span class="line">成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm基本使用命令</span><br><span class="line">nvm list 列出已经安装的node版本，可以简写为nvm ls命令。</span><br><span class="line">nvm on 启用node版本管理。</span><br><span class="line">nvm off 禁用node版本，并不会卸载任何东西。</span><br><span class="line">nvm uninstall &lt;version&gt; 卸载指定版本的node。</span><br><span class="line">nvm install &lt;version&gt; 安装指定版本的node。  nvm install 14.16.1</span><br><span class="line">nvm use &lt;version&gt; 使用指定版本的node。   nvm use 14.16.1</span><br><span class="line">nvm list available 查看网络可以安装的版本</span><br><span class="line">nvm version 查看当前的版本</span><br><span class="line">nvm install 安装最新版本nvm</span><br><span class="line">nvm use &lt;version&gt; 切换使用指定的版本node</span><br><span class="line">nvm ls 列出所有版本</span><br><span class="line">nvm current 显示当前版本</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; 给不同的版本号添加别名</span><br><span class="line">nvm unalias &lt;name&gt; 删除已定义的别名</span><br><span class="line">nvm reinstall-packages &lt;version&gt; 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line">nvm on 打开nodejs控制</span><br><span class="line">nvm off 关闭nodejs控制</span><br><span class="line">nvm proxy 查看设置与代理</span><br><span class="line">nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line">nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span><br><span class="line">nvm uninstall &lt;version&gt; 卸载制定的版本</span><br><span class="line">nvm use [version] [arch] 切换制定的node版本和位数</span><br><span class="line">nvm root [path] 设置和查看root路径</span><br></pre></td></tr></table></figure><p><strong>pnpm 的安装</strong></p><p><a href="https://www.pnpm.cn/installation">安装 | pnpm中文文档 | pnpm中文网</a></p><p>输入 npm install -g pnpm</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;npm install -g pnpm</span><br><span class="line"></span><br><span class="line">added 1 package, and audited 2 packages in 4s</span><br><span class="line"></span><br><span class="line">1 package is looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br><span class="line">npm notice</span><br><span class="line">npm notice New major version of npm available! 8.19.2 -&gt; 9.6.7</span><br><span class="line">npm notice Changelog: https://github.com/npm/cli/releases/tag/v9.6.7</span><br><span class="line">npm notice Run npm install -g npm@9.6.7 to update!</span><br><span class="line">npm notice</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;pnpm -v</span><br><span class="line">8.6.0</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>pnpm -v</td><td>查看已安装的pnpm的版本</td></tr><tr><td>pnpm install xxx&#x2F;pnpm i xxx</td><td>安装依赖</td></tr><tr><td>pnpm run xxx</td><td>运行package.json中scripts脚本</td></tr><tr><td>pnpm config get registry</td><td>查看源</td></tr><tr><td>pnpm config set registry &lt;淘宝源或私服&gt;</td><td>切换源</td></tr><tr><td>pnpm add xxx</td><td>安装依赖包到 dependencies</td></tr><tr><td>pnpm add -D xxx</td><td>安装依赖包到devDependencies</td></tr><tr><td>pnpm update xxx&#x2F;pnpm up xxx</td><td>更新依赖包</td></tr><tr><td>pnpm remove xxx</td><td>删除依赖包</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7下安装mysql5.7</title>
      <link href="/2021/11/27/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85mysql5-7/"/>
      <url>/2021/11/27/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85mysql5-7/</url>
      
        <content type="html"><![CDATA[<p>CentOS7下安装mysql5.7</p><p>远程服务器</p><p>数据库重启（启动）、查看状态 、停止 命令</p><p>数据库重启（启动）：service mysqld restart</p><p>查看状态：service mysqld status</p><p>停止：service mysqld stop</p><p>参考<br><a href="https://www.jianshu.com/p/ef58fb333cd6">Centos7 完全卸载mysql - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/ic_xcc/article/details/121425926">(48条消息) CentOS7下安装mysql5.7（亲测完成）_ic_xcc的博客-CSDN博客_centos7 安装 mysql5.7</a></p><p><a href="https://blog.csdn.net/weixin_44798320/article/details/123444310">(60条消息) CentOS7 彻底卸载 MySQL5.7 （保姆级）_centos7 卸载mysql5.7_是 The Lin 呀的博客-CSDN博客</a></p><p>[腾讯云linux服务器安装mysql，并实现远程访问 - 腾讯云开发者社区-腾讯云 (tencent.com)](<a href="https://cloud.tencent.com/developer/article/1496725#:~:text=%E4%BA%8C%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85mysql">https://cloud.tencent.com/developer/article/1496725#:~:text=二，下载并安装mysql</a> 1 1，检查服务器是否已经安装过mysqlyum list installed mysql*出现下图所示，代表没有安装过 shell&gt; yum,2 2%2C安装mysql源 3 3%2C下载mysql5.7 rpm源 4 4安装下载好的rpm包 更多项目)</p><p><a href="https://wang11.blog.csdn.net/article/details/123730744?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-123730744-blog-127283093.pc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-123730744-blog-127283093.pc_relevant_recovery_v2&utm_relevant_index=1">(60条消息) 【云服务器配置安全组】- 关于mysql配置远程访问权限之后Navicat仍然不能远程连接的问题_1 + 1&#x3D;王的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhongyehai/p/10695334.html">mysql登录报错：ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES) - 向前走。 - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1915330">Centos7解决MySQL登录ERROR 1045 (28000): Access denied for user ‘‘@‘localhost‘ (using - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/adamlinsfz/article/details/84307097">(60条消息) Linux CentOS环境下软件到底安装在哪里?&#x2F;opt or &#x2F;usr or &#x2F;usr&#x2F;local_涛哥谈风控_的博客-CSDN博客_centos opt</a></p><p>[Linux下如何彻底删除（卸载）MySQL? - 少年Dev - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/yaodun55/p/16012919.html#:~:text=Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%EF%BC%88%E5%8D%B8%E8%BD%BD%EF%BC%89MySQL%3F">https://www.cnblogs.com/yaodun55/p/16012919.html#:~:text=Linux下如何彻底删除（卸载）MySQL%3F</a>  首先连接操作系统，切换到root用户。,如果是使用yum安装的mysql，使用如下命令进行卸载（不能确定使用何种方式安装的mysql情况下，按后续步骤一一进行处理即可）： 使用rpm -qa|grep mysql命令来查看rpm方式安装的mysql，如果查询结果不为空，需要将这些rpm卸载掉。)</p><p><a href="https://blog.csdn.net/weixin_42459563/article/details/80924634">(47条消息) docker部署mysql 实现远程连接_眼沉沉的博客-CSDN博客_docker 连接mysql</a></p><p><strong>一、首先如果之前有安装mysql</strong></p><p>参考<a href="https://www.jianshu.com/p/ef58fb333cd6">Centos7 完全卸载mysql - 简书 (jianshu.com)</a></p><p>1、需要先彻底卸载删除mysql</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql  或者 yum list installed | grep mysql</span><br></pre></td></tr></table></figure><p>mysql-community-common-5.7.41-1.el7.x86_64<br>mysql-community-libs-5.7.41-1.el7.x86_64<br>mysql57-community-release-el7-8.noarch<br>mysql-community-client-5.7.41-1.el7.x86_64<br>mysql-community-server-5.7.41-1.el7.x86_64</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">或者 yum list installed | grep mysql</span><br></pre></td></tr></table></figure><p>mysql-community-client.x86_64           5.7.41-1.el7                   @mysql57-community<br>mysql-community-common.x86_64           5.7.41-1.el7                   @mysql57-community<br>mysql-community-libs.x86_64             5.7.41-1.el7                   @mysql57-community<br>mysql-community-server.x86_64           5.7.41-1.el7                   @mysql57-community<br>mysql57-community-release.noarch        el7-8                          installed</p><p>2、开始卸载</p><p>yum remove mysql-community-common-5.7.41-1.el7.x86_64<br>yum remove  mysql-community-libs-5.7.41-1.el7.x86_64<br>yum remove  mysql57-community-release-el7-8.noarch<br>yum remove  mysql-community-client-5.7.41-1.el7.x86_64<br>yum remove  mysql-community-server-5.7.41-1.el7.x86_64</p><p>或者</p><p>yum remove mysql-community-client.x86_64</p><p>yum remove mysql-community-common.x86_64</p><p>yum remove mysql57-community-release.noarch</p><p>yum remove mysql-community-server.x86_64</p><p>yum remove mysql-community-libs.x86_64</p><p>3、查找mysql相关目录并删除</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">find <span class="operator">/</span> <span class="operator">-</span>name mysql</span><br></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;share&#x2F;mysql</p><p>&#x2F;var&#x2F;lib&#x2F;mysql<br>&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql</p><p><a href="https://blog.csdn.net/qq_35658349/article/details/106033702#:~:text=%E5%90%AB%E4%B9%89">(60条消息) rm -rf —— 删库跑路教程详解_Web Boy的博客-CSDN博客_rm -rf</a></p><p>4、删除相关目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/share/mysql</span><br><span class="line">rm -rf /var/lib/mysql</span><br><span class="line">rm -rf /var/lib/mysql/mysql</span><br></pre></td></tr></table></figure><p>5、删除&#x2F;etc&#x2F;my.cnf</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure><p>6、删除&#x2F;var&#x2F;log&#x2F;mysqld.log（如果不删除这个文件，会导致新安装的mysql无法生存新密码，导致无法登陆）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rm -rf /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><strong>二、安装mysql</strong></p><p><a href="https://blog.csdn.net/ic_xcc/article/details/121425926">(60条消息) CentOS7下安装mysql5.7（亲测完成）_ic_xcc的博客-CSDN博客_centos7 安装 mysql5.7</a></p><p>一、环境地址新建、清除旧安装包<br>进入到目录 &#x2F;usr&#x2F;local&#x2F; 中<br>cd &#x2F;usr&#x2F;local&#x2F;</p><p>创建目录 &#x2F;usr&#x2F;local&#x2F;tools，如果有则忽略<br>mkdir -p tools</p><p>创建 &#x2F;usr&#x2F;local&#x2F;mysql 目录，如果已存在则忽略</p><p>进入到目录 &#x2F;usr&#x2F;local&#x2F;tools 中<br>cd tools&#x2F;</p><p>查看系统中是否已安装 MySQL 服务<br>rpm -qa | grep mysql<br>或<br>yum list installed | grep mysql<br>如果已安装则删除 MySQL 及其依赖的包<br>yum -y remove mysql-libs.x86_64</p><p><strong>三、安装YUM</strong><br>下载 mysql57-community-release-el7-8.noarch.rpm 的 YUM 源</p><p>下载命令：<br><strong>wget <a href="http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm">http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm</a></strong></p><p>然后进行repo的安装：<br><strong>rpm -ivh mysql57-community-release-el7-8.noarch.rpm</strong></p><p><strong>四、使用yum命令即可完成安装</strong><br>注意：必须进入到 &#x2F;etc&#x2F;yum.repos.d&#x2F;目录后再执行以下脚本</p><p>安装命令：<br>yum install mysql-server</p><p>问题一：如果遇到安装不成功，提示：The GPG keys listed for the “MySQL 5.7 Community Server” repository are already installed but they are not correct for this package.<br>Check that the correct key URLs are configured for this repository.</p><p>解决：yum添加–nogpgcheck<br>原因<br>软件开发商在释出 RPM 文件时，会在其中添加数字签名，并释出用于验证数字签名的公钥。使用 rpm 安装软件时，rpm 会首先根据系统中已有的公钥去验证 RPM 文件的数字签名。gpg keys 就是公钥。</p><p>办法<br>yum安装的时候就会校验软件包是否是官方发布的。当然可以给yum添加–nogpgcheck来强制安装，如下命令即可</p><p><strong>yum install mysql-server –nogpgcheck</strong></p><p>所以在安装的时候会比对已有的公钥，发现不正确，报错了</p><ol start="2"><li>启动msyql：</li></ol><p><strong>systemctl start mysqld #启动MySQL</strong></p><p>获取安装时的临时密码（在第一次登录时就是用这个密码）：<br><strong>grep ‘temporary password’ &#x2F;var&#x2F;log&#x2F;mysqld.log</strong></p><p><strong>五、登录mysql</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">然后输入密码（刚刚获取的临时密码）</span><br></pre></td></tr></table></figure><p>问题二：登录报错ERROR 1045<br>倘若获取临时密码，登录报错ERROR 1045 (28000): Access denied for user ‘root’@‘localhost’ (using password: YES)</p><p>解决：修改my.cnf文件<br>首先，停止MySQL服务<br>service mysqld stop</p><p>既然是密码错误，那么就先跳过密码验证的步骤，打开my.cnf文件，更改不启动授权表<br>vim &#x2F;etc&#x2F;my.cnf</p><p>然后，搜索mysqld，找到[mysqld]，在最后加上添加一行语句：</p><p>&#x2F;mysqld(在vim编辑状态下直接输入该命令可搜索文本内容)。</p><p>注：windows下修改的是my.ini。</p><p>在 [mysqld] 底下添加语句：</p><p><strong>skip-grant-tables</strong></p><p>（注：skip-grant-tables：不启动grant-tables授权表，作为启动参数的作用：MYSQL服务器不加载权限判断，任何用户都能访问数据库）</p><p>这是用来跳过密码验证的，添加之后保存退出。</p><p>并且重新重启mysql</p><p>问题三：登录报错ERROR 1820 You must reset your password using ALTER USER statement before executing this statement.<br>输入上面得到的密码进入，用该密码登录后，必须马上修改新的密码，不然会报如上述错误：</p><p>解决：重新设置密码<br>如果你想要设置一个简单的测试密码的话，比如设置为123456，会提示这个错误，报错的意思就是你的密码不符合要求：<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements<br>这个其实与validate_password_policy的值有关。<br>validate_password_policy有以下取值：<br>默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。<br>有时候，只是为了自己测试，不想密码设置得那么复杂，譬如说，我只想设置root的密码为123456。<br>必须修改两个全局参数：</p><p>首先，修改validate_password_policy参数的值<br>mysql&gt; <strong>set global validate_password_policy&#x3D;0;</strong><br>Query OK, 0 rows affected (0.00 sec)</p><p>validate_password_length(密码长度)参数默认为8，我们修改为1<br>mysql&gt; <strong>set global validate_password_length&#x3D;1;</strong><br>Query OK, 0 rows affected (0.00 sec)</p><p>完成之后再次执行修改密码语句即可成功<br>mysql&gt; <strong>alter user ‘root‘@’localhost’ identified by ‘654321’;</strong><br>Query OK, 0 rows affected (0.00 sec)</p><p><a href="https://blog.csdn.net/young_0609/article/details/124674600">(60条消息) ERROR 1193 (HY000): Unknown system variable ‘validate_password_policy‘_error 1193 (hy000): unknown system variable ‘valid_GOD_WAR的博客-CSDN博客</a></p><p>0、查看mysql是否启动</p><p><strong>service mysqld status</strong></p><ol><li>重新启动MySQL服务</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld #启动MySQL</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ol><li>进入MySQL<br>出现密码输入时，不用输入直接按回车，就可以不用密码就能登录</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">密码直接回车</span><br></pre></td></tr></table></figure><ol><li>mysql连接成功，修改密码</li></ol><ul><li>5.1、看当前所有数据库：<strong>show databases;</strong></li><li>5.2、进入mysql数据库：<strong>use mysql;</strong></li><li>5.3、查看mysql数据库中所有的表：<strong>show tables;</strong></li></ul><p>5.4、查看user表下的角色和密码，<br>注意：5.7版本下的mysql数据库下已经没有password这个字段了，password字段改成了authentication_string</p><p><strong>select Host,User,authentication_string from user;</strong></p><p>说明： % 代表任意的客户端,可替换成具体IP地址。</p><ul><li>5.5、修改密码</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set authentication_string=&quot;Hjx350622&quot;,Host=&quot;%&quot; where User=&quot;root&quot;;</span><br></pre></td></tr></table></figure><p>密码修改完毕</p><p><strong>修改完密码还要进行这一步</strong></p><p><strong>根据个人需求,设置数据库用户在所有ip下以及在本地可访问,以下用root用户做演示</strong></p><p><strong>为避免麻烦，再次设置远程访问</strong></p><p>grant all privileges on <em>.</em> to root@”%” identified by “你的密码”;</p><p>grant all privileges on <em>.</em> to root@”localhost” identified by “你的密码”;</p><p>flush privileges;</p><p>回到vim &#x2F;etc&#x2F;my.cnf</p><p>将 内容skip-grant-tables 注释掉 然后重启mysql； flush privileges;</p><p>修改my.cnf，<strong>重新启动mysql服务器</strong>以使新设置生效。</p><p>这是免密码登录的去掉，这样就可以防止别人访问数据库。</p><p>[(60条消息) mysql设置用户密码过期时间_现实、太残忍的博客-CSDN博客_default_password_lifetime](<a href="https://blog.csdn.net/sumengnan/article/details/114098498#:~:text=%E8%AE%BE%E7%BD%AE%E6%9F%90%E7%94%A8%E6%88%B7%E7%9A%84">https://blog.csdn.net/sumengnan/article/details/114098498#:~:text=设置某用户的</a> 密码过期时间 1 %23密码 90 天过期： 2 ALTER,’ testuser ‘%40’ localhost ‘ PASSWORD EXPIRE DEFAULT%3B)</p><h1 id="六、navicat测试连接成功"><a href="#六、navicat测试连接成功" class="headerlink" title="六、navicat测试连接成功"></a>六、<a href="https://so.csdn.net/so/search?q=navicat&spm=1001.2101.3001.7020">navicat</a>测试连接成功</h1><ul><li>打开navicat配置服务器的主机、端口、用户名、密码（刚刚修改过的）测试链接成功</li><li>注意要去腾讯云安全组查看有没有开放3306端口</li><li>还有防火墙，是否有开3306端口</li><li>最后才连接成功</li></ul><p>防火墙设置<br>查看防火墙状态<br>systemctl status firewalld<br>开启防火墙<br>systemctl start firewalld<br>关闭防火墙<br>systemctl stop firewalld<br>重启防火墙<br>service firewalld start</p><p>若遇到无法开启 先用：<br>systemctl unmask firewalld.service<br>然后：<br>systemctl start firewalld.service<br>查询指定端口是否已开<br>firewall-cmd –query-port&#x3D;666&#x2F;tcp<br>1<br>开放端口保存<br>添加指定需要开放的端口：<br>firewall-cmd –add-port&#x3D;123&#x2F;tcp –permanent<br>重载入添加的端口：<br>firewall-cmd –reload<br>查询指定端口是否开启成功：<br>firewall-cmd –query-port&#x3D;123&#x2F;tcp<br>移除端口<br>移除指定端口：<br>firewall-cmd –permanent –remove-port&#x3D;123&#x2F;tcp<br>查询开放的防火墙列表<br>firewall-cmd –zone&#x3D;public –list-ports<br>若开放了端口还是连接不上你想要的端口，<br>注意：有可能是你阿里云自带安全组策略限制的原因，这种情况需要在阿里云官方云服务器管理控制台手动开放。</p><p>注意：如果电脑重启了，查看一下防火墙是否已经打开，没有打开访问不到mysql ，打开之后并且有设置端口，安全组也设置端口后就可以访问</p><p><a href="https://www.cnblogs.com/zhangxiaoxia/p/13043508.html">MySQL错误：Can’t connect to MySQL server (10060) 解决方案 - Felix-Zhang - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7  安装jdk1.8</title>
      <link href="/2021/11/27/centos7-%E5%AE%89%E8%A3%85jdk1-8/"/>
      <url>/2021/11/27/centos7-%E5%AE%89%E8%A3%85jdk1-8/</url>
      
        <content type="html"><![CDATA[<h1 id="centos7-安装jdk"><a href="#centos7-安装jdk" class="headerlink" title="centos7  安装jdk"></a>centos7  安装jdk</h1><p>java -version 查看版本</p><p>java-verbose 查看当前系统jdk的安装位置</p><p>参考</p><p><a href="https://blog.csdn.net/m0_37482190/article/details/89189553">(60条消息) Linux系统下解决：tar (child):XXX: Cannot open: No such file or directory问题_鲲志说的博客-CSDN博客_tar (child): jdk-8u202-linux-x64.tar.gz: cannot op</a></p><p><a href="https://blog.csdn.net/weixin_44981329/article/details/122983924">(60条消息) Linux 查找JDK的安装路径_linux查看jdk安装目录_侠级霸秀的博客-CSDN博客</a></p><p><a href="https://gblfy.blog.csdn.net/article/details/103435776">(60条消息) jdk 安装 linux环境_gblfy的博客-CSDN博客_企业微信linux 配置jdk</a></p><p>可用：<a href="https://blog.csdn.net/weixin_47025166/article/details/126108300?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126108300-blog-129103564.pc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-126108300-blog-129103564.pc_relevant_recovery_v2&utm_relevant_index=1">(60条消息) Linux环境下JDK1.8的安装（保姆级教程）_啊陈晓的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装nginx</title>
      <link href="/2021/11/27/centos7-%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2021/11/27/centos7-%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<p>centos7 安装nginx</p><p>参考</p><p><a href="https://blog.csdn.net/OMGcome/article/details/123856491">(60条消息) 【Nginx】彻底卸载Nginx以及安装Nginx的详细教程_nginx卸载_归~海的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/lvxinchun/article/details/107589759">(60条消息) CentOS-7下安装Nginx的详细过程_泗水长流的博客-CSDN博客_centos 7 安装 nginx</a></p><p><a href="https://gblfy.blog.csdn.net/article/details/119536779">(60条消息) nginx 1.9.9 Linux 环境安装_gblfy的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/9f2c162ac77c">Linux下安装Nginx - 简书 (jianshu.com)</a></p><p>在相应目录下执行  wget <a href="http://nginx.org/download/nginx-1.12.2.tar.gz">http://nginx.org/download/nginx-1.12.2.tar.gz</a>.</p><p><a href="https://blog.csdn.net/qq_34083182/article/details/112972129">(60条消息) 解压文件 tar (child):  ：无法 open: 没有那个文件或目录 报错 解决办法_Offset_Ht的博客-CSDN博客_tar(child)无法open</a></p><p>在解压文件的时候，如果解压不了直接用绝对路径，</p><p>例如放在&#x2F;opt&#x2F;nginx&#x2F;下的nginx-1.12.2.tar.gz</p><p>使用tar -zxvf linux-nginx-1.12.2.tar.gz 没法成功解压</p><p>但是加了绝对路径后就可以解压  tar -zxvf  &#x2F;opt&#x2F;nginx&#x2F;nginx-1.12.2.tar.gz  -C &#x2F;usr&#x2F;lib&#x2F;nginx</p><p>这里的-C &#x2F;usr&#x2F;lib&#x2F;nginx 是指解压到&#x2F;usr&#x2F;lib&#x2F;nginx中</p><p>则会在对应目录下下载下压缩包来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxvf linux-nginx-1.12.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.12.2/</span><br><span class="line"><span class="comment"># 执行配置</span></span><br><span class="line">./configure</span><br><span class="line"><span class="comment"># 编译安装(默认安装在/usr/local/nginx)</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>nginx命令</p><p>cd  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</p><p>启动 nginx:.&#x2F;nginx -s start<br>优雅停止 nginx:.&#x2F;nginx -s quit<br>快速停止 nginx:.&#x2F;nginx -s stop<br>重启nginx:.&#x2F;nginx -s reload</p><p>确定服务器的安全组开放80端口，确保服务器防火墙80端口有开放</p><p>访问服务器ip即可端口默认80</p><p><a href="http://1.12.48.115/">Welcome to nginx!</a></p><p>更换nginx.conf 配置的时候，需要先</p><p>ps -ef|grep nginx</p><p>杀掉进程就剩一个</p><p>kill -9 进程号</p><p>然后先试试&#x2F;usr&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload 重启，如果不行在进行重新指定nginx.conf 配置路径</p><p>重新指定nginx.conf 配置路径</p><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p><p>&#x2F;usr&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</p><p>[(60条消息) 解决 重启nginx: <a href="https://blog.csdn.net/sqL520lT/article/details/111991381">alert] kill(20367, 1) failed (3: No such process)的原因？_是汤圆丫的博客-CSDN博客</a></p><p>[(60条消息) 解决 重启nginx: <a href="https://blog.csdn.net/qq_45498613/article/details/123138997">alert] kill(20367, 1) failed (3: No such process)_切韵的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/zhangzehai2234/article/details/82872518">(60条消息) linux系统更新profile文件立即生效_有梦想的攻城狮的博客-CSDN博客_linux刷新profile的命令</a></p><p><a href="https://blog.csdn.net/qq_45339157/article/details/120018516">(60条消息) centos查看指定进程_py_helloWorld的博客-CSDN博客_centos查找特定进程</a></p><p>查看系统日志：</p><p># tail -f &#x2F;var&#x2F;log&#x2F;messages</p><p><a href="https://zhuanlan.zhihu.com/p/359882615">Java程序被Linux给kill掉排查过程 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/qq_40213824/article/details/124307365">(60条消息) 给自己的jar包运行时分配内存大小_jar包启动设置内存大小_学习一门语言好难哦的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx学习</title>
      <link href="/2021/11/27/nginx%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/27/nginx%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>关于nginx文件下载和路径问题</p><p>C:\Windows\System32\drivers\etc\hosts</p><p>内容<strong>127.0.0.1 star.com</strong></p><p>通过修改本地 host 文件，将 127.0.0.1 star.com映射到 127.0.0.1</p><p>Nginx中文文档 <a href="https://blog.redis.com.cn/doc/">https://blog.redis.com.cn/doc/</a></p><p>将路径切换到nginx根目录下   cmd</p><p>nginx 启动 start nginx</p><p>nginx 停止 nginx -s stop</p><p>nginx 重启 nginx s- reload</p><p><a href="https://www.runoob.com/w3cnote/nginx-setup-intro.html">Nginx 配置详解 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://www.cnblogs.com/tangy1/p/15069909.html">nginx详细配置 - tangy1 - 博客园 (cnblogs.com)</a></p><p>[详解 nginx location ~ .*.(js|css)?$ 什么意思？ - 费元星的博客 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/feiyuanxing/p/4668818.html#:~:text=^">https://www.cnblogs.com/feiyuanxing/p/4668818.html#:~:text=^</a>~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。,nginx不对url做编码，因此请求为%2Fstatic%2F20%%2Faa，可以被规则^~ %2Fstatic%2F %2Faa匹配到（注意是空格）。)</p><p>[Nginx反向代理中proxy_set_header参数说明 - 散尽浮华 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/kevingrace/p/8269955.html#:~:text=Nginx,proxy_set_header%EF%BC%9A">https://www.cnblogs.com/kevingrace/p/8269955.html#:~:text=Nginx,proxy_set_header：</a> 即允许重新定义或添加字段传递给代理服务器的请求头。)</p><p>[nginx的资源分离及rewrite重写 - nice_xm - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/xiaolang666/p/13607488.html#:~:text=%E4%B8%89%E3%80%81nginx%E7%9A%84Rewrite%E9%87%8D%E5%86%99">https://www.cnblogs.com/xiaolang666/p/13607488.html#:~:text=三、nginx的Rewrite重写</a> 1 1.什么是rewrite Rewrite主要实现url地址重写，以及重定向，就是把传入<code>web</code>的请求重定向到其他<code>url</code>的过程。 2 2.Rewrite使用场景 1.地址跳转，用户访问<a href="http://www.baidu.com这个url时,将其定向至一个新的域名mobile.baidu.com/">www.baidu.com这个URL时，将其定向至一个新的域名mobile.baidu.com</a> 2.协议跳转，用户通过http协议请求网站时，将其重新跳转至https协议方式,4.rewrite的flag标记 … 5 5.last和break的区别 … 6 6.redirect和permanent的区别 )</p><p><a href="https://www.jianshu.com/p/93eb8be04c61">Nginx中ROOT 和alias的区别 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/ef46fd342a08">windows下nginx配置静态文件 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/dw1414739804/article/details/106614986">(51条消息) nginx访问报错 (123: The filename, directory name, or volume label syntax is incorrect)_默默无闻的薰衣草的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/gmaaa123/article/details/123704793">(51条消息) Nginx访问报错 (123: The filename, directory name, or volume label syntax is incorrect)_风行無痕的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/jonathan_joestar/article/details/119800826">(51条消息) nginx-1.20.1 conf 注意 ， windows 底下 路径要写 左斜杠， 像这样_Jonathan Star的博客-CSDN博客_nginx 左斜杠</a></p><p>[Linux下启动和关闭nginx命令 - 星云留水 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/aimei/p/12859102.html#:~:text=3">https://www.cnblogs.com/aimei/p/12859102.html#:~:text=3</a> 启动nginx 命令：.%2Fnginx 出现下面启动成功 4 查看nginx 的状态 ps,上面的)</p><p><a href="https://zhuanlan.zhihu.com/p/56349043">4:Nginx服务启动、停止、重启 - 知乎 (zhihu.com)</a></p><h3 id="Nginx中ROOT-和alias的区别"><a href="#Nginx中ROOT-和alias的区别" class="headerlink" title="Nginx中ROOT 和alias的区别"></a>Nginx中ROOT 和alias的区别</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。</span><br><span class="line">root的处理结果是：root路径＋location路径</span><br><span class="line">alias的处理结果是：使用alias路径替换location路径</span><br><span class="line">alias是一个目录别名的定义，root则是最上层目录的定义。</span><br><span class="line">还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。。。而root则可有可无~~</span><br><span class="line">ROOT 实例</span><br><span class="line"></span><br><span class="line">location ^~ /t/ &#123;</span><br><span class="line">     root /www/root/html/;</span><br><span class="line">&#125;</span><br><span class="line">如果一个请求的URI是/t/a.html时</span><br><span class="line">web服务器将会返回服务器上的/www/root/html/t/a.html的文件。</span><br><span class="line">alias实例</span><br><span class="line"></span><br><span class="line">location ^~ /t/ &#123;</span><br><span class="line"> alias /www/root/html/new_t/;</span><br><span class="line">&#125;</span><br><span class="line">如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的/www/root/html/new_t/a.html的文件。注意这里是new_t，因为alias会把location后面配置的路径丢弃掉，把当前匹配到的目录指向到指定的目录。</span><br><span class="line"></span><br><span class="line">注意</span><br><span class="line">使用alias时，目录名后面一定要加&quot;/&quot;。</span><br><span class="line">alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。</span><br><span class="line">alias只能位于location块中。（root可以不放在location中）</span><br></pre></td></tr></table></figure><h3 id="详解-nginx-location-js-css-什么意思？"><a href="#详解-nginx-location-js-css-什么意思？" class="headerlink" title="详解 nginx location ~ .*.(js|css)?$ 什么意思？"></a>详解 nginx location ~ .*.(js|css)?$ 什么意思？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">详解 nginx location ~ .*\.(js|css)?$ 什么意思？</span><br><span class="line">语法规则： location [=|~|~*|^~] /uri/ &#123; … &#125;</span><br><span class="line">= 开头表示精确匹配</span><br><span class="line"></span><br><span class="line">^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。</span><br><span class="line"></span><br><span class="line">~ 开头表示区分大小写的正则匹配</span><br><span class="line"></span><br><span class="line">~*  开头表示不区分大小写的正则匹配</span><br><span class="line"></span><br><span class="line">!~和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则</span><br><span class="line"></span><br><span class="line">/ 通用匹配，任何请求都会匹配到。</span><br><span class="line"></span><br><span class="line">多个location配置的情况下匹配顺序为（参考资料而来，还未实际验证，试试就知道了，不必拘泥，仅供参考）：</span><br><span class="line"></span><br><span class="line">首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</span><br><span class="line"></span><br><span class="line">例子，有如下匹配规则：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location = / &#123;精确匹配，必须是127.0.0.1/</span><br><span class="line"></span><br><span class="line">#规则A</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /login &#123;精确匹配，必须是127.0.0.1/login</span><br><span class="line"></span><br><span class="line">#规则B</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /static/ &#123;非精确匹配，并且不区分大小写，比如127.0.0.1/static/js.</span><br><span class="line"></span><br><span class="line">#规则C</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;区分大小写，以gif,jpg,js结尾</span><br><span class="line"></span><br><span class="line">#规则D</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.png$ &#123;不区分大小写，匹配.png结尾的</span><br><span class="line"></span><br><span class="line">#规则E</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location !~ \.xhtml$ &#123;区分大小写，匹配不已.xhtml结尾的</span><br><span class="line"></span><br><span class="line">#规则F</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location !~* \.xhtml$ &#123;</span><br><span class="line"></span><br><span class="line">#规则G</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;什么都可以</span><br><span class="line"></span><br><span class="line">#规则H</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">那么产生的效果如下：</span><br><span class="line"></span><br><span class="line">访问根目录/， 比如http://localhost/ 将匹配规则A</span><br><span class="line"></span><br><span class="line">访问 http://localhost/login 将匹配规则B，http://localhost/register 则匹配规则H</span><br><span class="line"></span><br><span class="line">访问 http://localhost/static/a.html 将匹配规则C</span><br><span class="line"></span><br><span class="line">访问 http://localhost/a.gif, http://localhost/b.jpg 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用， 而 http://localhost/static/c.png 则优先匹配到 规则C</span><br><span class="line"></span><br><span class="line">访问 http://localhost/a.PNG 则匹配规则E， 而不会匹配规则D，因为规则E不区分大小写。</span><br><span class="line"></span><br><span class="line">访问 http://localhost/a.xhtml 不会匹配规则F和规则G，http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。</span><br><span class="line"></span><br><span class="line">访问 http://localhost/category/id/1111 则最终匹配到规则H，因为以上规则都不匹配，这个时候应该是nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理服务器存在。</span><br><span class="line"></span><br><span class="line">所以实际使用中，个人觉得至少有三个匹配规则定义，如下：</span><br><span class="line">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="line"></span><br><span class="line"># 第一个必选规则</span><br><span class="line"></span><br><span class="line">location = / &#123;</span><br><span class="line"></span><br><span class="line">proxy_pass http://tomcat:8080/index</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span><br><span class="line"></span><br><span class="line"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span><br><span class="line"></span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line"></span><br><span class="line">root /webroot/static/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line"></span><br><span class="line">root /webroot/res/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="line"></span><br><span class="line">#非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class="line"></span><br><span class="line">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">proxy_pass http://tomcat:8080/</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span><br><span class="line"></span><br><span class="line">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="line"></span><br><span class="line"># 第一个必选规则</span><br><span class="line"></span><br><span class="line">location = / &#123;</span><br><span class="line"></span><br><span class="line">proxy_pass http://tomcat:8080/index</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span><br><span class="line"></span><br><span class="line"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span><br><span class="line"></span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line"></span><br><span class="line">root /webroot/static/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line"></span><br><span class="line">root /webroot/res/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="line"></span><br><span class="line">#非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class="line"></span><br><span class="line">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">proxy_pass http://tomcat:8080/</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">未试验过的其他信息：</span><br><span class="line">三、ReWrite语法 </span><br><span class="line">last – 基本上都用这个Flag。 </span><br><span class="line">break – 中止Rewirte，不在继续匹配 </span><br><span class="line">redirect – 返回临时重定向的HTTP状态302 </span><br><span class="line">permanent – 返回永久重定向的HTTP状态301 </span><br><span class="line">1、下面是可以用来判断的表达式： </span><br><span class="line">-f和!-f用来判断是否存在文件 </span><br><span class="line">-d和!-d用来判断是否存在目录 </span><br><span class="line">-e和!-e用来判断是否存在文件或目录 </span><br><span class="line">-x和!-x用来判断文件是否可执行 </span><br><span class="line">2、下面是可以用作判断的全局变量 </span><br><span class="line">例：http://localhost:88/test1/test2/test.php </span><br><span class="line">$host：localhost </span><br><span class="line">$server_port：88 </span><br><span class="line">$request_uri：http://localhost:88/test1/test2/test.php </span><br><span class="line">$document_uri：/test1/test2/test.php </span><br><span class="line">$document_root：D:\nginx/html </span><br><span class="line">$request_filename：D:\nginx/html/test1/test2/test.php </span><br><span class="line">四、Redirect语法 </span><br><span class="line">server &#123; </span><br><span class="line">listen 80; </span><br><span class="line">server_name start.igrow.cn; </span><br><span class="line">index index.html index.php; </span><br><span class="line">root html; </span><br><span class="line">if ($http_host !~ “^star\.igrow\.cn$&amp;quot &#123; </span><br><span class="line">rewrite ^(.*) http://star.igrow.cn$1 redirect; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">五、防盗链location ~* \.(gif|jpg|swf)$ &#123; </span><br><span class="line">valid_referers none blocked start.igrow.cn sta.igrow.cn; </span><br><span class="line">if ($invalid_referer) &#123; </span><br><span class="line">rewrite ^/ http://$host/logo.png; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">六、根据文件类型设置过期时间 </span><br><span class="line">location ~* \.(js|css|jpg|jpeg|gif|png|swf)$ &#123; </span><br><span class="line">if (-f $request_filename) &#123; </span><br><span class="line">expires 1h; </span><br><span class="line">break; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">七、禁止访问某个目录 </span><br><span class="line">location ~* \.(txt|doc)$&#123; </span><br><span class="line">root /data/www/wwwroot/linuxtone/test; </span><br><span class="line">deny all; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">++ 一些可用的全局变量 </span><br><span class="line">$args </span><br><span class="line">$content_length </span><br><span class="line">$content_type </span><br><span class="line">$document_root </span><br><span class="line">$document_uri </span><br><span class="line">$host </span><br><span class="line">$http_user_agent </span><br><span class="line">$http_cookie </span><br><span class="line">$limit_rate </span><br><span class="line">$request_body_file </span><br><span class="line">$request_method </span><br><span class="line">$remote_addr </span><br><span class="line">$remote_port </span><br><span class="line">$remote_user </span><br><span class="line">$request_filename </span><br><span class="line">$request_uri </span><br><span class="line">$query_string </span><br><span class="line">$scheme </span><br><span class="line">$server_protocol </span><br><span class="line">$server_addr </span><br><span class="line">$server_name </span><br><span class="line">$server_port </span><br><span class="line">$uri</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linuxchmod命令用法详解-chmod修改目录权限</title>
      <link href="/2021/11/27/Linuxchmod%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3-chmod%E4%BF%AE%E6%94%B9%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90/"/>
      <url>/2021/11/27/Linuxchmod%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3-chmod%E4%BF%AE%E6%94%B9%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="chmod命令用法详解-chmod修改目录权限"><a href="#chmod命令用法详解-chmod修改目录权限" class="headerlink" title="chmod命令用法详解-chmod修改目录权限"></a>chmod命令用法详解-chmod修改目录权限</h1><p>参考</p><p><a href="https://www.cnblogs.com/linuxandy/p/10881918.html">chmod命令用法详解-chmod修改目录权限 - Andy-Law - 博客园 (cnblogs.com)</a></p><p><a href="https://www.runoob.com/linux/linux-comm-chmod.html">Linux chmod 命令 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://blog.csdn.net/u012106306/article/details/80436911">linux下chmod +x的意思？为什么要进行chmod +x-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LINUX下不同的文件类型有不同的颜色，这里</span><br><span class="line"></span><br><span class="line">蓝色表示目录;</span><br><span class="line">绿色表示可执行文件，可执行的程序;</span><br><span class="line">红色表示压缩文件或包文件;</span><br><span class="line">浅蓝色表示链接文件;</span><br><span class="line">灰色表示其它文件;</span><br></pre></td></tr></table></figure><h3 id="chmod用法："><a href="#chmod用法：" class="headerlink" title="chmod用法："></a>chmod用法：</h3><p><strong>用来修改某个目录或文件的访问权限。</strong></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [-cfvR] [--help] [--version] [who] [+ | - | =] [mode] 文件名</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /home/linux</span><br></pre></td></tr></table></figure><p>权限范围的表示法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u User，即文件或目录的拥有者；``g Group，即文件或目录的所属群组；``o Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；``a All，即全部的用户，包含拥有者，所属群组以及其他用户；``r 读取权限，数字代号为“4”;``w 写入权限，数字代号为“2”；``x 执行或切换权限，数字代号为“1”；``- 不具任何权限，数字代号为“0”；``s 特殊功能说明：变更文件或目录的权限。</span><br></pre></td></tr></table></figure><p>命令中各选项的含义为：</p><p>-c : 若该档案权限确实已经更改，才显示其更改动作</p><p>-f : 若该档案权限无法被更改也不要显示错误讯息</p><p>-v : 显示权限变更的详细资料</p><p>-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)</p><p>–help : 显示辅助说明</p><p>–version : 显示版本</p><p>操作对象who可是下述字母中的任一个或者它们的组合：</p><p>u 表示“用户（user）”，即文件或目录的所有者。</p><p>g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。</p><p>o 表示“其他（others）用户”。</p><p>a 表示“所有（all）用户”。它是系统默认值。</p><p>操作符号可以是：</p><ul><li>添加某个权限。</li></ul><ul><li>取消某个权限。</li></ul><p>&#x3D; 赋予给定权限并取消其他所有权限（如果有的话）。</p><p>设置 mode 所表示的权限可用下述字母的任意组合：</p><p>r 可读。</p><p>w 可写。</p><p>x 可执行。</p><p>X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。</p><p>s 在文件执行时把进程的属主或组ID置为该文件的文件属主。</p><p>​    方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。</p><p>t 保存程序的文本到交换设备上。</p><p>u 与文件属主拥有一样的权限。</p><p>g 与和文件属主同组的用户拥有一样的权限。</p><p>o 与其他用户拥有一样的权限。</p><p>文件名：以空格分开的要改变权限的文件列表，支持通配符。</p><p>r 代表读，w 代表写，x 代表执行，</p><p>如果可读，权限是二进制的100，十进制是4；</p><p>如果可写，权限是二进制的010，十进制是2；</p><p>如果可运行，权限是二进制的001，十进制是1；</p><p>具备多个权限，就把相应的 4、2、1 相加就可以了：</p><p>若要 rwx 则 4+2+1&#x3D;7</p><p>若要 rw- 则 4+2&#x3D;6</p><p>若要 r-x 则 4+1&#x3D;5</p><p>若要 r– 则 &#x3D;4</p><p>若要 -wx 则 2+1&#x3D;3</p><p>若要 -w- 则 &#x3D;2</p><p>若要 –x 则 &#x3D;1</p><p>若要 — 则 &#x3D;0</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>将文件 1.txt 设为所有人皆可读取 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod ugo+r 1.txt</span><br></pre></td></tr></table></figure><p>将文件 file1.txt 设为所有人皆可读取 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod a+r 1.txt</span><br></pre></td></tr></table></figure><p>将文件 1.txt 与 2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod ug+w,o-w 1.txt 2.txt</span><br></pre></td></tr></table></figure><p>将 1.py 设定为只有该文件拥有者可以执行 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u+x 1.py</span><br></pre></td></tr></table></figure><p>将目前目录下的所有文件与子目录皆设为任何人可读取 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R a+r *</span><br></pre></td></tr></table></figure><p>此外chmod也可以用数字来表示权限如 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure><p>语法为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod abc file</span><br></pre></td></tr></table></figure><h3 id="linux中chmod权限的用法"><a href="#linux中chmod权限的用法" class="headerlink" title="linux中chmod权限的用法"></a>linux中chmod权限的用法</h3><p>chmod ABC file</p><p>其中A、B、C各为一个数字，分别表示User、Group、及Other的权限。</p><p>A、B、C这三个数字如果各自转换成由“0”、“1”组成的二进制数，则二进制数的每一位分别代表一个角色的读、写、运行的权限。比如User组的权限A：</p><p>如果可读、可写、可运行，就表示为二进制的111，转换成十进制就是7。</p><p>如果可读、可写、不可运行，就表示为二进制的110，转换成十进制就是6。</p><p>如果可读、不可写、可运行，就表示为二进制的101，转换成十进制就是5。</p><p>一些人说的“4&#x3D;r,2&#x3D;w,1&#x3D;x”的意思是：</p><p>为不同的角色分配不同的权限，放在一起，就出现 777、677这样的数字了。</p><p>你也可以用 chmod u+x  file  的方式为User组添加运行权限。</p><hr><p>指令名称 : chmod<br>使用权限 : 所有使用者<br>使用方式 : chmod [-cfvR] [–help] [–version] mode file…<br>说明 : Linux&#x2F;Unix 的档案调用权限分为三级 : 档案拥有者、群组、其他。利用 chmod 可以藉以控制档案如何被他人所调用。<br>参数 :<br>mode : 权限设定字串，格式如下 : [ugoa…][[+-&#x3D;][rwxX]…][,…]，其中<br>u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。<br>+ 表示增加权限、- 表示取消权限、&#x3D; 表示唯一设定权限。<br>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。<br>-c : 若该档案权限确实已经更改，才显示其更改动作<br>-f : 若该档案权限无法被更改也不要显示错误讯息<br>-v : 显示权限变更的详细资料<br>-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)<br>–help : 显示辅助说明<br>–version : 显示版本<br>范例 :将档案 file1.txt 设为所有人皆可读取 :<br>chmod ugo+r file1.txt<br>将档案 file1.txt 设为所有人皆可读取 :<br>chmod a+r file1.txt<br>将档案 file1.txt 与 file2.txt 设为该档案拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :<br>chmod ug+w,o-w file1.txt file2.txt<br>将 ex1.py 设定为只有该档案拥有者可以执行 :<br>chmod u+x ex1.py<br>将目前目录下的所有档案与子目录皆设为任何人可读取 :<br>chmod -R a+r *<br>此外chmod也可以用数字来表示权限如 chmod 777 file<br>语法为：chmod abc file<br>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。<br>r&#x3D;4，w&#x3D;2，x&#x3D;1<br>若要rwx属性则4+2+1&#x3D;7；<br>若要rw-属性则4+2&#x3D;6；<br>若要r-x属性则4+1&#x3D;7。<br>范例：<br>chmod a&#x3D;rwx file<br>和<br>chmod 777 file<br>效果相同<br>chmod ug&#x3D;rwx,o&#x3D;x file<br>和<br>chmod 771 file<br>效果相同<br>若用chmod 4755 filename可使此程序具有root的权限.</p><p>指令名称 : chown<br>使用权限 : root</p><p>使用方式 : chmod [-cfhvR] [–help] [–version] user[] file…</p><p>说 明 : Linux&#x2F;Unix 是多人多工作业系统，所有的档案皆有拥有者。利用 chown 可以将档案的拥有者加以改变。一般来说，这个指令只有是由 系统管理者(root)所使用，一般使用者没有权限可以改变别人的档案拥有者，也没有权限可以自己的档案拥有者改设为别人。只有系统管理者(root)才 有这样的权限。</p><p>把计 :</p><p>user : 新的档案拥有者的使用者 IDgroup : 新的档案拥有者的使用者群 体(group)-c : 若该档案拥有者确实已经更改，才显示其更改动作-f : 若该档案拥有者无法被更改也不要显示错误讯息-h : 只对于连结 (link)进行变更，而非该 link 真正指向的档案-v : 显示拥有者变更的详细资料-R : 对目前目录下的所有档案与子目录进行相同的拥有者 变更(即以递回的方式逐个变更)–help : 显示辅助说明–version : 显示版本</p><p>范例 :<br>将档案 file1.txt 的拥有者设为 users 群体的使用者 jessie :<br>chown jessie:users file1.txt</p><p>将目前目录下的所有档案与子目录的拥有者皆设为 users 群体的使用者 lamport :<br>chmod -R lamport:users *<br>-rw——- (600) – 只有属主有读写权限。<br>-rw-r–r– (644) – 只有属主有读写权限；而属组用户和其他用户只有读权限。<br>-rwx—— (700) – 只有属主有读、写、执行权限。<br>-rwxr-xr-x (755) – 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。<br>-rwx–x–x (711) – 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。<br>-rw-rw-rw- (666) – 所有用户都有文件读、写权限。这种做法不可取。<br>-rwxrwxrwx (777) – 所有用户都有读、写、执行权限。更不可取的做法。<br>以下是对目录的两个普通设定:</p><p>drwx—— (700) - 只有属主可在目录中读、写。<br>drwxr-xr-x (755) - 所有用户可读该目录，但只有属主才能改变目录中的内容。</p><p>-————————————————————————-</p><p>运行 .sh 文件类型的文件：<br>用file命令测试一下看是什么类型的<br>file xxxx.sh<br>如果是Bourne-Again shell script 可以sh xxxx.sh 或者chmod +x xxxx.sh 再.&#x2F;xxx.sh<br>一般 .sh 的直接添加x(可执行属性) chmod +x xxx.sh 然后.&#x2F;xxx.sh就可以了<br>chmod是一个改变用户拥有指定文件的权限的命令.r:只读,w:写,x执行.也可以用数字</p><p>-————————————————————————-</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux chown命令详解</title>
      <link href="/2021/11/27/Linux-chown%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/11/27/Linux-chown%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="chown命令详解"><a href="#chown命令详解" class="headerlink" title="chown命令详解"></a>chown命令详解</h1><p>参考</p><p><a href="https://www.runoob.com/linux/linux-comm-chown.html">Linux chown 命令 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://blog.csdn.net/jiayoudangdang/article/details/80157675">chown命令详解-CSDN博客</a></p><p><a href="https://developer.aliyun.com/article/1199433">如何在 Linux 中查找文件所有者？-阿里云开发者社区 (aliyun.com)</a></p><p>Linux chown（英文全拼：<strong>change owner</strong>）命令用于设置文件所有者和文件关联组的命令。</p><p>Linux&#x2F;Unix 是多人多工操作系统，所有的文件皆有拥有者。利用 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID，组可以是组名或者组 ID，文件是以空格分开的要改变权限的文件列表，支持通配符。 。</p><p>chown 需要超级用户 <strong>root</strong> 的权限才能执行此命令。</p><p>只有超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如需要设置关联组可能需要使用 <a href="https://www.runoob.com/linux/linux-comm-chgrp.html">chgrp</a> 命令。</p><p><strong>使用权限</strong> : root</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [-cfhvR] [--help] [--version] user[:group] file...</span><br></pre></td></tr></table></figure><p><strong>参数</strong> :</p><ul><li>user : 新的文件拥有者的使用者 ID</li><li>group : 新的文件拥有者的使用者组(group)</li><li>-c : 显示更改的部分的信息</li><li>-f : 忽略错误信息</li><li>-h :修复符号链接</li><li>-v : 显示详细的处理信息</li><li>-R : 处理指定目录以及其子目录下的所有文件</li><li>–help : 显示辅助说明</li><li>–version : 显示版本</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>把 &#x2F;var&#x2F;run&#x2F;httpd.pid 的所有者设置 root：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown root /var/run/httpd.pid</span><br></pre></td></tr></table></figure><p>将文件 file1.txt 的拥有者设为 runoob，群体的使用者 runoobgroup :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown runoob:runoobgroup file1.txt</span><br></pre></td></tr></table></figure><p>将当前前目录下的所有文件与子目录的拥有者皆设为 runoob，群体的使用者 runoobgroup:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R runoob:runoobgroup *</span><br></pre></td></tr></table></figure><p>把 &#x2F;home&#x2F;runoob 的关联组设置为 512 （关联组ID），不改变所有者：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown :512 /home/runoob</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实例1：改变拥有者和群组</span><br><span class="line">命令：　　　　</span><br><span class="line">chown mail:mail log2012.log</span><br><span class="line">输出：　　</span><br><span class="line">[root@localhost test6]# ll</span><br><span class="line">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class="line">---xr--r-- 1 root users 302108 11-30 08:39 log2012.log</span><br><span class="line">-rw-r--r-- 1 root users  61 11-30 08:39 log2013.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2014.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2015.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2016.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2017.log</span><br><span class="line">[root@localhost test6]# chown mail:mail log2012.log </span><br><span class="line">[root@localhost test6]# ll</span><br><span class="line">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class="line">---xr--r-- 1 mail mail 302108 11-30 08:39 log2012.log</span><br><span class="line">-rw-r--r-- 1 root users  61 11-30 08:39 log2013.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2014.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2015.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2016.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2017.log</span><br><span class="line">[root@localhost test6]#</span><br><span class="line">实例2：改变文件拥有者和群组</span><br><span class="line">命令：　　　　</span><br><span class="line">chown root: log2012.log</span><br><span class="line">输出：</span><br><span class="line">[root@localhost test6]# ll</span><br><span class="line">总计 604</span><br><span class="line">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class="line">---xr--r-- 1 mail mail 302108 11-30 08:39 log2012.log</span><br><span class="line">-rw-r--r-- 1 root users  61 11-30 08:39 log2013.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2014.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2015.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2016.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2017.log</span><br><span class="line">[root@localhost test6]# chown root: log2012.log </span><br><span class="line">[root@localhost test6]# ll</span><br><span class="line">总计 604</span><br><span class="line">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class="line">---xr--r-- 1 root root 302108 11-30 08:39 log2012.log</span><br><span class="line">-rw-r--r-- 1 root users  61 11-30 08:39 log2013.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2014.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2015.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2016.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2017.log</span><br><span class="line">[root@localhost test6]#</span><br><span class="line">实例3：改变文件群组</span><br><span class="line">命令：　　　</span><br><span class="line">chown :mail log2012.log</span><br><span class="line">输出：</span><br><span class="line">[root@localhost test6]# ll</span><br><span class="line">总计 604</span><br><span class="line">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class="line">---xr--r-- 1 root root 302108 11-30 08:39 log2012.log</span><br><span class="line">-rw-r--r-- 1 root users  61 11-30 08:39 log2013.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2014.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2015.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2016.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2017.log</span><br><span class="line">[root@localhost test6]# chown :mail log2012.log </span><br><span class="line">[root@localhost test6]# ll</span><br><span class="line">总计 604</span><br><span class="line">---xr--r-- 1 root users 302108 11-30 08:39 linklog.log</span><br><span class="line">---xr--r-- 1 root mail 302108 11-30 08:39 log2012.log</span><br><span class="line">-rw-r--r-- 1 root users  61 11-30 08:39 log2013.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2014.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2015.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2016.log</span><br><span class="line">-rw-r--r-- 1 root users  0 11-30 08:39 log2017.log</span><br><span class="line">实例4：改变指定目录以及其子目录下的所有文件的拥有者和群组</span><br><span class="line">命令：　　</span><br><span class="line">chown -R -v root:mail test6</span><br><span class="line">输出：　　</span><br><span class="line">[root@localhost test]# ll</span><br><span class="line">drwxr-xr-x 2 root users 4096 11-30 08:39 test6</span><br><span class="line">[root@localhost test]# chown -R -v root:mail test6</span><br><span class="line">“test6/log2014.log” 的所有者已更改为 root:mail</span><br><span class="line">“test6/linklog.log” 的所有者已更改为 root:mail</span><br><span class="line">“test6/log2015.log” 的所有者已更改为 root:mail</span><br><span class="line">“test6/log2013.log” 的所有者已更改为 root:mail</span><br><span class="line">“test6/log2012.log” 的所有者已保留为 root:mail</span><br><span class="line">“test6/log2017.log” 的所有者已更改为 root:mail</span><br><span class="line">“test6/log2016.log” 的所有者已更改为 root:mail</span><br><span class="line">“test6” 的所有者已更改为 root:mail</span><br><span class="line">[root@localhost test]# ll</span><br><span class="line">drwxr-xr-x 2 root mail 4096 11-30 08:39 test6</span><br><span class="line">[root@localhost test]# cd test6</span><br><span class="line">[root@localhost test6]# ll</span><br><span class="line">总计 604</span><br><span class="line">---xr--r-- 1 root mail 302108 11-30 08:39 linklog.log</span><br><span class="line">---xr--r-- 1 root mail 302108 11-30 08:39 log2012.log</span><br><span class="line">-rw-r--r-- 1 root mail  61 11-30 08:39 log2013.log</span><br><span class="line">-rw-r--r-- 1 root mail  0 11-30 08:39 log2014.log</span><br><span class="line">-rw-r--r-- 1 root mail  0 11-30 08:39 log2015.log</span><br><span class="line">-rw-r--r-- 1 root mail  0 11-30 08:39 log2016.log</span><br><span class="line">-rw-r--r-- 1 root mail  0 11-30 08:39 log2017.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux防火墙</title>
      <link href="/2021/11/27/linux%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2021/11/27/linux%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<p><strong>linux防火墙</strong></p><p>参考</p><p><a href="https://blog.csdn.net/weixin_45517017/article/details/123618933">(43条消息) Linux系统开放防火墙端口号的方法_冒泡_L的博客-CSDN博客_liunx服务器怎么打开8011端口</a></p><p><a href="https://www.php.cn/linux-443556.html">linux防火墙状态查看的方法-linux运维-PHP中文网</a></p><p><a href="https://blog.csdn.net/Aphysia/article/details/105872540">(61条消息) linux设置防火墙，自启动以及关闭禁止防火墙_linux防火墙开机自动关闭_秦怀的博客-CSDN博客</a></p><p>方法一<br>开启8011端口<br>&#x2F;sbin&#x2F;iptables -I INPUT -p tcp –dport 8011 -j ACCEPT<br>保存配置<br>&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables save<br>重启服务<br>&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables restart<br>若上面方面报错，则证明你服务器系统是Centos7以上，则用以下方法<br>方法二<br>防火墙设置<br>查看防火墙状态<br>systemctl status firewalld<br>开启防火墙<br>systemctl start firewalld<br>关闭防火墙<br>systemctl stop firewalld<br>重启防火墙<br>service firewalld start</p><p>若遇到无法开启 先用：<br>systemctl unmask firewalld.service<br>然后：<br>systemctl start firewalld.service<br>查询指定端口是否已开<br>firewall-cmd –query-port&#x3D;666&#x2F;tcp<br>1<br>开放端口保存<br>添加指定需要开放的端口：<br>firewall-cmd –add-port&#x3D;123&#x2F;tcp –permanent<br>重载入添加的端口：<br>firewall-cmd –reload<br>查询指定端口是否开启成功：<br>firewall-cmd –query-port&#x3D;123&#x2F;tcp<br>移除端口<br>移除指定端口：<br>firewall-cmd –permanent –remove-port&#x3D;123&#x2F;tcp<br>查询开放的防火墙列表<br>firewall-cmd –zone&#x3D;public –list-ports<br>若开放了端口还是连接不上你想要的端口，<br>注意：有可能是你阿里云自带安全组策略限制的原因，这种情况需要在阿里云官方云服务器管理控制台手动开放。</p><p><a href="https://blog.csdn.net/qq_52749711/article/details/128674838">(76条消息) Ubuntu开放端口,与防火墙_ubuntu查看防火墙开放端口_Strange_Head的博客-CSDN博客</a></p><p>1.查看防火墙状态sudo ufw status,也可以看到开放的端口</p><p>2.关闭防火墙sudo ufw disable，打开防火墙sudo ufw enable,<br>3.开放端口sudo ufw allow 端口号<br>4.关闭端口sudo ufw deny 端口号<br>5.重启防火墙sudo ufw reload</p><p>二、端口开启无法依然无法访问问题排查<br>1.查看开启的端口是否有程序监听</p><p>netstat -ap | grep 端口</p><p>2.如果端口有程序监听，排查程序是否需要配置远程访问（例如redis、mysql都需要配置远程访问）</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常见命令</title>
      <link href="/2021/11/27/linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/27/linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>linux常见命令</p><p>参考</p><p><a href="https://www.runoob.com/w3cnote/linux-common-command-2.html">Linux 常用命令学习 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://blog.csdn.net/weixin_45240930/article/details/105672284">(37条消息) linux中root用户与普通用户之间的互相切换命令_weixin_45240930的博客-CSDN博客_从root切换到hadoop</a></p><p><a href="https://blog.csdn.net/afei8080/article/details/128732770">(76条消息) Linux系统查看版本、位数（32位或64位）、架构（arm或amd）的命令_linux查看arm型号_令狐飞侠的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/web18224617243/article/details/126601342">(76条消息) 查看Linux系统是UBUNTU还是CentOS的方法_查看linux是centos_普通网友的博客-CSDN博客</a></p><p>cd &#x2F;盘符    到相应的盘符</p><p>cd   路径名称</p><p>cd  ..或者- 返回上一级路径</p><p>cd ~  返回到home目录</p><p>ll    查看当前目录下的显示的文件</p><p>ll -a   查看当前目录下含隐藏的所有文 件</p><p>xxx  –version   查看当前xxx的版本</p><p>pwd  查看当前路径</p><p>pwd -p 软链接的实际路径</p><p>vim  文件名字   例如   vim  hello.txt   创建一个名字叫hello的txt文</p><p>linux 编辑文件</p><p>1.进入文件  vim 文件名（vim test.txt）</p><p>2.输入 i 编辑完成之后，按ESC键 跳到命令模式（命令前面冒号是必要的）：</p><p>:w   保存文件但不退出vi</p><p>:w file 将修改另外保存到file中，不退出vi</p><p>:w!   强制保存，不推出vi</p><p>:wq  保存文件并退出vi</p><p>:wq! 强制保存文件，并退出vi</p><p>:q  不保存文件，退出vi</p><p>:q! 不保存文件，强制退出vi</p><p>:e! 放弃所有修改，从上次保存文件开始再编辑<br>3.退出编辑模式，在光标停留的行那边输入yy可copy当前行</p><p>在输入p则复制一行</p><p>4按esc 跳到命令模式，然后输入：wq退出并保存</p><p>cat  文件名  显示文件内容</p><p>tail  -n 1 文件名  显示文件内容的最后一行</p><h2 id="1-查看版本的命令"><a href="#1-查看版本的命令" class="headerlink" title="1 查看版本的命令"></a>1 查看版本的命令</h2><p>lsb_release -a</p><h2 id="2查看位数（32位或64位）的命令"><a href="#2查看位数（32位或64位）的命令" class="headerlink" title="2查看位数（32位或64位）的命令"></a>2查看位数（32位或64位）的命令</h2><p>getconf LONG_BIT</p><h2 id="3-查看架构（arm或amd）的命令"><a href="#3-查看架构（arm或amd）的命令" class="headerlink" title="3 查看架构（arm或amd）的命令"></a>3 查看架构（arm或amd）的命令</h2><p>dpkg –print-architecture</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 部署到自己的云服务器上</title>
      <link href="/2021/11/26/hexo-%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>/2021/11/26/hexo-%E9%83%A8%E7%BD%B2%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-部署到自己的云服务器上"><a href="#hexo-部署到自己的云服务器上" class="headerlink" title="hexo 部署到自己的云服务器上"></a><strong>hexo 部署到自己的云服务器上</strong></h2><p>参考</p><p><a href="https://blog.gmcj0816.top/posts/47c1249e/">https://blog.gmcj0816.top/posts/47c1249e/</a></p><h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><h2 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br></pre></td></tr></table></figure><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p>可能出现的问题</p><p><a href="https://blog.csdn.net/promsing/article/details/121912701">linux 安装插件报错：Loaded plugins: fastestmirror-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 yum 软件包管理工具可以简化系统软件更新的工作。为了保证更新的持续进行，通常都会提供多个 mirror（镜像）地址供下载使用，但由于存在地域问题，从不同的镜像下载速度差异很大。选择从适合的镜像下载软件包，会极大加快更新速度。以 CentOS 为例，fastestmirror 插件可以让 yum 在更新时先根据 ping 值进行判断，然后从最快响应的地址下载。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用 yum 出现 Loaded plugins: fastestmirro</span><br><span class="line">fastestmirror是yum的一个加速插件，这边提示的是:插件不可用</span><br><span class="line">1.更改只读文件的权限：</span><br><span class="line">修改只读文件：sudo chmod a+w 【要修改文件名】</span><br><span class="line"></span><br><span class="line">下面两个文件是只读文件，需要修改权限。</span><br><span class="line">1.修改插件的配置文件</span><br><span class="line">vi /etc/yum/pluginconf.d/fastestmirror.conf</span><br><span class="line"></span><br><span class="line">enabled = 1 #由1改为0，禁用该插件</span><br><span class="line">2.修改yum的配置文件</span><br><span class="line"></span><br><span class="line">vi /etc/yum.conf</span><br><span class="line"></span><br><span class="line">plugins=1 #改为0，不使用插件</span><br><span class="line"></span><br><span class="line">3 清除缓存并重新构建yum 源</span><br><span class="line">yum clean all</span><br><span class="line">yum clean dbcache</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h3 id="查看git版本"><a href="#查看git版本" class="headerlink" title="查看git版本"></a><strong>查看git版本</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git - -version  // 查看git是否安装成功</span><br></pre></td></tr></table></figure><h2 id="创建指定的上传用户名和密码"><a href="#创建指定的上传用户名和密码" class="headerlink" title="创建指定的上传用户名和密码"></a>创建指定的上传用户名和密码</h2><p>创建后期上传hexo的git指定用户，这里以hyh为例(这个用户名可以自定义，但是要保证后面的需要用户名的地方需要改成自己自定义的用户名即可)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd star</span><br><span class="line">passwd star</span><br></pre></td></tr></table></figure><p>需要注意的便是在设置密码时，一般玩过虚拟机的都知道，主要是没玩过的，要注意设置密码时是没有回显的</p><h2 id="编辑权限文件赋予"><a href="#编辑权限文件赋予" class="headerlink" title="编辑权限文件赋予"></a>编辑权限文件赋予</h2><h2 id="star用户相关权限"><a href="#star用户相关权限" class="headerlink" title="star用户相关权限"></a>star用户相关权限</h2><p><a href="https://www.cnblogs.com/linuxandy/p/10881918.html">chmod命令用法详解-chmod修改目录权限 - Andy-Law - 博客园 (cnblogs.com)</a></p><p>需要注意，&#x2F;&#x2F;后面的别复制，内个是给大家做的解释</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers   # 设置权限</span><br><span class="line">vim /etc/sudoers # 编辑/etc/sudoers</span><br></pre></td></tr></table></figure><p>使用 set: nu 显示行号，找到100行左右，添加如下信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root ALL=(ALL)  ALL</span><br><span class="line">star  ALL=(ALL)   ALL  #主要添加这句话（这里star是你刚才创建的用户名）</span><br></pre></td></tr></table></figure><p>直接:wq!，进行保存，保存后再次修改权限。因为 sudoers是只读文件，所有要使用 !进行保存，否则会失败。</p><p>将&#x2F;etc&#x2F;sudoers 修改成只读类型【为了保证服务器的安全，这个一定要做，千万不要懒哦】</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 /etc/sudoers   //改回权限</span><br></pre></td></tr></table></figure><h2 id="创建hexo文件夹及赋予文件夹权限"><a href="#创建hexo文件夹及赋予文件夹权限" class="headerlink" title="创建hexo文件夹及赋予文件夹权限"></a>创建hexo文件夹及赋予文件夹权限</h2><p>需要注意，&#x2F;&#x2F;后面的别复制，内个是给大家做的解释</p><p>chown命令可以查看一下链接了解</p><p><strong>chown 英语翻译 修改文件目录属主</strong></p><p><a href="https://blog.csdn.net/jiayoudangdang/article/details/80157675">chown命令详解-CSDN博客</a></p><p><a href="https://www.runoob.com/linux/linux-comm-chown.html">Linux chown 命令 | 菜鸟教程 (runoob.com)</a></p><p>[linux查看文件拥有者 - CSDN文库](<a href="https://wenku.csdn.net/answer/841fbac66e93208a7eb3efe40d00e98b#:~:text=%E8%A6%81%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%96%87%E4%BB%B6%E7%9A%84%E6%8B%A5%E6%9C%89%E8%80%85%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E2%80%9Cls,-l%E2%80%9D%EF%BC%8C%E8%AF%A5%E5%91%BD%E4%BB%A4%E4%BC%9A%E5%88%97%E5%87%BA%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8C%85%E6%8B%AC%E6%96%87%E4%BB%B6%E7%9A%84%E6%8B%A5%E6%9C%89%E8%80%85%E3%80%81%E6%89%80%E5%B1%9E%E7%BB%84%E3%80%81%E6%9D%83%E9%99%90%E7%AD%89%E3%80%82">https://wenku.csdn.net/answer/841fbac66e93208a7eb3efe40d00e98b#:~:text=要查看Linux系统中文件的拥有者，可以使用命令“ls,-l”，该命令会列出文件的详细信息，包括文件的拥有者、所属组、权限等。</a> 文件的拥有者通常是文件创建者或最后修改者，可以通过该信息来确定文件的归属和访问权限。)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /home/hexo  #这个也是自定义的</span><br><span class="line">chown star:star -R /home/hexo //授予权限这里其实就是将当前前目录下的所有文件与子目录的拥有者皆设为 star，群体的使用者 star</span><br></pre></td></tr></table></figure><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>这里基本没啥好说的，直接运行就可以，然后看到最后一行显示Complete就说明完事了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y nginx  </span><br></pre></td></tr></table></figure><p>这个时候我们可以通过以下命令，启动一下，看看效果，如果没有报错的话就说明启动完事了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><h2 id="编辑Nginx文件"><a href="#编辑Nginx文件" class="headerlink" title="编辑Nginx文件"></a>编辑Nginx文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>如果后面用https，直接复制我这套就ok了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name IP地址或者域名;</span><br><span class="line">        rewrite ^(.*)$  https://$host$1 permanent;  # http转https</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        root /home/hexo;</span><br><span class="line">        server_name xxxx;  # 请替换为你的域名</span><br><span class="line">        client_max_body_size 40m;  # 请求体上限</span><br><span class="line">        # ssl的一些配置</span><br><span class="line">        ssl_certificate &quot;/home/ssl/hexo_ssl/ceshi123.top.crt&quot;;   # 请务必替换成你的ssl证书路径</span><br><span class="line">        ssl_certificate_key &quot;/home/ssl/hexo_ssl/ceshi123.top.key&quot;; # 请务必替换成你的ssl证书路径</span><br><span class="line">        ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_session_cache shared:SSL:10m;</span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">    </span><br><span class="line">        error_page   404    /404.html;</span><br><span class="line">        error_page   500 502 503 504     /50x.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存退出后，重启服务器，<br>修改完配置以后，需要重启一下Nginx服务。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop nginx.service  </span><br><span class="line">systemctl reload nginx.service  </span><br></pre></td></tr></table></figure><h2 id="建立git仓库"><a href="#建立git仓库" class="headerlink" title="建立git仓库"></a>建立git仓库</h2><p>需要注意，&#x2F;&#x2F;后面的别复制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su root   //如果现在就是root用户下可以不用这一句</span><br><span class="line">cd /home/hyh</span><br><span class="line">git init --bare blog.git  //创建Git仓库</span><br><span class="line">chown star:star -R blog.git  //授予Git仓库权限</span><br></pre></td></tr></table></figure><h2 id="编辑post-receive"><a href="#编辑post-receive" class="headerlink" title="编辑post-receive"></a>编辑post-receive</h2><p>进入cd &#x2F;home&#x2F;star&#x2F;blog.git&#x2F;hooks&#x2F;执行下方命令</p><p>需要注意，&#x2F;&#x2F;后面的别复制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim post-receive   //这一句话千万别错了哦</span><br></pre></td></tr></table></figure><p>把下面的内容拷贝进去并wq!保存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/home/hexo  --git-dir=/home/hyh/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>再次修改权限</p><p><strong>chmod 英语翻译 修改文件权限</strong></p><p><a href="https://www.runoob.com/linux/linux-comm-chmod.html">Linux chmod 命令 | 菜鸟教程 (runoob.com)</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x post-receive  //这里是设置成可以执行的权限 （如果没有设置这样权限，推送代码的时候推送不上/home/hexo这里来）</span><br></pre></td></tr></table></figure><p>开放80端口，如果https需要开放443端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld 查看防火墙状态 </span><br><span class="line">systemctl start firewalld   开启防火墙 </span><br><span class="line">firewall-cmd --zone=public --list-ports  查询开放的防火墙列表</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=80/tcp  添加指定需要开放的端口</span><br><span class="line">firewall-cmd --reload 重载入添加的端口</span><br><span class="line">firewall-cmd --zone=public --list-ports 查询开放的防火墙列表</span><br></pre></td></tr></table></figure><p>到这基本的工作已经完事了</p><h2 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ~/.ssh   //创建存放密钥的文件夹,文件夹可能会存在，那就可以直接去编辑了</span><br><span class="line">vim ~/.ssh/authorized_keys  //写入密钥</span><br></pre></td></tr></table></figure><p>(如果像我这里面一样有know_hosts或know_host.old的文件，都需要删除，否则会失败!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">到自己的电脑上的C:\Users\He\.ssh 目录下找到id_rsa文件</span><br><span class="line">打开编辑并把秘钥复制到刚刚编辑的authorized_keys里面</span><br></pre></td></tr></table></figure><p>打开自己电脑测试物理机与服务器能否跑通</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -v star@IP地址 //服务器ip</span><br><span class="line">会提示输入yes 回车</span><br><span class="line">输入密码  回车</span><br><span class="line">提示 Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line">就证明跑通成功。</span><br></pre></td></tr></table></figure><p>我们需要在config.yml中的最后一行编辑以下信息，然后咱们就可以把自己的博客推送上去了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repository: star@IP地址:/home/star/blog.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>然后就可以通过以下命令进行推送了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br><span class="line">输入git密码，最后提示推送成功</span><br></pre></td></tr></table></figure><p>如果提示失败，应该是git那边的秘钥的问题，在查看一下上面的问题（自己电脑的know_hosts或know_host.old的文件，都需要删除）</p><p>成功发布后</p><p>访问自己的ip就可以访问到了</p><h3 id="欢迎浏览我的页面"><a href="#欢迎浏览我的页面" class="headerlink" title="欢迎浏览我的页面"></a>欢迎浏览我的页面</h3><h3 id="Star"><a href="#Star" class="headerlink" title="Star"></a><a href="http://39.108.121.100/">Star</a></h3><p>Thank you ！！！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 搭建</title>
      <link href="/2021/11/26/Hexo-Butterfly-%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/11/26/Hexo-Butterfly-%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Butterfly-搭建"><a href="#Hexo-Butterfly-搭建" class="headerlink" title="Hexo + Butterfly 搭建"></a>Hexo + Butterfly 搭建</h1><p>参考</p><p>[Hexo + Butterfly 搭建个人网站（一）_hexo主题-CSDN博客](<a href="https://blog.csdn.net/m0_69079573/article/details/131282524#:~:text=%E6%A0%87%E7%AD%BE%E9%A1%B5">https://blog.csdn.net/m0_69079573/article/details/131282524#:~:text=标签页</a> 1 、前往你的 Hexo 博客的根目录，打开终端 2 、输入 hexo,source%2F tags %2Findex.md 这个文件 4 、在文件里添加 type%3A “tags”)</p><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">【Hexo】Hexo搭建Butterfly主题并快速美化_hexo主题_CoolTiger、的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/582638450">Hexo中Buttefly主题美化进阶（八） - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/nineya_com/article/details/103322773">hexo博客添加标签、分类、归档、关于等页面_hexo 分类-CSDN博客</a></p><p>1、安装butterfly主题<br>在hexo项目根目录下下载主题。<br>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly</p><ol start="2"><li>安装 pug 和 stylus 渲染器。</li></ol><p>npm install hexo-renderer-pug hexo-renderer-stylus –save<br>3.修改项目根目录下的 _config.yml 文件（称为站点配置文件），开启主题。</p><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><h2 id="Plugins-https-hexo-io-plugins"><a href="#Plugins-https-hexo-io-plugins" class="headerlink" title="Plugins: https://hexo.io/plugins/"></a>Plugins: <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></h2><h2 id="Themes-https-hexo-io-themes"><a href="#Themes-https-hexo-io-themes" class="headerlink" title="Themes: https://hexo.io/themes/"></a>Themes: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></h2><p>theme: butterfly<br>4.升级版本建议</p><p>为了減少升级主题带来的不便，根目录下创建 _config.butterfly.yml 文件，把主题文件夹中的 _config.yml 代码复制到  _config.butterfly.yml 下与 配置文件的 _config.yml 同级。( 注意: 复制的是主题的 _config.yml ，而不是 hexo根目录 的 _config.yml)</p><p>！ 注意： 不要把主题目录的 _config.yml 删掉</p><p>！ 注意： 以后只需要在 _config.butterfly.yml 进行配置就行。如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。</p><p>！ Hexo会自动合并主题中的 _config.yml 和 _config.butterfly.yml 里的配置，如果存在同名配置，会使用 _config.butterfly.yml 的配置，其优先度较高。</p><p>标签页<br>1、前往你的 Hexo 博客的根目录，打开终端<br>2、输入 hexo new page tags 命令<br>3、会生成 source&#x2F;tags&#x2F;index.md 这个文件<br>4、在文件里添加 type: “tags”<br>分类页</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、前往你的 Hexo 博客的根目录，打开终端</span><br><span class="line">2、输入 hexo new page categories 命令</span><br><span class="line">3、会生成 source/categories/index.md 这个文件</span><br><span class="line">4、在文件里添加 type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>友情链接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、前往你的 Hexo 博客的根目录，打开终端</span><br><span class="line">2、输入 hexo new page link</span><br><span class="line">3、会生成 source/link/index.md 这个文件</span><br><span class="line">4、在文件里添加 type: &quot;link&quot;</span><br></pre></td></tr></table></figure><p>本地</p><ul><li><ul><li><pre><code>class_name:   友情链接class_desc: 那些人，那些事link_list:  - name: 友链名    link: 网址    avatar: 图片地址    descr: 介绍  - name: 友链名    link: 网址    avatar: 图片地址    descr: 介绍</code></pre></li></ul></li></ul><p>远程</p><pre><code>    从 4.0.0 开始，支持从远程加载友情链接，远程拉取只支持 json。    选择远端后，本地的会失效    在 source/link/index.md 这个文件的 front-matter 添加远程链接    flink_url: xxxxx</code></pre><p>404页面<br>主题内置了一个简单的 404 页面，可在设置中开启</p><p>本地预览时，访问出错的网站是不会跳到 404 页面的。</p><p>如需本地预览，请访问 <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p><h1 id="A-simple-404-page"><a href="#A-simple-404-page" class="headerlink" title="A simple 404 page"></a>A simple 404 page</h1><p>error_404:<br>enable: true   # 是否开启<br>subtitle: “页面没有找到”<br>background:  图片地址</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo相关资料和各个主体链接地址</title>
      <link href="/2021/11/26/hexo%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E5%92%8C%E5%90%84%E4%B8%AA%E4%B8%BB%E4%BD%93%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80/"/>
      <url>/2021/11/26/hexo%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99%E5%92%8C%E5%90%84%E4%B8%AA%E4%B8%BB%E4%BD%93%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>hexo相关资料和各个主体链接地址</p><p>首先先下载node，版本越高越好，可以装个nvm 这个可以随意切换node版本</p><p>进入hexo官网，按照操作流程来就可以：<a href="https://hexo.io/">https://hexo.io/</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV15Y411j7KZ/?spm_id_from=333.337.search-card.all.click&vd_source=15500a48df7d25db971af17c14834cbe">基于springboot+vue搭建个人博客系统_哔哩哔哩_bilibili</a></p><p>hexo 官网 <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>hexo教学  <a href="https://www.bilibili.com/video/BV1QD4y1F7pc?p=12&vd_source=12cb2e54cff5d0b62b7e96226f2c7d73">https://www.bilibili.com/video/BV1QD4y1F7pc?p=12&amp;vd_source=12cb2e54cff5d0b62b7e96226f2c7d73</a></p><p>五款Hexo主题推荐<br>1.Sakura 非常炫，缺点加载慢 <a href="https://github.com/honjun/hexo-theme-sakura">https://github.com/honjun/hexo-theme-sakura</a><br>2.Matery 预加载，强推 <a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a><br>3.3-hexo 三段式，适合博文多的 <a href="https://github.com/yelog/hexo-theme-3-hexo">https://github.com/yelog/hexo-theme-3-hexo</a><br>4.butterfly 也是个好看的 <a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev">https://github.com/jerryc127/hexo-theme-butterfly/tree/dev</a><br>5.Next 功能集成多，简洁 <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a><br>hexo官网：<a href="https://hexo.io/">https://hexo.io/</a></p><p>点进以上主题，到github上拉取或者直接下来压缩包</p><p>将压缩包解压，修改对应的主题名字，然后将文件的内容扔到对应的主题名字的文件里面，</p><p>在_config.yam的配置文件的theme 改成对应的主题名即可</p><p>页面报错问题</p><h1 id="extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include"><a href="#extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include" class="headerlink" title="extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include"></a>extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include</h1><p><a href="https://blog.csdn.net/weixin_44318830/article/details/104884936">Hexo启动页面显示extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_46065314/article/details/129449406">https://blog.csdn.net/weixin_46065314/article/details/129449406</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到github上</title>
      <link href="/2021/11/26/hexo%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A/"/>
      <url>/2021/11/26/hexo%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p><strong>将hexo部署到github上</strong></p><p>首先在自己的github上创建一个自己的仓库<a href="https://github.com/hejixing/hejixing.github.io">hejixing.github.io</a></p><p>仓库的名称需要自己的github名称 +.+github+.+io</p><p>然后hexo的配置文件中修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repository: git@github.com:hejixing/hejixing.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>type 改成 git ，仓库用自己的github上的ssh链接，建议不要用http链接，不然很难发布上去，注意分支要跟你github上的一样</p><p>hexo部署到github上 出现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/a956551943/a956551943.github.io/&#x27;: Encountered end of file</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/usr/local/src/hexo/hanyubolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:376:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式</p><p>申请ssh的key</p><p>需要先在</p><p>git bash 执行命令,生命公钥和私钥：<code>ssh-keygen -t rsa</code></p><p>一直回车，然后到</p><p>执行命令完成后,在window本地用户<code>.ssh</code>目录<code>C:\Users\用户名\.ssh</code>下面生成如下名称的公钥和私钥:</p><p>打开id_rsa.pub文件，这个是公钥</p><p>然后打开获取到里面的key</p><p>在自己的github上创建个ssh的名称，然后将公钥复制进去，点击新增就成功可以用ssh了</p><p><a href="https://blog.csdn.net/nanhuaibeian/article/details/106863816">一篇文章带你使用SSH方式在 GitHub 添加远程仓库-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 到blog的根目录下，然后进行命令 </span><br><span class="line">hexo g</span><br><span class="line">hexo  deploy</span><br></pre></td></tr></table></figure><p>然后就直接发布到自己的github上了</p><p>发布成功后</p><p>浏览链接</p><p><a href="https://hejixing.github.io/">https://hejixing.github.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo修改鼠标样式</title>
      <link href="/2021/11/26/Hexo%E4%BF%AE%E6%94%B9%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F/"/>
      <url>/2021/11/26/Hexo%E4%BF%AE%E6%94%B9%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo修改鼠标样式"><a href="#Hexo修改鼠标样式" class="headerlink" title="Hexo修改鼠标样式"></a>Hexo修改鼠标样式</h1><p>参考</p><p>[Hexo修改鼠标样式-阿里云开发者社区 (aliyun.com)](<a href="https://developer.aliyun.com/article/1143656#:~:text=%E6%89%93%E5%BC%80%E7%AB%99%E7%82%B9%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">https://developer.aliyun.com/article/1143656#:~:text=打开站点主题配置文件</a> _config.butterfly.yml ，找到 inject ，在 head 处直接引入该文件： inject%3A,-  最后 hexo g 部署就能看见效果啦)</p><p>1.在 <code>/themes/butterfly/source/css</code>路径下创建一个<code>mouse.css</code>文件，在文件中添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">   cursor:url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),</span><br><span class="line">         default;</span><br><span class="line"> &#125;</span><br><span class="line"> a,</span><br><span class="line"> img &#123;</span><br><span class="line">   cursor:url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),</span><br><span class="line">         default;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>打开站点主题配置文件<code>_config.butterfly.yml</code>，找到<code>inject</code>，在<code>head</code>处直接引入该文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">   head:</span><br><span class="line">   - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/mouse.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>最后 <code>hexo g</code> 部署就能看见效果啦</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo修改个人公告</title>
      <link href="/2021/11/26/hexo%E4%BF%AE%E6%94%B9%E4%B8%AA%E4%BA%BA%E5%85%AC%E5%91%8A/"/>
      <url>/2021/11/26/hexo%E4%BF%AE%E6%94%B9%E4%B8%AA%E4%BA%BA%E5%85%AC%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-修改个人公告"><a href="#hexo-修改个人公告" class="headerlink" title="hexo 修改个人公告"></a>hexo 修改个人公告</h1><p>参考</p><p><a href="https://blog.csdn.net/weixin_60558555/article/details/130453649">Hexo-Butterfly主题公告语法-CSDN博客</a></p><h3 id="1-打开自己博客的主题配置文件"><a href="#1-打开自己博客的主题配置文件" class="headerlink" title="1.打开自己博客的主题配置文件"></a>1.打开自己博客的主题配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;D:\Blog\themes\hexo-theme-butterfly\_config.yml&quot;</span><br></pre></td></tr></table></figure><h3 id="2-找到公告代码"><a href="#2-找到公告代码" class="headerlink" title="2.找到公告代码"></a>2.找到公告代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">card_announcement:</span><br><span class="line">  enable: true #是否开启公告 false/true</span><br><span class="line">  content: 暂无公告 #公告内容</span><br></pre></td></tr></table></figure><h3 id="3-使用标准HTML代码进行编译"><a href="#3-使用标准HTML代码进行编译" class="headerlink" title="3.使用标准HTML代码进行编译"></a>3.使用标准HTML代码进行编译</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">card_announcement:</span><br><span class="line">  enable: true</span><br><span class="line">  content: &lt;div&gt; &lt;p style=&quot;color:#ea66a6;text-align:center;font-size:16px&quot;&gt;欢迎来到小何の博客&lt;/p&gt;</span><br><span class="line">          &lt;p style=&quot;text-align:center&quot;&gt; &lt;a style=&quot;color:#8552a1;font-size:16px&quot; href=&quot;http://39.108.121.100/&quot;&gt;--- 主站 ---&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">          &lt;p style=&quot;text-align:center&quot;&gt;&lt;a style=&quot;color:#8552a1;font-size:16px&quot; href=&quot;http://39.108.121.100/&quot;&gt;hejixing.cn&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">          &lt;p style=&quot;text-align:center&quot;&gt;&lt;a style=&quot;color:#00ae9d;font-size:16px&quot; href=&quot;https://hejixing.github.io/&quot;&gt;--- 备用网站 ---&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">          &lt;p style=&quot;text-align:center&quot;&gt;&lt;a style=&quot;color:#00ae9d;font-size:16px&quot; href=&quot;https://hejixing.github.io/&quot;&gt;hejixing.github.io&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">          &lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Butterfly主题博客添加音乐播放器的简单版教程</title>
      <link href="/2021/11/26/Hexo-Butterfly%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E7%9A%84%E7%AE%80%E5%8D%95%E7%89%88%E6%95%99%E7%A8%8B/"/>
      <url>/2021/11/26/Hexo-Butterfly%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E7%9A%84%E7%AE%80%E5%8D%95%E7%89%88%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>Hexo+Butterfly主题博客添加音乐播放器的简单版教程</strong></p><p>参考</p><p>[Hexo+Butterfly主题博客添加音乐播放器的简单版教程_hexo音乐播放器-CSDN博客](<a href="https://blog.csdn.net/weixin_63549044/article/details/129335813#:~:text=%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4">https://blog.csdn.net/weixin_63549044/article/details/129335813#:~:text=实现步骤</a> 添加音乐播放器插件 可选择在vscode%2Fwebstorm终端运行 (一定要在博客项目文件中运行) 也可以gitbash (同样要在项目文件路径中运行) npm install,%23添加刚刚用npm下载插件的配置在_config文件中 同时实现全局音乐 将asset_inject设置成false aplayer%3A enable%3A true asset_inject%3A false)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>修改Butterfly主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加刚刚用npm下载插件的配置在_config文件中 同时实现全局音乐 将asset_inject设置成false</span><br><span class="line">aplayer:</span><br><span class="line">  enable: true</span><br><span class="line">  asset_inject: false</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Inject</span><br><span class="line"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottom:</span><br><span class="line">    - &#x27;&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;1947134859&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-fixed=&quot;true&quot; data-autoplay=&quot;true&quot;&gt; &lt;/div&gt;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 data-id&#x3D;”464916877”就是音乐分享复制链接<a href="https://music.163.com/song?id=1947134859&userid=1639248272">https://music.163.com/song?id=1947134859&amp;userid=1639248272</a></p><p>例如这里的id1947134859就是这首歌的id；userid是用户的id不需要</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#实现不会因跳转其他页面而重新播放音乐</span><br><span class="line">#相当于异步请求的ajax</span><br><span class="line">pjax:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>音乐页面添加音乐列表，前面是页面上的一首歌曲</strong></p><p>参考</p><p><a href="https://blog.csdn.net/qq_44082700/article/details/128898642">搭建Hexo博客+Music(三)_꧁༺℘₨风、凌๓༻꧂的博客-CSDN博客</a></p><p>使用 hexo-tag-aplayer 插件<br>hexo-tag-aplayer 是Aplayer在hexo上的插件，这里的配置参考的是官方文档 ，第一步安装 hexo-tag-aplayer：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>最新版的 hexo-tag-aplayer 已经支持了MetingJS的使用，可以直接解析网络平台的歌曲（简直是神器），首先要在站点配置文件中开启meting模式，添加以下代码在配置文件的最后：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure><p>复制歌单的链接，然后复制歌单的id，</p><p>例如 <a href="https://music.163.com/playlist?id=19723756">https://music.163.com/playlist?id=19723756</a> ，这个歌单的id就是19723756，公司名可以是tencent、netease或是其他公司，下面给出一个例子，</p><p>打开 &#x2F;Hexo&#x2F;source&#x2F;playlist&#x2F;index.md文件，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% meting &quot;523845661&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure><p>效果还是很不错的：</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加小部件(Butterfly主题) 添加卡通人物（看板娘）</title>
      <link href="/2021/11/26/Hexo%E6%B7%BB%E5%8A%A0%E5%B0%8F%E9%83%A8%E4%BB%B6-Butterfly%E4%B8%BB%E9%A2%98-%E6%B7%BB%E5%8A%A0%E5%8D%A1%E9%80%9A%E4%BA%BA%E7%89%A9%EF%BC%88%E7%9C%8B%E6%9D%BF%E5%A8%98%EF%BC%89/"/>
      <url>/2021/11/26/Hexo%E6%B7%BB%E5%8A%A0%E5%B0%8F%E9%83%A8%E4%BB%B6-Butterfly%E4%B8%BB%E9%A2%98-%E6%B7%BB%E5%8A%A0%E5%8D%A1%E9%80%9A%E4%BA%BA%E7%89%A9%EF%BC%88%E7%9C%8B%E6%9D%BF%E5%A8%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo添加小部件-Butterfly主题-添加卡通人物（看板娘）"><a href="#Hexo添加小部件-Butterfly主题-添加卡通人物（看板娘）" class="headerlink" title="Hexo添加小部件(Butterfly主题) 添加卡通人物（看板娘）"></a>Hexo添加小部件(Butterfly主题) 添加卡通人物（看板娘）</h1><p>参考</p><p><a href="https://blog.csdn.net/weixin_42429718/article/details/105626385">Hexo添加小部件(Butterfly主题) 添加卡通人物（看板娘）-CSDN博客</a></p><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93793530">Hexo博客添加live2d卡通人物_hexo live2d 动画人物库-CSDN博客</a></p><p>输入如下命令获取 live2d：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>输入以下命令，下载相应的模型，将 <code>haruto</code> 更换成你想要的模型名称即可（本人就选haruto）下面列表是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-haruto</span><br></pre></td></tr></table></figure><p>打开站点目录下的 <code>_config.yml</code>文件，添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">enable: true</span><br><span class="line">scriptFrom: local</span><br><span class="line">model: </span><br><span class="line">use: live2d-widget-model-haruto #模型选择</span><br><span class="line">display: </span><br><span class="line">position: left  #模型位置</span><br><span class="line">width: 150       #模型宽度</span><br><span class="line">height: 300      #模型高度</span><br><span class="line">mobile: </span><br><span class="line">show: true      #是否在手机端显示</span><br><span class="line">    react:</span><br><span class="line">    opacity: 1  #模型显示的模糊程度 1原图</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + butterfly添加雪花动态效果背景</title>
      <link href="/2021/11/26/Hexo-butterfly%E6%B7%BB%E5%8A%A0%E9%9B%AA%E8%8A%B1%E5%8A%A8%E6%80%81%E6%95%88%E6%9E%9C%E8%83%8C%E6%99%AF/"/>
      <url>/2021/11/26/Hexo-butterfly%E6%B7%BB%E5%8A%A0%E9%9B%AA%E8%8A%B1%E5%8A%A8%E6%80%81%E6%95%88%E6%9E%9C%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<p><strong>Hexo + butterfly添加雪花动态效果背景</strong></p><p>参考 花猪</p><p><a href="https://cnhuazhu.gitee.io/2021/02/24/Hexo%E9%AD%94%E6%94%B9/Hexo%E6%B7%BB%E5%8A%A0%E9%9B%AA%E8%8A%B1%E5%8A%A8%E6%80%81%E6%95%88%E6%9E%9C%E8%83%8C%E6%99%AF/index.html"><a href="https://cnhuazhu.gitee.io/2021/02/24/Hexo%E9%AD%94%E6%94%B9/Hexo%E6%B7%BB%E5%8A%A0%E9%9B%AA%E8%8A%B1%E5%8A%A8%E6%80%81%E6%95%88%E6%9E%9C%E8%83%8C%E6%99%AF/index.html">cnhuazhu.gitee.io</a></a></p><p>操作过程很简单</p><p>首先在\themes\butterfly\source\js目录下新建一个snowflake.js文件，然后将以下内容写入该文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) &#123;</span><br><span class="line">  // 移动端不显示</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  document.write(&#x27;&lt;canvas id=&quot;snow&quot; style=&quot;position:fixed;top:0;left:0;width:100%;height:100%;z-index:100;pointer-events:none&quot;&gt;&lt;/canvas&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">  window &amp;&amp; (()=&gt;&#123;</span><br><span class="line">    let e = &#123;</span><br><span class="line">        flakeCount: 50,</span><br><span class="line">        minDist: 150,</span><br><span class="line">        color: &quot;255, 255, 255&quot;,</span><br><span class="line">        size: 2,</span><br><span class="line">        speed: .5,</span><br><span class="line">        opacity: .2,</span><br><span class="line">        stepsize: .5</span><br><span class="line">    &#125;;</span><br><span class="line">    const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function(e) &#123;</span><br><span class="line">        window.setTimeout(e, 1e3 / 60)</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    window.requestAnimationFrame = t;</span><br><span class="line">    const i = document.getElementById(&quot;snow&quot;), </span><br><span class="line">    n = i.getContext(&quot;2d&quot;), </span><br><span class="line">    o = e.flakeCount;</span><br><span class="line">    let a = -100, </span><br><span class="line">    d = -100, </span><br><span class="line">    s = [];</span><br><span class="line">    i.width = window.innerWidth,</span><br><span class="line">    i.height = window.innerHeight;</span><br><span class="line">    const h = ()=&gt;&#123;</span><br><span class="line">        n.clearRect(0, 0, i.width, i.height);</span><br><span class="line">        const r = e.minDist;</span><br><span class="line">        for (let t = 0; t &lt; o; t++) &#123;</span><br><span class="line">            let o = s[t];</span><br><span class="line">            const h = a, </span><br><span class="line">            w = d, </span><br><span class="line">            m = o.x, </span><br><span class="line">            c = o.y, </span><br><span class="line">            p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));</span><br><span class="line">            if (p &lt; r) &#123;</span><br><span class="line">                const e = (h - m) / p, </span><br><span class="line">                t = (w - c) / p, </span><br><span class="line">                i = r / (p * p) / 2;</span><br><span class="line">                o.velX -= i * e,</span><br><span class="line">                o.velY -= i * t</span><br><span class="line">            &#125; else</span><br><span class="line">                o.velX *= .98,</span><br><span class="line">                o.velY &lt; o.speed &amp;&amp; o.speed - o.velY &gt; .01 &amp;&amp; (o.velY += .01 * (o.speed - o.velY)),</span><br><span class="line">                o.velX += Math.cos(o.step += .05) * o.stepSize;</span><br><span class="line">            n.fillStyle = &quot;rgba(&quot; + e.color + &quot;, &quot; + o.opacity + &quot;)&quot;,</span><br><span class="line">            o.y += o.velY,</span><br><span class="line">            o.x += o.velX,</span><br><span class="line">            (o.y &gt;= i.height || o.y &lt;= 0) &amp;&amp; l(o),</span><br><span class="line">            (o.x &gt;= i.width || o.x &lt;= 0) &amp;&amp; l(o),</span><br><span class="line">            n.beginPath(),</span><br><span class="line">            n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),</span><br><span class="line">            n.fill()</span><br><span class="line">        &#125;</span><br><span class="line">        t(h)</span><br><span class="line">    &#125;</span><br><span class="line">      , l = e=&gt;&#123;</span><br><span class="line">        e.x = Math.floor(Math.random() * i.width),</span><br><span class="line">        e.y = 0,</span><br><span class="line">        e.size = 3 * Math.random() + 2,</span><br><span class="line">        e.speed = 1 * Math.random() + .5,</span><br><span class="line">        e.velY = e.speed,</span><br><span class="line">        e.velX = 0,</span><br><span class="line">        e.opacity = .5 * Math.random() + .3</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    document.addEventListener(&quot;mousemove&quot;, (e=&gt;&#123;</span><br><span class="line">        a = e.clientX,</span><br><span class="line">        d = e.clientY</span><br><span class="line">    &#125;</span><br><span class="line">    )),</span><br><span class="line">    window.addEventListener(&quot;resize&quot;, (()=&gt;&#123;</span><br><span class="line">        i.width = window.innerWidth,</span><br><span class="line">        i.height = window.innerHeight</span><br><span class="line">    &#125;</span><br><span class="line">    )),</span><br><span class="line">    (()=&gt;&#123;</span><br><span class="line">        for (let t = 0; t &lt; o; t++) &#123;</span><br><span class="line">            const t = Math.floor(Math.random() * i.width)</span><br><span class="line">              , n = Math.floor(Math.random() * i.height)</span><br><span class="line">              , o = 3 * Math.random() + e.size</span><br><span class="line">              , a = 1 * Math.random() + e.speed</span><br><span class="line">              , d = .5 * Math.random() + e.opacity;</span><br><span class="line">            s.push(&#123;</span><br><span class="line">                speed: a,</span><br><span class="line">                velX: 0,</span><br><span class="line">                velY: a,</span><br><span class="line">                x: t,</span><br><span class="line">                y: n,</span><br><span class="line">                size: o,</span><br><span class="line">                stepSize: Math.random() / 30 * e.stepsize,</span><br><span class="line">                step: 0,</span><br><span class="line">                angle: 180,</span><br><span class="line">                opacity: d</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        h()</span><br><span class="line">    &#125;</span><br><span class="line">    )()</span><br><span class="line">  &#125;</span><br><span class="line">  )();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到主题配置文件_config.butterfly.yml，在inject的bottom引入该js文件:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;script src=&quot;/js/snowflake.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>其他下雪动效</p><p>操作过程也很简单，在\themes\butterfly\source\js目录下新建一个snow.js文件，然后将以下内容写入该文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function($)&#123;</span><br><span class="line">    $.fn.snow = function(options)&#123;</span><br><span class="line">    var $flake = $(&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;).css(&#123;&#x27;position&#x27;: &#x27;absolute&#x27;,&#x27;z-index&#x27;:&#x27;9999&#x27;, &#x27;top&#x27;: &#x27;-50px&#x27;&#125;).html(&#x27;&amp;#10052;&#x27;),</span><br><span class="line">    documentHeight  = $(document).height(),</span><br><span class="line">    documentWidth   = $(document).width(),</span><br><span class="line">    defaults = &#123;</span><br><span class="line">        minSize     : 10,</span><br><span class="line">        maxSize     : 20,</span><br><span class="line">        newOn       : 1000,</span><br><span class="line">        flakeColor  : &quot;#AFDAEF&quot; /* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><br><span class="line">    &#125;,</span><br><span class="line">    options = $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">    var interval= setInterval( function()&#123;</span><br><span class="line">    var startPositionLeft = Math.random() * documentWidth - 100,</span><br><span class="line">    startOpacity = 0.5 + Math.random(),</span><br><span class="line">    sizeFlake = options.minSize + Math.random() * options.maxSize,</span><br><span class="line">    endPositionTop = documentHeight - 200,</span><br><span class="line">    endPositionLeft = startPositionLeft - 500 + Math.random() * 500,</span><br><span class="line">    durationFall = documentHeight * 10 + Math.random() * 5000;</span><br><span class="line">    $flake.clone().appendTo(&#x27;body&#x27;).css(&#123;</span><br><span class="line">        left: startPositionLeft,</span><br><span class="line">        opacity: startOpacity,</span><br><span class="line">        &#x27;font-size&#x27;: sizeFlake,</span><br><span class="line">        color: options.flakeColor</span><br><span class="line">    &#125;).animate(&#123;</span><br><span class="line">        top: endPositionTop,</span><br><span class="line">        left: endPositionLeft,</span><br><span class="line">        opacity: 0.2</span><br><span class="line">    &#125;,durationFall,&#x27;linear&#x27;,function()&#123;</span><br><span class="line">        $(this).remove()</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(function()&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">        minSize: 5, /* 定义雪花最小尺寸 */</span><br><span class="line">        maxSize: 50,/* 定义雪花最大尺寸 */</span><br><span class="line">        newOn: 300  /* 定义密集程度，数字越小越密集 */</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后将该js文件引入主题配置文件_config.butterfly.yml，同样在在inject的bottom处：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottom:</span><br><span class="line">- &lt;script src=&quot;/js/snow.js&quot;&gt;&lt;/script&gt; # 下雪动效</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO - Butterfly 主题的一图流</title>
      <link href="/2021/11/26/HEXO-Butterfly-%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E5%9B%BE%E6%B5%81/"/>
      <url>/2021/11/26/HEXO-Butterfly-%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E5%9B%BE%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO-Butterfly-主题的一图流"><a href="#HEXO-Butterfly-主题的一图流" class="headerlink" title="HEXO - Butterfly 主题的一图流"></a>HEXO - Butterfly 主题的一图流</h1><p>參考</p><p><a href="https://qianchenggit.github.io/2021/10/06/%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E4%BD%BF%E7%94%A8%E4%B8%80%E5%9B%BE%E6%B5%81/">博客背景使用一图流 | QianChengGitの小森林</a></p><ol><li>步骤一：去除背景配置<br>ps: 最好不要使用背景美化的背景特效。</li></ol><p>打开主题配置文件（注意：不是博客配置文件）_config.yml，按Ctrl+F 快捷键弹出搜索框，输入 banner 关键词，将以下图片链接去掉。修改如下配置项：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Disable all banner image</span><br><span class="line">disable_top_img: false</span><br><span class="line"></span><br><span class="line"># The banner image of home page</span><br><span class="line">index_img: </span><br><span class="line"></span><br><span class="line"># If the banner of page not setting, it will show the top_img</span><br><span class="line">default_top_img: transparent</span><br><span class="line"></span><br><span class="line"># The banner image of archive page</span><br><span class="line">archive_img:</span><br><span class="line"></span><br><span class="line"># If the banner of tag page not setting, it will show the top_img</span><br><span class="line"># note: tag page, not tags page (子標籤頁面的 top_img)</span><br><span class="line">tag_img:</span><br><span class="line"></span><br><span class="line"># The banner image of tag page</span><br><span class="line"># format:</span><br><span class="line">#  - tag name: xxxxx</span><br><span class="line">tag_per_img:</span><br><span class="line"></span><br><span class="line"># If the banner of category page not setting, it will show the top_img</span><br><span class="line"># note: category page, not categories page (子分類頁面的 top_img)</span><br><span class="line">category_img:</span><br><span class="line"></span><br><span class="line"># The banner image of category page</span><br><span class="line"># format:</span><br><span class="line">#  - category name: xxxxx</span><br><span class="line">category_per_img:</span><br></pre></td></tr></table></figure><p>搜索关键词 background, 将颜色设置为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Website Background (設置網站背景)</span><br><span class="line"># can set it to color or image (可設置圖片 或者 顔色)</span><br><span class="line"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span><br><span class="line">background: url(/img/banner.jpg) # 修改为自己的图片</span><br><span class="line"></span><br><span class="line"># Footer Background</span><br><span class="line">footer_bg: transparent</span><br></pre></td></tr></table></figure><ol start="2"><li>步骤二：引入魔改样式，修改 CSS 样式</li></ol><p>引入魔改样式的方法很简单，自建一个 css 文件，然后引入即可：</p><p>以 butterfly 主题为例，可以在 [博客根目录]\themes\butterfly\source\css\ 目录下新建 custom.css 文件，然后在 [博客根目录]\themes\butterfly_config.yml 的 inject 配置项中引入自定义样式文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot;  media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure><p>其中 media&#x3D;”defer” onload&#x3D;”this.media&#x3D;’all’” 是异步加载配置项，确保自定义样式会在页面加载完成后才继续渲染。如果没有需求或效果不好可以不加这个。</p><p>我的博客一图流 css 样式设置如下，修改 custom.css 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 首页文章卡片 */</span><br><span class="line">#recent-posts &gt; .recent-post-item&#123;</span><br><span class="line">  background:rgba(255, 255, 255, 0.8);</span><br><span class="line">&#125;</span><br><span class="line">/* 首页侧栏卡片 */</span><br><span class="line">.card-widget&#123;</span><br><span class="line">background:rgba(255, 255, 255, 0.8)!important;</span><br><span class="line">&#125;</span><br><span class="line">/* 文章页面正文背景 */</span><br><span class="line">div#post&#123;</span><br><span class="line">background: rgba(255, 255, 255, 0.8);</span><br><span class="line">&#125;</span><br><span class="line">/* 分页页面 */</span><br><span class="line">div#page&#123;</span><br><span class="line">background: rgba(255, 255, 255, 0.8);</span><br><span class="line">&#125;</span><br><span class="line">/* 归档页面 */</span><br><span class="line">div#archive&#123;</span><br><span class="line">background: rgba(255, 255, 255, 0.8);</span><br><span class="line">&#125;</span><br><span class="line">/* 标签页面 */</span><br><span class="line">div#tag&#123;</span><br><span class="line">background: rgba(255, 255, 255, 0.8);</span><br><span class="line">&#125;</span><br><span class="line">/* 分类页面 */</span><br><span class="line">div#category&#123;</span><br><span class="line">background: rgba(255, 255, 255, 0.8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 页脚透明 */</span><br><span class="line">#footer&#123;</span><br><span class="line">  background: transparent!important;</span><br><span class="line">&#125;</span><br><span class="line">/* 头图透明 */</span><br><span class="line">#page-header&#123;</span><br><span class="line">  background: transparent!important;</span><br><span class="line">&#125;</span><br><span class="line">/*白天模式伪类遮罩层透明*/</span><br><span class="line">[data-theme=&quot;light&quot;]</span><br><span class="line">  #footer::before&#123;</span><br><span class="line">      background: transparent!important;</span><br><span class="line">    &#125;</span><br><span class="line">/*夜间模式伪类遮罩层透明*/</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  #footer::before&#123;</span><br><span class="line">      background: transparent!important;</span><br><span class="line">    &#125;</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  #page-header::before&#123;</span><br><span class="line">    background: transparent!important;</span><br><span class="line">    &#125;</span><br><span class="line">/*夜间模式页面背景设置为半透明*/</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  div.recent-post-item&#123;</span><br><span class="line">      background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">    &#125;</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  #aside-content .card-widget&#123;</span><br><span class="line">      background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">    &#125;</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  div#post&#123;</span><br><span class="line">    background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">    &#125;</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  div#page&#123;</span><br><span class="line">    background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">    &#125;</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  div#archive&#123;</span><br><span class="line">    background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">    &#125;</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  div#tag&#123;</span><br><span class="line">    background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">  &#125;</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  div#category&#123;</span><br><span class="line">    background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">/*阅读模式*/</span><br><span class="line">.read-mode #aside-content .card-widget&#123;</span><br><span class="line">      background: rgba(158, 204, 171, 0.5)!important;</span><br><span class="line">    &#125;</span><br><span class="line">.read-mode div#post&#123;</span><br><span class="line">    background: rgba(158, 204, 171, 0.5)!important;</span><br><span class="line">    &#125;</span><br><span class="line">/*夜间阅读模式*/</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  .read-mode #aside-content .card-widget&#123;</span><br><span class="line">        background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">        color: #eeeeee;</span><br><span class="line">      &#125;</span><br><span class="line">[data-theme=&quot;dark&quot;]  </span><br><span class="line">  .read-mode div#post&#123;</span><br><span class="line">      background: rgba(0, 0, 0, 0.5)!important;</span><br><span class="line">      color: #eeeeee;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
